<?xml version="1.0" encoding="UTF-8"?>
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <journal-meta>
      <journal-title-group>
        <journal-title>Chor B (2014) Computational Thinking in Life Science Education. PLoS Comput
Biol 10(11): e1003897. doi:10.1371/journal.pcbi.1003897</journal-title>
      </journal-title-group>
    </journal-meta>
    <article-meta>
      <article-id pub-id-type="doi">10.1371/journal.pcbi.1003897</article-id>
      <title-group>
        <article-title>Computational Thinking in Life Science Education</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author">
          <string-name>Amir Rubinstein</string-name>
          <email>amirr@tau.ac.il</email>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="author">
          <string-name>Benny Chor</string-name>
          <xref ref-type="aff" rid="aff0">0</xref>
        </contrib>
        <contrib contrib-type="editor">
          <string-name>Joanne A. Fox, University of British Columbia, Canada</string-name>
        </contrib>
        <aff id="aff0">
          <label>0</label>
          <institution>School of Computer Science, Tel-Aviv University</institution>
          ,
          <addr-line>Tel Aviv</addr-line>
          ,
          <country country="IL">Israel</country>
        </aff>
      </contrib-group>
      <pub-date>
        <day>20</day>
        <month>11</month>
        <year>2014</year>
      </pub-date>
      <volume>10</volume>
      <issue>11</issue>
      <abstract>
        <p>We join the increasing call to take computational education of life science students a step further, beyond teaching mere programming and employing existing software tools. We describe a new course, focusing on enriching the curriculum of life science students with abstract, algorithmic, and logical thinking, and exposing them to the computational ''culture.'' The design, structure, and content of our course are influenced by recent efforts in this area, collaborations with life scientists, and our own instructional experience. Specifically, we suggest that an effective course of this nature should: (1) devote time to explicitly reflect upon computational thinking processes, resisting the temptation to drift to purely practical instruction, (2) focus on discrete notions, rather than on continuous ones, and (3) have basic programming as a prerequisite, so students need not be preoccupied with elementary programming issues. We strongly recommend that the mere use of existing bioinformatics tools and packages should not replace hands-on programming. Yet, we suggest that programming will mostly serve as a means to practice computational thinking processes. This paper deals with the challenges and considerations of such computational education for life science students. It also describes a concrete implementation of the course and encourages its use by others.</p>
      </abstract>
    </article-meta>
  </front>
  <body>
    <sec id="sec-1">
      <title>Background</title>
      <p>
        The ‘‘cultural gap’’ between biological
and computational sciences has become
increasingly evident in recent years. Life
sciences are going through a dramatic
biotechnological revolution, producing
huge amounts of data, which is often
placed in public databases. The analysis of
these data requires nontrivial
computational ideas. Life sciences curricula,
however, have hardly been altered to reflect
this revolution [
        <xref ref-type="bibr" rid="ref1 ref2 ref3">1–3</xref>
        ]. Some universities
require life science students to take an
introductory programming course, while
others require a course on bioinformatics
tools. These courses tend to focus on
practical programming skills or on
technical handling of bioinformatics tools. Often,
not enough emphasis is put on developing
abstract and algorithmic thinking skills in
such courses. More advanced
computational courses are either inapplicable
without appropriate background or
narrow down to very specific topics.
      </p>
      <p>This gap presumably starts at the
classroom, but it lingers later on. Biology in
many institutes and labs is still primarily a
descriptive science with little computational
approaches being used on a daily basis.</p>
      <p>
        Computational approaches in this context
are not the mere use of tools, but the
integration of computational thinking and
algorithms to experiments design; to data
generation, integration, and analyses; and
to modeling. It is often the case that because
of the lack of computational background
and relevant training, bench biologists
employ computational methods as ‘‘black
boxes’’ without a deep understanding of the
computational concepts, underlying
assumptions, and the limitations of such
models. The practice of employing
computational methods in biology is usually done
in one of two flavors: a somewhat
‘‘automatic’’ use of existing bioinformatics tools
by biologists or the application of algorithms
to biological data by computer scientists and
mathematicians. Both modes may result in
a misinterpretation of results and in
erroneous conclusion making [
        <xref ref-type="bibr" rid="ref4">4</xref>
        ]. Biologists are
rarely directly involved in the development
of mathematical and computational models.
      </p>
      <p>This is mostly due to the complexity of such
models and the gaps between the biological
and computational cultures.</p>
      <p>
        The majority of biological laboratories
would greatly benefit from using
computational tools on a daily basis and,
consequently, from the presence of an
‘‘in-house’’ expert with a solid
computational understanding. Indeed, the need to
provide life science students with a wider,
deeper computational education, beyond
just hands-on skills, is being widely
recognized [
        <xref ref-type="bibr" rid="ref1 ref2 ref3 ref4 ref5 ref6 ref7">1–7</xref>
        ]. However, only a few concrete
initiatives have so far been implemented.
      </p>
      <p>
        A notable one is the ‘‘integrated science’’
introductory curriculum [
        <xref ref-type="bibr" rid="ref1">1</xref>
        ], breaking
down traditional disciplinary barriers,
developed in Princeton University by
David Botstein and William Bialek.
Another initiative, at Harvey Mudd College,
is the ‘‘"CS5 green’’ course [
        <xref ref-type="bibr" rid="ref8 ref9">8,9</xref>
        ]: an
introductory computer science (CS) course
‘‘designed to give the foundations of
computer science in the context of solving
real and important problems in the
biological sciences.’’ An international
conference dedicated to bioinformatics
education, RECOMB-BE, was founded in
2009. General CS education conferences
(SIGCSE, iTiCSE) also provide venues for
discussions and reports on this topic
[
        <xref ref-type="bibr" rid="ref10 ref7">7,10</xref>
        ]. The education article type of
PLOS Computational Biology is a notable
resource for practical tutorials and
opinions. Online courses, such as Rosalind
(http://rosalind.info/problems/locations),
have started to appear, aiming to attract
biologists who want to develop
programming skills at their own pace. Several
books about computational methods,
aimed at biologists, have been published
recently [
        <xref ref-type="bibr" rid="ref11 ref12">11,12</xref>
        ]. These important
initiatives promote the incorporation of
quantitative computational skills in
biology. Still, their influence on life science
      </p>
      <p>Funding: This study was supported in part by a fellowship from the Edmond J. Safra Center for Bioinformatics
at Tel-Aviv University. The funders had no role in study design, data collection and analysis, decision to publish,
or preparation of the manuscript.</p>
      <p>Competing Interests: The authors have declared that no competing interests exist.
undergraduate curricula has been
somewhat limited so far.</p>
      <p>We join the above-mentioned efforts.</p>
      <p>
        We urge such an educational revolution in
life sciences and propose a novel,
standalone, concrete educational building
block: a non-introductory course, that
aims to expose students to the
computational ‘‘culture’’ and focuses on developing
computational thinking skills [
        <xref ref-type="bibr" rid="ref13">13</xref>
        ], rather
than on the mere use of existing
bioinformatics tools or programming. The course
introduces a diverse range of
computational concepts and ideas and
demonstrates their applicability to life science.
      </p>
      <p>We believe this course constitutes a novel,
genuine contribution in the area of
educational computational biology.</p>
    </sec>
    <sec id="sec-2">
      <title>Incorporating Computational</title>
    </sec>
    <sec id="sec-3">
      <title>Thinking in Life Sciences</title>
      <p>The course we developed, titled
‘‘Computational Approaches for Life Scientists’’
(http://ca4ls.wikidot.com), is targeted
specifically for life science students, both
advanced undergraduate and graduate. It
is a non-introductory course—basic
programming is a pre-requisite (see more
details about this choice later). The
course’s primary goal is:</p>
      <p>To develop students’ computational
thinking skills by exposing them to the
abstract, algorithmic, and logical
‘‘culture’’ of computer science, and
familiarizing them with fundamental
computational ideas and concepts.</p>
      <p>From the biological point of view, the
course consists of four main modules
(Figure 1), each corresponding to a
different biological domain. We believe it is
more accessible to life science students
when the course is structured, at high
level, in a biologically dominated manner.
Each module spans two to four
computational topics (one per week) (Figure 1).</p>
      <p>The focus of our course is the
development of abstract and computational
thinking. The design of each module includes
four main instructional themes in a
‘‘pipeline’’ structure:
(1) Presenting the motivating biological
problem and relevant biological
background. Given students’ biological
background, this part is typically
rather brief
(2) Formulating the problem in
computational terms, familiarizing
appropriate concepts and notions
(3) Dealing with programming issues
needed to implement the new ideas
(4) Reflecting on the whole process,
bringing to light the fundamental
computational thinking skills
practiced</p>
      <p>The supplementary Text S1 presents a
detailed example of a ‘‘path’’ through three
topics in the pipeline structure. This
example is aimed at understanding the
principles behind sequence assembly.
Figure S1 depicts this process. We remark that
here, as well as in other topics in the course,
this is a spiral learning process. Students are
‘‘walked through’’ this pipeline more than
once, and experience several variants (of
increasing complexities) on the
computational and biological problems.</p>
      <p>Table 1 maps some fundamental
computational concepts and thinking processes,
and demonstrates topics from our course
harnessed to acquire them. We believe that
the fourth stage of the suggested
instructional pipeline is highly important. Directly
naming these concepts, ideas, and
processes, discussing them, and reflecting upon
them in the context of the new topic will
raise students’ awareness to them, such that
they will be more likely to practice them
again in the future.</p>
      <p>The design of the course was guided by
several additional considerations, which
we detail below.</p>
      <sec id="sec-3-1">
        <title>Choice of topics</title>
        <p>The course topics span several algorithmic
and logical concepts that lie at the heart of
CS. These concepts are demonstrated in
relevant biological contexts. Two main
criteria are considered in the choice of topics:
(1) how relevant the topic is for research and
practice in life sciences and (2) to what extent
the topic can be harnessed to expose students
to the computational ‘‘culture’’ and to
practice relevant thinking skills. We tackle a
wide spectrum of biological and
computational issues, appealing to a fairly broad
audience among life science students.</p>
      </sec>
      <sec id="sec-3-2">
        <title>Programming</title>
        <p>Even though this is not a programming
course, students are required to solve
‘‘real-life’’ biological problems using code.
We introduce the programming language
Python at the beginning of the course
(about two weeks, six hours). It then serves
as a vehicle to deliver course topics. While
teaching Python, we focus on its practical
use, rather than on language syntax and
specifications (the latter are more likely to
be emphasized in an introductory
programming course). Our experience shows
that when learning includes concrete,
hands-on practice, computational thinking
skills are better acquired and underlying
concepts are better understood.</p>
      </sec>
      <sec id="sec-3-3">
        <title>Emphasis on discrete notions</title>
        <p>
          One important choice in the course’s
design was to exclusively concentrate on
discrete approaches such as finite graphs,
strings, digital images (represented as a
matrix of discrete elements—pixels), finite
state automata, etc. These are highly
underrepresented in life science curricula,
in which continuous notions, such as
derivatives, integrals, and differential
equations, are taught more widely [
          <xref ref-type="bibr" rid="ref12 ref14">12,14</xref>
          ].
        </p>
      </sec>
      <sec id="sec-3-4">
        <title>Level of formalism</title>
        <p>We choose a level of formalism that
matches students’ background. Obviously
we do not use the same level of formalism
as in ‘‘pure’’ CS courses. Nonetheless, we
do insist on taking students out of their
‘‘cognitive comfort zone’’ in the sense that
we expect them to handle abstract notions
and to formalize their statements and
algorithms in a rigorous and logical
manner. Still, we leave ample time for
classroom discussion and for developing
intuition and try not to drift into a
tooformal or technical instruction.</p>
      </sec>
    </sec>
    <sec id="sec-4">
      <title>Learning Outcomes and</title>
    </sec>
    <sec id="sec-5">
      <title>Evaluation</title>
      <p>Upon successful completion of the
course, we expect students to:
N Be familiar with several fundamental
concepts and notions in CS, and their
applicability to life sciences. Figure 1
lists these computational concepts, and
Table 1 describes additional notions
related to computational thinking skills
N Be able to identify problems whose
manual solution is not feasible, yet they
are amenable to a computational solution
N Feel comfortable to communicate with
computational
biologists/bioinformaticians
N Be able to implement basic solutions to
simple biological problems they
encounter, and to effectively
communicate with more experienced
programmers for more complex problems</p>
      <p>The course was taught for the first two
times in 2013 and 2014 at the Technion,
Israel Institute of Technology, Faculty of
Biology. In the first round of the course, it
was taken for credit by five graduate level
and three undergraduate level students. In
the second round, it was taken by eight
graduate level and nine undergraduate
level students. All had elementary
programming background in either C,
Matlab, or Pascal (a programming course is
mandatory for all Technion
undergraduate students). Participants were required to
submit five home assignments, each
including programming tasks and theoretical
questions. In the first round, a take-home
exam was given at the end, which was
replaced in the second round by a final
research project: students chose topics that
they found interesting among the course
subjects, extended them in some manner,
and applied them to real biological data.
Additional details regarding the projects,
and specific project examples, appear in
the supplementary Text S2. At the end of
the semester, students were either
interviewed by the lecturer or asked to fill
a survey for feedback. These feedbacks
are summarized in the supplementary
Text S3.</p>
      <p>To examine the effect of the course on
how students view computer science, they
were asked to define this discipline before
and after the course. Prior to the course,
students related the field mostly to the
computer as a machine and to software and
tools. At the end of the course, however,
they tended to relate CS to broader and
more abstract terms, such as problem
solving and modeling (see Figure 2). We
believe this shift in the view of the
discipline, especially considering the prior
exposure of our students to programming,
strengthens the rationale for such a course.</p>
    </sec>
    <sec id="sec-6">
      <title>Discussion</title>
      <p>Obviously, there is more than a single
way to expose life sciences students to
computational thinking. Yet, based on our
experience, and on numerous discussions
with life scientists and bioinformaticians,
we feel that a single one-semester course,
which does not assume a basic
programming course as a prerequisite, is likely to
miss the goal of teaching computational
thinking and computational concepts to
life science students. If basic programming
is taught from scratch, not enough time
will be left for the higher level
computational concepts and their relations to
biology, so the depth of coverage of
computational thinking will be smaller.</p>
      <p>Alternatively, the use of packages could
dominate the hands-on experience,
‘‘masking’’ the computational ideas. On
the other hand, having such a basic
programming prerequisite, as in our
course, enables us to take the students a
step further, beyond programming and
tool handling. This facilitates exploring
abstract computational notions,
experimenting ‘‘first hand’’ with coding them,
and applying the code to concrete
biological tasks. We believe that these days, a
basic programming course is a crucial
component of every science curricula.</p>
      <p>This leads to the recommendation that
basic programming should be taught
separately, prior to a computational
thinking course. Such a prerequisite will
allow the students to digest programming
issues well before, so they need not be
preoccupied with technical issues while
Generalization</p>
      <p>Topics/examples in which they are employed in the course
Computer representation of biological entities (e.g., graphs for networks, strings for DNA/proteins,
matrices of pixels for images)
Distinction between abstract data types and their implementation (e.g., a graph can be represented
as an adjacency matrix or as a neighbors list)
From the ‘‘bridges of Konigsberg’’ to conditions for the existence of an Eulerian path in a graph
From Boolean to discrete models
From the ‘‘Game of Life’’ to cellular automata
Image noise reduction and edge detection apply different local morphological operators on image pixels (mean,
median, dilation, erosion), thus all are implemented as concrete invocations of a general local operator function
Simulation of the ’’Game of Life’’ separates GUI, logic (local transition rules) and data control (the ‘‘engine’’ of the simulation)
Reducing variants of shortest paths to the shortest path from a single source
Reducing Hamiltonian path to travelling salesperson, arguing NP-completeness of the former
Building the suffix tree of a string for later substring matching ‘‘Compiling’’ a regular expression (in Python) for pattern
matching
Graph
Stack, used for finding Eulerian paths in a graph
Priority queue, used for finding shortest paths in a graphs with Dijkstra’s algorithm
Hash table, used as a dictionary, and for the longest common substring problem
Trie, used as a dictionary for strings
Suffix tree, used for various string problems
Deterministic finite automata (DFA)
Using DFA for pattern matching
Dijkstra’s algorithm
Regular expressions’ evaluation in a greedy manner in Python’s re package
Traveling salesperson and the de novo assembly problem: demonstrating NP-completeness
Eulerian versus Hamiltonian paths for sequencing by hybridization
Graph isomorphism
Graphs
Cellular automata</p>
      <p>Discrete ‘‘state graphs’’ for the simulation of regulation networks
taking a computational thinking course.</p>
      <p>Furthermore, we feel that the
understanding of computational thinking and the
‘‘language’’ of CS are hard to obtain
independently. While a student
‘‘speaking’’ this language can easily educate
him/herself in the use of bioinformatics
tools, the other direction is far less
amenable to self-study. Teachers engaged
with computational education for
biologists are sometimes tempted to make their
course as practical as they can (and many
students feel more comfortable staying
away from abstract topics). While
practical skills are, of course, important and
motivating, we believe that time and
educational effort must be spent on
abstract notions and thinking processes:
naming, discussing, and reflecting upon
them.</p>
      <p>Most of these conclusions are
supported by the surveys and interviews
conducted among course students
during the two semesters it was taught.</p>
      <p>Clearly, a more in-depth evaluation of
the course, based on a larger number of
participants, is called for. This is
planned to take place in future offerings
of the course.</p>
      <p>In our view, an essential part of any
course aiming to teach computational
thinking to life scientists is the interaction
in class, with an able instructor who is
knowledgeable in both computer and life
sciences. Class interactions in the form of
discussions, guided solutions to problems,
naming of thinking processes, and exposure
of students to alternative (including
incorrect) approaches are at the heart of the
learning process in this course. Our four-step
pipeline instruction model prevents
spending too much time on technical aspects since
part of the time is explicitly dedicated to
reflection and discussion in class.</p>
      <p>We strongly believe that we have an
important message to deliver. We propose a
way to take life scientists’ computational
education a step further. Even small steps in
this direction are likely to have substantial
consequences in life or medical science
practices and research in the long run. Such
initiatives can greatly contribute to
narrowing the gaps between life sciences and
bioinformatics/computational biology and
motivate other scientists and science
education experts to be involved in similar efforts.</p>
    </sec>
    <sec id="sec-7">
      <title>Supporting Information</title>
      <p>
        Figure S1 A ‘‘path’’ through three topics
in the pipeline structure.
(TIF)
Figure S2 (A) A microscope slide
containing Bacilli anthracis cells and
spores (image taken from [
        <xref ref-type="bibr" rid="ref2">2</xref>
        ]). (B)
Endospores identified (white spots in
the original image). (C) Vegetative cells
identified (dark spots in the original
image).
(TIF)
Figure S3 Students’ attitudes towards
home assignments difficulty and
effectiveness.
(TIF)
Text S1 A path through three topics in
the pipeline structure of the course.
(DOCX)
      </p>
      <sec id="sec-7-1">
        <title>Examples for end of course</title>
        <p>Text S2
projects.
(DOCX)
Text S3
(DOCX)</p>
      </sec>
      <sec id="sec-7-2">
        <title>Feedback from course students.</title>
      </sec>
    </sec>
    <sec id="sec-8">
      <title>Acknowledgments</title>
      <p>We thank Metsada Pasmanik-Chor for her
constructive criticism on an earlier version of
this manuscript.</p>
    </sec>
  </body>
  <back>
    <ref-list>
      <ref id="ref1">
        <mixed-citation>
          1.
          <string-name>
            <surname>Bialek</surname>
            <given-names>W</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Botstein</surname>
            <given-names>D</given-names>
          </string-name>
          (
          <year>2004</year>
          )
          <article-title>Introductory science and mathematics education for 21st-century biologists</article-title>
          .
          <source>Science Signaling</source>
          <volume>303</volume>
          :
          <fpage>788</fpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref2">
        <mixed-citation>
          2.
          <string-name>
            <surname>Pevzner</surname>
            <given-names>P</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Shamir</surname>
            <given-names>R</given-names>
          </string-name>
          (
          <year>2009</year>
          )
          <article-title>Computing has changed biology-biology education must catch up</article-title>
          .
          <source>Science</source>
          <volume>325</volume>
          :
          <fpage>541</fpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref3">
        <mixed-citation>
          3.
          <string-name>
            <surname>Pevzner</surname>
            <given-names>P</given-names>
          </string-name>
          (
          <year>2004</year>
          )
          <article-title>Educating biologists in the 21st century: bioinformatics scientists versus bioinformatics technicians</article-title>
          .
          <source>Bioinformatics</source>
          <volume>20</volume>
          (14):
          <fpage>2159</fpage>
          -
          <lpage>61</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref4">
        <mixed-citation>
          4.
          <string-name>
            <surname>May</surname>
            <given-names>RM</given-names>
          </string-name>
          (
          <year>2004</year>
          )
          <article-title>Uses and abuses of mathematics in biology</article-title>
          .
          <source>Science</source>
          <volume>303</volume>
          :
          <fpage>790</fpage>
          -
          <lpage>793</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref5">
        <mixed-citation>
          <article-title>5. Committee on Undergraduate Biology Education to Prepare Research Scientists for the 21st Century</article-title>
          ,
          <source>Board on Life Sciences, Division of Earth and Life Sciences, National Research Council</source>
          (
          <year>2003</year>
          )
          <article-title>BIO 2010: Transforming Undergraduate Education for Future Research Biologists</article-title>
          . Washington, DC: National Academies Press.
        </mixed-citation>
      </ref>
      <ref id="ref6">
        <mixed-citation>
          6.
          <string-name>
            <surname>Gross</surname>
            <given-names>LJ</given-names>
          </string-name>
          (
          <year>2004</year>
          )
          <article-title>Points of view: the interface of mathematics and biology interdisciplinarity and the undergraduate biology curriculum: finding a balance</article-title>
          .
          <source>Cell Biology Education</source>
          <volume>3</volume>
          :
          <fpage>85</fpage>
          -
          <lpage>87</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref7">
        <mixed-citation>
          7.
          <string-name>
            <surname>Qin</surname>
            <given-names>H</given-names>
          </string-name>
          (
          <year>2009</year>
          )
          <article-title>Teaching computational thinking through bioinformatics to biology students</article-title>
          .
          <source>In: ACM SIGCSE Bulletin</source>
          , volume
          <volume>41</volume>
          , pp.
          <fpage>188</fpage>
          -
          <lpage>191</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref8">
        <mixed-citation>
          8.
          <string-name>
            <surname>Dodds</surname>
            <given-names>Z</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Libeskind-Hadas</surname>
            <given-names>R</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Bush</surname>
            <given-names>E</given-names>
          </string-name>
          (
          <year>2010</year>
          )
          <article-title>When cs 1 is biology 1: crossdisciplinary collaboration as cs context</article-title>
          .
          <source>In: Proceedings of the fifteenth annual conference on Innovation and technology in computer science education</source>
          , pp.
          <fpage>219</fpage>
          -
          <lpage>223</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref9">
        <mixed-citation>
          9.
          <string-name>
            <surname>Libeskind-Hadas</surname>
            <given-names>R</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Bush</surname>
            <given-names>E</given-names>
          </string-name>
          (
          <year>2013</year>
          )
          <article-title>A first course in computing with applications to biology</article-title>
          . Brief Bioinform.
        </mixed-citation>
      </ref>
      <ref id="ref10">
        <mixed-citation>
          10.
          <string-name>
            <surname>Settle</surname>
            <given-names>A</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Goldberg</surname>
            <given-names>DS</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Barr</surname>
            <given-names>V</given-names>
          </string-name>
          (
          <year>2013</year>
          )
          <article-title>Beyond computer science: computational thinking across disciplines</article-title>
          .
          <source>In: Proceedings of the 18th ACM conference on Innovation and technology in computer science education</source>
          , pp.
          <fpage>311</fpage>
          -
          <lpage>312</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref11">
        <mixed-citation>
          11.
          <string-name>
            <surname>Pevzner</surname>
            <given-names>P</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Shamir</surname>
            <given-names>R</given-names>
          </string-name>
          (
          <year>2011</year>
          )
          <article-title>Bioinformatics for biologists</article-title>
          . Cambridge University Press.
        </mixed-citation>
      </ref>
      <ref id="ref12">
        <mixed-citation>
          12.
          <string-name>
            <surname>Robeva</surname>
            <given-names>R</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Hodge</surname>
            <given-names>TL</given-names>
          </string-name>
          (
          <year>2013</year>
          )
          <article-title>Mathematical Concepts and Methods in Modern Biology: Using Modern Discrete Models</article-title>
          . London: Academic Press.
        </mixed-citation>
      </ref>
      <ref id="ref13">
        <mixed-citation>
          13.
          <string-name>
            <surname>Wing</surname>
            <given-names>JM</given-names>
          </string-name>
          (
          <year>2006</year>
          )
          <article-title>Computational thinking</article-title>
          .
          <source>Communications of the ACM</source>
          <volume>49</volume>
          :
          <fpage>33</fpage>
          -
          <lpage>35</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref14">
        <mixed-citation>
          14.
          <string-name>
            <surname>Robeva</surname>
            <given-names>R</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Laubenbacher</surname>
            <given-names>R</given-names>
          </string-name>
          (
          <year>2009</year>
          )
          <article-title>Mathematical biology education: beyond calculus</article-title>
          .
          <source>Science</source>
          <volume>325</volume>
          (
          <issue>5940</issue>
          ):
          <fpage>542</fpage>
          -
          <lpage>3</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref15">
        <mixed-citation>
          15.
          <string-name>
            <surname>Kramer</surname>
            <given-names>J</given-names>
          </string-name>
          (
          <year>2007</year>
          )
          <article-title>Is abstraction the key to computing?</article-title>
          <source>Communications of the ACM</source>
          <volume>50</volume>
          :
          <fpage>36</fpage>
          -
          <lpage>42</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref16">
        <mixed-citation>
          16.
          <string-name>
            <surname>Kramer</surname>
            <given-names>J</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Hazzan</surname>
            <given-names>O</given-names>
          </string-name>
          (
          <year>2006</year>
          )
          <article-title>The role of abstraction in software engineering</article-title>
          .
          <source>In: Proceedings of the 28th international conference on Software engineering</source>
          , pp.
          <fpage>1017</fpage>
          -
          <lpage>1018</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref17">
        <mixed-citation>
          17.
          <string-name>
            <surname>Muller</surname>
            <given-names>O</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Rubinstein</surname>
            <given-names>A</given-names>
          </string-name>
          (
          <year>2011</year>
          )
          <article-title>Work in progress: courses dedicated to the development of logical and algorithmic thinking</article-title>
          .
          <source>In: Frontiers in Education Conference (FIE)</source>
          ,
          <year>2011</year>
          , pp.
          <fpage>F3G</fpage>
          -
          <lpage>1</lpage>
          .
        </mixed-citation>
      </ref>
      <ref id="ref18">
        <mixed-citation>
          18.
          <string-name>
            <surname>Armoni</surname>
            <given-names>M</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Gal-Ezer</surname>
            <given-names>J</given-names>
          </string-name>
          ,
          <string-name>
            <surname>Hazzan</surname>
            <given-names>O</given-names>
          </string-name>
          (
          <year>2006</year>
          )
          <article-title>Reductive thinking in computer science</article-title>
          .
          <source>Computer Science Education</source>
          <volume>16</volume>
          :
          <fpage>281</fpage>
          -
          <lpage>301</lpage>
          .
        </mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>