<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article article-type="research-article" dtd-version="3.0" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS ONE</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">plosone</journal-id>
<journal-title-group>
<journal-title>PLOS ONE</journal-title>
</journal-title-group>
<issn pub-type="epub">1932-6203</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PONE-D-15-46795</article-id>
<article-id pub-id-type="doi">10.1371/journal.pone.0146581</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
</article-categories>
<title-group>
<article-title>Neurokernel: An Open Source Platform for Emulating the Fruit Fly Brain</article-title>
<alt-title alt-title-type="running-head">Neurokernel: An Open Source Platform for Emulating the Fruit Fly Brain</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<name name-style="western">
<surname>Givon</surname> <given-names>Lev E.</given-names></name>
<xref ref-type="aff" rid="aff001"/>
</contrib>
<contrib contrib-type="author" corresp="yes" equal-contrib="yes" xlink:type="simple">
<name name-style="western">
<surname>Lazar</surname> <given-names>Aurel A.</given-names></name>
<xref ref-type="corresp" rid="cor001">*</xref>
<xref ref-type="aff" rid="aff001"/>
</contrib>
</contrib-group>
<aff id="aff001">
<addr-line>Department of Electrical Engineering, Columbia University, New York, NY 10027, United States of America</addr-line>
</aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Lytton</surname> <given-names>William W</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1">
<addr-line>SUNY Downstate MC, UNITED STATES</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<fn fn-type="con" id="contrib001">
<p>Conceived and designed the experiments: LEG AAL. Performed the experiments: LEG. Analyzed the data: LEG AAL. Contributed reagents/materials/analysis tools: AAL. Wrote the paper: LEG AAL. Initiated project: AAL.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">aurel@ee.columbia.edu</email></corresp>
</author-notes>
<pub-date pub-type="collection">
<year>2016</year>
</pub-date>
<pub-date pub-type="epub">
<day>11</day>
<month>1</month>
<year>2016</year>
</pub-date>
<volume>11</volume>
<issue>1</issue>
<elocation-id>e0146581</elocation-id>
<history>
<date date-type="received">
<day>26</day>
<month>10</month>
<year>2015</year>
</date>
<date date-type="accepted">
<day>18</day>
<month>12</month>
<year>2015</year>
</date>
</history>
<permissions>
<copyright-year>2016</copyright-year>
<copyright-holder>Givon, Lazar</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pone.0146581"/>
<abstract>
<p>We have developed an open software platform called Neurokernel for collaborative development of comprehensive models of the brain of the fruit fly <italic>Drosophila melanogaster</italic> and their execution and testing on multiple Graphics Processing Units (GPUs). Neurokernel provides a programming model that capitalizes upon the structural organization of the fly brain into a fixed number of functional modules to distinguish between these modules’ local information processing capabilities and the connectivity patterns that link them. By defining mandatory communication interfaces that specify how data is transmitted between models of each of these modules regardless of their internal design, Neurokernel explicitly enables multiple researchers to collaboratively model the fruit fly’s entire brain by integration of their independently developed models of its constituent processing units. We demonstrate the power of Neurokernel’s model integration by combining independently developed models of the retina and lamina neuropils in the fly’s visual system and by demonstrating their neuroinformation processing capability. We also illustrate Neurokernel’s ability to take advantage of direct GPU-to-GPU data transfers with benchmarks that demonstrate scaling of Neurokernel’s communication performance both over the number of interface ports exposed by an emulation’s constituent modules and the total number of modules comprised by an emulation.</p>
</abstract>
<funding-group>
<funding-statement>This work was supported by Air Force Office of Scientific Research (AFOSR) (<ext-link ext-link-type="uri" xlink:href="http://www.wpafb.af.mil/afrl/afosr/" xlink:type="simple">http://www.wpafb.af.mil/afrl/afosr/</ext-link>), AFOSR grant #FA9550-12-10232 (author: AAL); National Science Foundation (NSF) (<ext-link ext-link-type="uri" xlink:href="http://www.nsf.gov" xlink:type="simple">http://www.nsf.gov</ext-link>), NSF grant #1544383 (author: AAL); and Professional Scholarship of the Engineering Graduate Student Council at Columbia University (<ext-link ext-link-type="uri" xlink:href="http://engineering.columbia.edu" xlink:type="simple">http://engineering.columbia.edu</ext-link>) (author: LEG). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="10"/>
<table-count count="4"/>
<page-count count="25"/>
</counts>
<custom-meta-group>
<custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>All code and documentation are available on the Neurokernel project website at: neurokernel.github.io.</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>Reverse engineering the information processing functions of the brain is an engineering grand challenge of immense interest that has the potential to drive important advances in computer architecture, artificial intelligence, and medicine. The human brain is an obvious and tantalizing target of this effort; however, its structural and architectural complexity place severe limitations upon the extent to which models built and executed with currently available computational technology can relate its biological structure to its information processing capabilities. Successful development of human brain models must therefore be preceded by an increased understanding of the structural/ architectural complexity of the more tractable brains of simpler organisms and how they implement specific information processing functions and govern behavior [<xref ref-type="bibr" rid="pone.0146581.ref001">1</xref>].</p>
<p>The nervous system of the fruit fly <italic>Drosophila melanogaster</italic> possesses a range of features that recommend it as a model organism of choice for relating brain structure to function. Despite the obvious differences in size and complexity between the mammalian and fruit fly brains, researchers dating back to Cajal have observed common design principles in the structure of their sensory subsystems [<xref ref-type="bibr" rid="pone.0146581.ref002">2</xref>]. Many of the genes and proteins expressed in the mammalian brain are also conserved in the genome of <italic>Drosophila</italic> [<xref ref-type="bibr" rid="pone.0146581.ref003">3</xref>]. These features strongly suggest that valuable insight into the workings of the mammalian brain can be obtained by focusing on that of <italic>Drosophila</italic>.</p>
<p>Remarkably, the fruit fly is capable of a host of complex nonreactive behaviors that are governed by a brain containing only ∼10<sup>5</sup> neurons and ∼10<sup>7</sup> synapses organized into fewer than 50 distinct functional units, many of which are known to be directly involved in functions such as sensory processing, locomotion, and control [<xref ref-type="bibr" rid="pone.0146581.ref004">4</xref>]. The relationship between the fruit fly’s brain and its behaviors can be experimentally probed using a powerful toolkit of genetic techniques for manipulation of the fruit fly’s neural circuitry such as the GAL4 driver system [<xref ref-type="bibr" rid="pone.0146581.ref005">5</xref>–<xref ref-type="bibr" rid="pone.0146581.ref009">9</xref>], recent advances in experimental methods for precise recordings of the fruit fly’s neuronal responses to stimuli [<xref ref-type="bibr" rid="pone.0146581.ref010">10</xref>–<xref ref-type="bibr" rid="pone.0146581.ref012">12</xref>], techniques for analyzing the fly’s behavioral responses to stimuli [<xref ref-type="bibr" rid="pone.0146581.ref013">13</xref>–<xref ref-type="bibr" rid="pone.0146581.ref015">15</xref>], and progress in reconstruction of the fly connectome, or neural connectivity map [<xref ref-type="bibr" rid="pone.0146581.ref016">16</xref>, <xref ref-type="bibr" rid="pone.0146581.ref017">17</xref>]. These techniques have provided access to an immense amount of valuable structural and behavioral data that can be used to model how the fruit fly brain’s neural circuitry implements processing of sensory stimuli [<xref ref-type="bibr" rid="pone.0146581.ref004">4</xref>, <xref ref-type="bibr" rid="pone.0146581.ref018">18</xref>–<xref ref-type="bibr" rid="pone.0146581.ref022">22</xref>].</p>
<p>Despite considerable progress in mapping the fruit fly’s connectome and elucidating the patterns of information flow in its brain, the complexity of the fly brain’s structure and the still-incomplete state of knowledge regarding its neural circuitry pose challenges that go beyond satisfying the current computational resource requirements of fly brain models. These include (1) the need to explicitly target the information processing capabilities of functional units in the fruit fly brain, (2) the need for fly brain model implementations to efficiently scale over additional hardware resources as they advance in complexity, and (3) the need for brain modeling to be approached as an explicitly open and collaborative process of iterative refinement by multiple parties similar to that successfully employed in the design of the Internet [<xref ref-type="bibr" rid="pone.0146581.ref023">23</xref>] and large open source projects such as the Python programming language [<xref ref-type="bibr" rid="pone.0146581.ref024">24</xref>].</p>
<p>To address these challenges, we have developed an open source platform called Neurokernel for implementing connectome-based fruit fly brain models and executing them upon multiple Graphics Processing Units (GPUs). In order to achieve scaling over multiple computational resources while providing the programmability required to model the constituent functional modules in the fly brain, the Neurokernel architecture provides features similar to that of an operating system kernel. In contrast to general-purpose neural simulators, the design of Neurokernel and brain models built upon it is driven by publicly available proposals called Requests for Comments (RFCs).</p>
<p>Neurokernel’s design is predicated upon the organization of the fruit fly brain into a fixed number of functional modules characterized by local neural circuitry. Neurokernel explicitly enforces a programming model for implementing models of these functional modules called Local Processing Units (LPUs) that separates between their internal design and the connectivity patterns that link their external communication interfaces independently of the internal design of models designed by other researchers and of the connectivity patterns that link them. This modular architecture facilitates collaboration between researchers focusing on different functional modules in the fly brain by enabling models independently developed by different researchers to be integrated into a single whole brain model irrespective of their internal designs.</p>
<p>This paper is organized as follows. We first review the anatomy of the fruit fly brain that motivate Neurokernel’s design and then describe its architecture and support for GPU resources and programmability in the following section. The subsequent two sections respectively present Neurokernel’s programming model and detail its API. To illustrate the use of Neurokernel’s API, we then describe its use to integrate independently developed models of the retina and lamina neuropils in the fly’s visual system. We also assess Neurokernel’s ability to exploit technology for accelerated data transmission between multiple GPUs in benchmarks of its module communication services. Finally, we compare Neurokernel to other computational projects directed at reverse engineering the function of neural circuits and discuss the project’s long-term goals.</p>
</sec>
<sec id="sec002">
<title>Framework Design and Features</title>
<sec id="sec003">
<title>Modeling the Fruit Fly Brain</title>
<p>Analysis of the <italic>Drosophila</italic> connectome has revealed that its brain can be decomposed into fewer than 50 distinct neural circuits, most of which correspond to anatomically distinct regions in the fly brain [<xref ref-type="bibr" rid="pone.0146581.ref004">4</xref>]. These regions, or neuropils, include sensory circuits such as the olfactory system’s antennal lobe and the visual system’s lamina and medulla, as well as control and integration neuropils such as the protocerebral bridge and ellipsoid body (<xref ref-type="fig" rid="pone.0146581.g001">Fig 1</xref>). Neuropils range in size from about 6,000 neurons (lamina) to 40,000 neurons (medulla). Most of these modules are referred to as local processing units (LPUs) because they are characterized by unique populations of local neurons whose processes are restricted to specific neuropils.</p>
<fig id="pone.0146581.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Modular structure of fruit fly brain.</title>
<p>Individual neuropils are identified by different colors in the left-hand figure, with the names of several major neuropils listed. Most neuropils are paired across the fly’s two hemispheres. The right-hand figure depicts a tract of neuronal axons connecting neuropils across hemispheres highlighted in yellow (image created using data and software from [<xref ref-type="bibr" rid="pone.0146581.ref026">26</xref>–<xref ref-type="bibr" rid="pone.0146581.ref028">28</xref>], reproduced with permission).</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g001" xlink:type="simple"/>
</fig>
<p>The axons of an LPU’s local neurons and the synaptic connections between them and other neurons in the LPU constitute an internal pattern of connectivity that is distinct from the bundles, or tracts, of projection neuron processes that transmit data to neurons in other LPUs (<xref ref-type="fig" rid="pone.0146581.g001">Fig 1</xref>); this suggests that an LPU’s local neuron population and synaptic connections largely determine its functional properties. While the connection densities within and between LPUs is not fully known, the total strength of connections between LPUs (defined in terms of total numbers of dendritic and axonal terminals for all projection neurons linking a LPU with other LPUs) has been observed to vary between 600 and 44,000 for a sample of 13,000 projection neurons in the adult <italic>Drosophila</italic> brain [<xref ref-type="bibr" rid="pone.0146581.ref025">25</xref>]. The fruit fly brain also comprises modules referred to as hubs that contain no local neurons; they appear to serve as communication relays between different LPUs.</p>
<p>In contrast to a purely anatomical subdivision, the decomposition of the brain into functional modules casts the problem of reverse engineering the brain as one of discovering the information processing performed by each individual LPU and determining how specific patterns of axonal connectivity between these LPUs integrates them into functional subsystems. Modeling both these functional modules and the connectivity patterns that link them independent of the internal design of each module is a fundamental requirement of Neurokernel’s architecture.</p>
</sec>
<sec id="sec004">
<title>Architecture of the Neurokernel</title>
<p>We refer to our software framework for fruit fly brain emulation as a <italic>kernel</italic> because it aims to provide two classes of functions associated with traditional computer operating systems [<xref ref-type="bibr" rid="pone.0146581.ref029">29</xref>]: it must serve as a <italic>resource allocator</italic> that enables the scalable use of parallel computing resources to accelerate the execution of an emulation, and it must serve as an <italic>extended machine</italic> that provides software services and interfaces that can be programmed to emulate and integrate functional modules in the fly brain.</p>
<p>Neurokernel’s architectural design consists of three planes that separate between the time scales of a model’s representation and its execution on multiple parallel processors (<xref ref-type="fig" rid="pone.0146581.g002">Fig 2</xref>). Each plane exposes a vertical API that provides abstractions/services of that plane to higher level planes; this enables development of new features within one plane while minimizing the need to modify code associated with other planes. Services that implement the computational primitives and numerical methods required to execute supported models on parallel processors are provided by the framework’s <italic>compute plane</italic>. Translation or mapping of a models’ specified components to the methods provided by the compute plane and management of the parallel hardware and data communication resources required to efficiently execute a model is performed by Neurokernel’s <italic>control plane</italic>. Finally, the framework’s <italic>application plane</italic> provides support for specification of neural circuit models, connectivity patterns, and interfaces that enable independently developed models of the fly brain’s functional subsystems to be interconnected; we describe these interfaces in greater detail in the Application Programming Interface section.</p>
<fig id="pone.0146581.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g002</object-id>
<label>Fig 2</label>
<caption>
<title>The three-plane structure of the Neurokernel architecture is based on the principle of separation of time scales.</title>
<p>The application plane provides support for hardware-independent specification of LPUs and their interconnects. Services that implement the neural primitives and computing methods required to execute neural circuit model instantiations on GPUs are provided by the compute plane. Translation or mapping of specified model components to the methods provided by the compute plane and management of multiple GPUs and communication resources is performed by the control plane operating on a cluster of CPUs.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g002" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec005">
<title>Neurokernel Programming Model</title>
<sec id="sec006">
<title>Interface Configuration</title>
<p>A key aspect of Neurokernel’s design is the separation it imposes between the internal processing performed by an LPU model and how that model communicates with other models (<xref ref-type="fig" rid="pone.0146581.g003">Fig 3</xref>). Neurokernel’s programming model requires that one specifies how an LPU’s interface is configured and connected to those of other LPUs. The interface of an LPU must be described exclusively in terms of communication ports that either transmit data to or receive data from ports exposed by other LPUs after each execution step. Each port must be configured either to receive input or emit output, and must be configured to either accept spike data represented as boolean values or graded potential data represented as floating point values (<xref ref-type="fig" rid="pone.0146581.g004">Fig 4</xref>). Both of these settings are mutually exclusive; a single port may not both receive input and emit output, nor may it accept both spike and graded potential data. Ports may be connected to arbitrary internal components of an LPU; a graded potential port, for example, need not be associated with a neuron model’s membrane voltage. Ports are uniquely specified relative to other ports within an interface using a path-like identifier syntax to facilitate hierarchical organization of large numbers of ports (<xref ref-type="table" rid="pone.0146581.t001">Table 1</xref>).</p>
<fig id="pone.0146581.g003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g003</object-id>
<label>Fig 3</label>
<caption>
<title>Neurokernel programming model.</title>
<p>An LPU model’s internal components (cyan) are exposed via input and output ports (yellow and orange). Connections between LPUs are described by patterns (green) that link the ports of one LPU to those of another. Connections may only be defined between ports of the same transmission type.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g003" xlink:type="simple"/>
</fig>
<fig id="pone.0146581.g004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g004</object-id>
<label>Fig 4</label>
<caption>
<title>LPU interface.</title>
<p>Each communication port must either receive input (yellow) or emit output (orange), and must either transmit spikes (diamonds) or graded potentials (circles).</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g004" xlink:type="simple"/>
</fig>
<table-wrap id="pone.0146581.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.t001</object-id>
<label>Table 1</label>
<caption>
<title>Path-like port identifier and selector syntax examples.</title>
<p>In these examples, the identifier level strings <monospace>med</monospace> and <monospace>L1</monospace> are chosen to respectively denote an LPU and a neuron within that LPU. An interface designer may select whichever level strings are deemed suitable to label ports in an interface, however.</p>
</caption>
<alternatives>
<graphic id="pone.0146581.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.t001" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center">Identifier/Selector</th>
<th align="left">Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><monospace>/med/L1[0]</monospace></td>
<td align="left">selects a single port</td>
</tr>
<tr>
<td align="left"><monospace>/med/L1/0</monospace></td>
<td align="left">equivalent to <monospace>/med/L1[0]</monospace></td>
</tr>
<tr>
<td align="left"><monospace>/med+/L1[0]</monospace></td>
<td align="left">equivalent to <monospace>/med/L1[0]</monospace></td>
</tr>
<tr>
<td align="left"><monospace>/med/[L1,L2][0]</monospace></td>
<td align="left">selects two ports</td>
</tr>
<tr>
<td align="left"><monospace>/med/L1[0, 1]</monospace></td>
<td align="left">another example of two ports</td>
</tr>
<tr>
<td align="left"><monospace>/med/L1[0],/med/L1[1]</monospace></td>
<td align="left">equivalent to <monospace>/med/L1[0, 1]</monospace></td>
</tr>
<tr>
<td align="left"><monospace>/med/L1[0:10]</monospace></td>
<td align="left">selects ten ports</td>
</tr>
<tr>
<td align="left"><monospace>/med/L1/*</monospace></td>
<td align="left">selects all ports starting with <monospace>/med/L1</monospace></td>
</tr>
<tr>
<td align="left"><monospace>(/med/L1,/med/L2)+[0]</monospace></td>
<td align="left">equivalent to <monospace>/med/[L1,L2][0]</monospace></td>
</tr>
<tr>
<td align="left"><monospace>/med/[L1,L2].+[0:2]</monospace></td>
<td align="left">equivalent to <monospace>/med/L1[0],/med/L2[1]</monospace></td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
</sec>
<sec id="sec007">
<title>Pattern Configuration</title>
<p>A single LPU may potentially be connected to many other LPUs; these connections must be expressed as patterns between pairs of LPUs (<xref ref-type="fig" rid="pone.0146581.g003">Fig 3</xref>). Each pattern must be expressed in terms of (1) two interfaces—each comprising a set of ports—between which connections may be defined, (2) the actual connections between individual ports in the two interfaces (<xref ref-type="table" rid="pone.0146581.t002">Table 2</xref>), and (3) the attributes of each port in the pattern’s interfaces (<xref ref-type="table" rid="pone.0146581.t003">Table 3</xref>).</p>
<table-wrap id="pone.0146581.t002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.t002</object-id>
<label>Table 2</label>
<caption>
<title>Example of connections between ports in two LPUs respectively denoted <monospace>lam</monospace> and <monospace>med</monospace>.</title>
<p>An instance of the <monospace>Pattern</monospace> class comprises these connections and the port attributes in <xref ref-type="table" rid="pone.0146581.t003">Table 3</xref>.</p>
</caption>
<alternatives>
<graphic id="pone.0146581.t002g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.t002" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center">Source Port</th>
<th align="center">Destination Port</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><monospace>/lam[0]</monospace></td>
<td align="center"><monospace>/med[0]</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/lam[0]</monospace></td>
<td align="center"><monospace>/med[1]</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/lam[1]</monospace></td>
<td align="center"><monospace>/med[2]</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/med[3]</monospace></td>
<td align="center"><monospace>/lam[3]</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/med[4]</monospace></td>
<td align="center"><monospace>/lam[4]</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/med[4]</monospace></td>
<td align="center"><monospace>/lam[5]</monospace></td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<table-wrap id="pone.0146581.t003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.t003</object-id>
<label>Table 3</label>
<caption>
<title>Attributes of the ports in the connectivity pattern described in <xref ref-type="table" rid="pone.0146581.t002">Table 2</xref>.</title>
</caption>
<alternatives>
<graphic id="pone.0146581.t003g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.t003" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center">Port</th>
<th align="center">Interface</th>
<th align="center">I/O</th>
<th align="center">Port Type</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><monospace>/lam[0]</monospace></td>
<td align="center"><monospace>0</monospace></td>
<td align="center"><monospace>in</monospace></td>
<td align="center"><monospace>graded potential</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/lam[1]</monospace></td>
<td align="center"><monospace>0</monospace></td>
<td align="center"><monospace>in</monospace></td>
<td align="center"><monospace>graded potential</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/lam[2]</monospace></td>
<td align="center"><monospace>0</monospace></td>
<td align="center"><monospace>out</monospace></td>
<td align="center"><monospace>graded potential</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/lam[3]</monospace></td>
<td align="center"><monospace>0</monospace></td>
<td align="center"><monospace>out</monospace></td>
<td align="center"><monospace>spiking</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/lam[4]</monospace></td>
<td align="center"><monospace>0</monospace></td>
<td align="center"><monospace>out</monospace></td>
<td align="center"><monospace>spiking</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/lam[5]</monospace></td>
<td align="center"><monospace>0</monospace></td>
<td align="center"><monospace>out</monospace></td>
<td align="center"><monospace>spiking</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/med[0]</monospace></td>
<td align="center"><monospace>1</monospace></td>
<td align="center"><monospace>out</monospace></td>
<td align="center"><monospace>graded potential</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/med[1]</monospace></td>
<td align="center"><monospace>1</monospace></td>
<td align="center"><monospace>out</monospace></td>
<td align="center"><monospace>graded potential</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/med[2]</monospace></td>
<td align="center"><monospace>1</monospace></td>
<td align="center"><monospace>out</monospace></td>
<td align="center"><monospace>graded potential</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/med[3]</monospace></td>
<td align="center"><monospace>1</monospace></td>
<td align="center"><monospace>in</monospace></td>
<td align="center"><monospace>spiking</monospace></td>
</tr>
<tr>
<td align="center"><monospace>/med[4]</monospace></td>
<td align="center"><monospace>1</monospace></td>
<td align="center"><monospace>in</monospace></td>
<td align="center"><monospace>spiking</monospace></td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>Port attributes are used by Neurokernel to determine compatibility between LPU and pattern objects. To provide LPU designers with the freedom to determine how to multiplex input data from multiple sources within an LPU, Neurokernel does not permit multiple input ports in a pattern to be connected to a single output port. Input ports in a pattern may be connected to multiple output ports. It should be noted that the connections defined by an inter-LPU connectivity pattern do not represent synaptic models; any synapses comprised by a brain model must be a part of the design of a constituent LPU and connected to the LPU’s ports in order to either receive or transmit data from or to modeling components in other LPUs.</p>
</sec>
</sec>
<sec id="sec008">
<title>Application Programming Interface</title>
<p>In contrast to other currently available GPU-based neural emulation packages [<xref ref-type="bibr" rid="pone.0146581.ref030">30</xref>–<xref ref-type="bibr" rid="pone.0146581.ref033">33</xref>], Neurokernel is implemented entirely in Python, a high-level language with a rich ecosystem of scientific packages that has enjoyed increasing popularity in neuroscience research. Although GPUs can be directly programmed using frameworks such as NVIDIA CUDA and OpenCL, the difficulty of writing and optimizing code using these frameworks exclusively has led to the development of packages that enable run-time code generation (RTCG) using higher level languages [<xref ref-type="bibr" rid="pone.0146581.ref034">34</xref>]. Neurokernel uses the PyCUDA package to provide RTCG support for NVIDIA’s GPU hardware without forgoing the development advantages afforded by Python [<xref ref-type="bibr" rid="pone.0146581.ref035">35</xref>].</p>
<p>To make use of Neurokernel’s LPU API, all LPU models must subclass a base Python class called <monospace>Module</monospace> that provides LPU designers with the freedom to organize the internal structure of their model implementations as they see fit independent of the LPU interface configuration. Implementation of a Neurokernel-compatible LPU requires that (1) the LPU be uniquely identified relative to all other LPUs to which it may be connected in a subsystem or whole-brain emulation, (2) the execution of all operations comprised by a single step of the LPU’s emulation be performed by invocation of a single method called <monospace>run_step()</monospace>, and that (3) the LPU’s interface be configured as described in the Interface Configuration subsection.</p>
<p>An instantiated LPU’s graded potential and spiking ports are respectively associated with GPU data arrays that Neurokernel accesses to transmit data between LPUs during emulation execution; LPU designers are responsible for reading the data elements associated with input ports and populating the elements associated with output ports in the <monospace>run_step()</monospace> method. Modeling components that do not communicate with other LPUs and the internal connectivity patterns defined between them are not made accessible through the LPU’s interface (<xref ref-type="fig" rid="pone.0146581.g003">Fig 3</xref>).</p>
<p>Inter-LPU connectivity patterns correspond to the connections described by the tracts depicted in <xref ref-type="fig" rid="pone.0146581.g001">Fig 1</xref>. These are represented by a tensor-like class called <monospace>Pattern</monospace> that contains the port and connection data described in the Pattern Configuration subsection. To conserve memory, only existing connections are stored in a <monospace>Pattern</monospace> instance. In addition to manually constructing inter-LPU connectivity patterns using the configuration methods provided by the <monospace>Pattern</monospace> class, Neurokernel also supports loading connectivity patterns from CSV, GEXF, or XML files using a schema similar to NeuroML [<xref ref-type="bibr" rid="pone.0146581.ref036">36</xref>] with components that enable the specification of LPUs, connectivity patterns, and the ports they expose. Inter-LPU connections currently remain static throughout an emulation; future versions of Neurokernel will support dynamic instantiation and removal of connections while a model is being executed.</p>
<p>The designer of an LPU is responsible for associating ports with internal components that either consume input data or emit output data. Neurokernel provides a class called <monospace>GPUPortMapper</monospace> that maps port identifiers to GPU data arrays; by default, each <monospace>Module</monospace> instance contains two <monospace>GPUPortMapper</monospace> instances that respectively associate the LPU’s ports with arrays containing graded potential and spike values. After each invocation of the LPU’s <monospace>run_step()</monospace> method, data within these arrays associated with the LPU’s output ports is automatically transmitted to the port data arrays of destination LPUs, while input data from source LPUs is automatically inserted into those elements associated with the LPU’s input ports (<xref ref-type="table" rid="pone.0146581.t004">Table 4</xref>).</p>
<table-wrap id="pone.0146581.t004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.t004</object-id>
<label>Table 4</label>
<caption>
<title>Example of input and output data mapped to and from data arrays by the <monospace>GPUPortMapper</monospace> class for the ports comprised by interface 0 in the pattern described in Tables <xref ref-type="table" rid="pone.0146581.t002">2</xref> and <xref ref-type="table" rid="pone.0146581.t003">3</xref>.</title>
</caption>
<alternatives>
<graphic id="pone.0146581.t004g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.t004" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center" colspan="3">Graded Potential Ports</th>
<th align="center" colspan="3">Spiking Ports</th>
</tr>
<tr>
<th align="center">Port</th>
<th align="center">Array Index</th>
<th align="center">Array Data</th>
<th align="center">Port</th>
<th align="center">Array Index</th>
<th align="center">Array Data</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><monospace>/lam[0]</monospace></td>
<td align="center">0</td>
<td align="char" char=".">0.71</td>
<td align="center"><monospace>/lam[3]</monospace></td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center"><monospace>/lam[1]</monospace></td>
<td align="center">1</td>
<td align="char" char=".">0.83</td>
<td align="center"><monospace>/lam[4]</monospace></td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><monospace>/lam[2]</monospace></td>
<td align="center">2</td>
<td align="char" char=".">0.52</td>
<td align="center"><monospace>/lam[5]</monospace></td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>In addition to the classes that represent LPUs and inter-LPU connectivity patterns, Neurokernel provides an emulation manager class called <monospace>Manager</monospace> that provides services for configuring LPU classes, connecting them with specified connectivity patterns, and determining how to route data between LPUs based upon those patterns. The manager class hides the process and communication management performed by OpenMPI so as to obviate the need for model designers to directly interact with the traditional MPI job launching interface. Once an emulation has been fully configured via the manager class, it may be executed for a specified interval of time or for a specified number of steps.</p>
<p>Apart from the API requirements discussed above, Neurokernel currently places no explicit restrictions upon an LPU model’s internal implementation, how it interacts with available GPUs, how LPUs record their output, or the topology of interconnections between different LPUs; compatible LPUs and inter-LPU patterns may be arbitrarily composed to construct subsystems (<xref ref-type="fig" rid="pone.0146581.g005">Fig 5</xref>). It should be noted that the current LPU interface is not intended to be final; we anticipate its gradual extension to support communication between models that more accurately account for the range of interactions that occur within the fruit fly’s brain.</p>
<fig id="pone.0146581.g005" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g005</object-id>
<label>Fig 5</label>
<caption>
<title>Neurokernel brain modeling architectural hierarchy.</title>
<p>Independently developed LPUs and connectivity patterns may be composed into subsystems (red, green) which may in turn be connected to other subsystems to construct a model of the whole brain (yellow).</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g005" xlink:type="simple"/>
</fig>
<p>Neurokernel’s compute plane currently provides GPU-based implementations for several common neuron and synapse models. Supported neuron models include the Leaky Integrate-and-Fire, Hodgkin-Huxley, and Morris-Lecar point neuron models, as well as a stochastic model of the photoreceptors in the fly retina. Alpha function and conductance-based synaptic models are also supported. These modeling components may be used to construct and execute LPUs without writing any Python code by specifying an LPU’s design declaratively as a graph stored in GEXF, an XML format for storing a property graph supported by various graph processing libraries. Neurokernel does not restrict LPU model developers to using the above models; additional modeling components may be added to the compute plane as plugins.</p>
<p>Communication between LPU instances in a running Neurokernel emulation is performed using MPI to enable brain emulations to take advantage of multiple GPUs hosted either on single computer or a computer cluster. Neurokernel uses OpenMPI [<xref ref-type="bibr" rid="pone.0146581.ref037">37</xref>] to provide accelerated access between GPUs that support NVIDIA’s GPUDirect Peer-to-Peer technology [<xref ref-type="bibr" rid="pone.0146581.ref038">38</xref>, <xref ref-type="bibr" rid="pone.0146581.ref039">39</xref>] when the source and destination memory locations of an MPI data transfer are both in GPU memory. Neurokernel-based models are executed in a bulk synchronous fashion; each LPU’s execution step is executed asynchronously relative to other LPUs’ execution steps, but data associated with the output ports of all connected LPUs must be propagated to their respective destinations before those LPUs can proceed to the next execution step. Since data is transmitted between connected LPUs at every execution step, the output ports of all LPUs are effectively sampled at the same rate. Individual LPUs may perform internal computations at a finer time resolution, provided that they update their output port data arrays at the end of each invocation of their <monospace>run_step()</monospace> methods.</p>
</sec>
<sec id="sec009">
<title>Using the Neurokernel API</title>
<p>This section illustrates how to use the Neurokernel classes described in the Application Programming Interface section to construct and execute an emulation consisting of multiple connected LPUs. The section assumes that Neurokernel and its relevant dependencies (including OpenMPI) have already been installed on a system containing multiple GPUs. First, we import several required Python modules; the <monospace>mpi_relaunch</monospace> module provided by Neurokernel sets up the MPI environment required to enable communication between LPUs.
<list list-type="simple">
<list-item><p><monospace>import neurokernel.mpi_relaunch</monospace></p></list-item>
<list-item><p><monospace>from mpi4py import MPI</monospace></p></list-item>
<list-item><p><monospace>import numpy as np</monospace></p></list-item>
<list-item><p><monospace>import pycuda.gpuarray as gpuarray</monospace></p></list-item>
<list-item><p><monospace>from neurokernel.mpi import setup_logger</monospace></p></list-item>
<list-item><p><monospace>from neurokernel.core_gpu import Module, Manager</monospace></p></list-item>
<list-item><p><monospace>from neurokernel.pattern import Pattern</monospace></p></list-item>
<list-item><p><monospace>from neurokernel.plsel import Selector, SelectorMethods</monospace></p></list-item>
</list></p>
<p>Next, we create a subclass of <monospace>Module</monospace> whose <monospace>run_step()</monospace> method accesses the class instance’s port data arrays; the example below generates random graded potential and spiking output port data.
<list list-type="simple">
<list-item><p><monospace>class MyModule (Module):</monospace></p>
<list list-type="simple">
<list-item><p><monospace>″ ″ ″</monospace></p></list-item>
<list-item><p><monospace><italic>Example of derived module class</italic>.</monospace></p></list-item>
<list-item><p><monospace>″ ″ ″</monospace></p></list-item>
<list-item><p><monospace>def run_step (self):</monospace></p>
<list list-type="simple">
<list-item><p><monospace><italic># Call the run_step() method of the parent class (Module)</italic>:</monospace></p></list-item>
<list-item><p><monospace>super (MyModule, self).run_step()</monospace></p></list-item>
<list-item><p><monospace><italic># Log input graded potential data</italic>:</monospace></p></list-item>
<list-item><p><monospace>self.log_info(‘input gpot port data: ‘+\ str(self.pm[‘gpot’][self.in_gpot_ports]))</monospace></p></list-item>
<list-item><p><monospace><italic># Log input spike data</italic>:</monospace></p></list-item>
<list-item><p><monospace>self.log_info (‘input spike port data: ‘+\ str (self.pm[‘spike’][self.in_spike_ports]))</monospace></p></list-item>
<list-item><p><monospace><italic># Output random graded potential data</italic>:</monospace></p></list-item>
<list-item><p><monospace>out_gpot_data = \ gpuarray.to_gpu(np.random.rand(len(self.out_gpot_ports)))</monospace></p></list-item>
<list-item><p><monospace>self.pm[‘gpot’][self.out_gpot_ports] = out_gpot_data</monospace></p></list-item>
<list-item><p><monospace>self.log_info (‘output gpot port data: ‘+str (out_gpot_data))</monospace></p></list-item>
<list-item><p><monospace><italic># Output spikes to randomly selected output ports</italic>:</monospace></p></list-item>
<list-item><p><monospace>out_spike_data = \ gpuarray.to_gpu(np.random.randint(0, 2, len (self.out_spike_ports)))</monospace></p></list-item>
<list-item><p><monospace>self.pm[‘spike’][self.out_spike_ports] = out_spike_data</monospace></p></list-item>
<list-item><p><monospace>self.log_info(‘output spike port data: ‘+str(out_spike_data))</monospace></p></list-item>
</list></list-item>
</list></list-item>
</list></p>
<p>The data arrays associated with an LPU’s ports may be accessed using their path-like identifiers via two instances of the <monospace>GPUPortMapper</monospace> class stored in the <monospace>self.pm</monospace> attribute. Updated data associated with output ports is propagated to the relevant destination LPUs by Neurokernel before the next iteration of the emulation’s execution.</p>
<p>To connect two LPUs, we specify the ports to be exposed by each LPU using path-like selectors. The example below describes the interfaces for two LPUs that each expose two graded potential input ports, two graded potential output ports, two spiking input ports, and two spiking output ports. <monospace>Selector</monospace> is a convenience class that provides methods and overloaded operators for combining and manipulating sets of validated port identifiers. For example, <monospace>Selector(‘/a/in/gpot[0:2]’)</monospace> corresponds to the set of two input graded potential port identifiers <monospace>/a/in/gpot[0]</monospace> and <monospace>/a/in/gpot[1]</monospace>. Additional methods for manipulating port identifiers are provided by the <monospace>SelectorMethods</monospace> class.
<list list-type="simple">
<list-item><p><monospace><italic># Define input graded potential, output graded potential</italic>,</monospace></p></list-item>
<list-item><p><monospace><italic># input spiking, and output spiking ports for LPUS ‘a’ and ‘b’</italic>:</monospace></p></list-item>
<list-item><p><monospace>m1_sel_in_gpot = Selector(‘/a/in/gpot[0:2]’)</monospace></p></list-item>
<list-item><p><monospace>m1_sel_out_gpot = Selector(‘/a/out/gpot[0:2]’)</monospace></p></list-item>
<list-item><p><monospace>m1_sel_in_spike = Selector(‘/a/in/spike[0:2]’)</monospace></p></list-item>
<list-item><p><monospace>m1_sel_out_spike = Selector(‘/a/out/spike[0:2]’)</monospace></p></list-item>
<list-item><p><monospace>m2_sel_in_gpot = Selector(‘/b/in/gpot[0:2]’)</monospace></p></list-item>
<list-item><p><monospace>m2_sel_out_gpot = Selector(‘/b/out/gpot[0:2]’)</monospace></p></list-item>
<list-item><p><monospace>m2_sel_in_spike = Selector(‘/b/in/spike[0:2]’)</monospace></p></list-item>
<list-item><p><monospace>m2_sel_out_spike = Selector(‘/b/out/spike[0:2]’)</monospace></p></list-item>
<list-item><p><monospace><italic># Combine selectors to obtain sets of all input, output</italic>,</monospace></p></list-item>
<list-item><p><monospace><italic># graded potential, and spiking ports for the two LPUs</italic>:</monospace></p></list-item>
<list-item><p><monospace>m1_sel = m1_sel_in_gpot+m1_sel_out_gpot+\ m1_sel_in_spike+m1_sel_out_spike</monospace></p></list-item>
<list-item><p><monospace>m1_sel_in = m1_sel_in_gpot+m1_sel_in_spike</monospace></p></list-item>
<list-item><p><monospace>m1_sel_out = m1_sel_out_gpot+m1_sel_out_spike</monospace></p></list-item>
<list-item><p><monospace>m1_sel_gpot = m1_sel_in_gpot+m1_sel_out_gpot</monospace></p></list-item>
<list-item><p><monospace>m1_sel_spike = m1_sel_in_spike+m1_sel_out_spike</monospace></p></list-item>
<list-item><p><monospace>m2_sel = m2_sel_in_gpot+m2_sel_out_gpot +\ m2_sel_in_spike+m2_sel_out_spike</monospace></p></list-item>
<list-item><p><monospace>m2_sel_in = m2_sel_in_gpot+m2_sel_in_spike</monospace></p></list-item>
<list-item><p><monospace>m2_sel_out = m2_sel_out_gpot+m2_sel_out_spike</monospace></p></list-item>
<list-item><p><monospace>m2_sel_gpot = m2_sel_in_gpot+m2_sel_out_gpot</monospace></p></list-item>
<list-item><p><monospace>m2_sel_spike = m2_sel_in_spike+m2_sel_out_spike</monospace></p></list-item>
<list-item><p><monospace><italic># Count the number of graded potential and</italic></monospace></p></list-item>
<list-item><p><monospace><italic># spiking ports exposed by each LPU</italic>:</monospace></p></list-item>
<list-item><p><monospace>N1_gpot = SelectorMethods.count_ports(m1_sel_gpot)</monospace></p></list-item>
<list-item><p><monospace>N1_spike = SelectorMethods.count_ports(m1_sel_spike)</monospace></p></list-item>
<list-item><p><monospace>N2_gpot = SelectorMethods.count_ports(m2_sel_gpot)</monospace></p></list-item>
<list-item><p><monospace>N2_spike = SelectorMethods.count_ports(m2_sel_spike)</monospace></p></list-item>
</list></p>
<p>Using the above LPU interface data, we construct an inter-LPU connectivity pattern by instantiating the <monospace>Pattern</monospace> class, setting its port input/output and transmission types, and populating it with connections:
<list list-type="simple">
<list-item><p><monospace><italic># Initialize connectivity pattern that can link</italic></monospace></p></list-item>
<list-item><p><monospace><italic># ports in m1_sel with ports in m2_sel</italic>:</monospace></p></list-item>
<list-item><p><monospace>pat12 = Pattern(m1_sel, m2_sel)</monospace></p></list-item>
<list-item><p><monospace><italic># Set the input/output and transmission type attributes of each port in the pattern’s two interfaces</italic>:</monospace></p></list-item>
<list-item><p><monospace>pat12.interface[m1_sel_out_gpot] = [0, ‘in’, ‘gpot’]</monospace></p></list-item>
<list-item><p><monospace>pat12.interface[m1_sel_in_gpot] = [0, ‘out’, ‘gpot’]</monospace></p></list-item>
<list-item><p><monospace>pat12.interface[m1_sel_out_spike] = [0, ‘in’, ‘spike’]</monospace></p></list-item>
<list-item><p><monospace>pat12.interface[m1_sel_in_spike] = [0, ‘out’, ‘spike’]</monospace></p></list-item>
<list-item><p><monospace>pat12.interface[m2_sel_in_gpot] = [1, ‘out’, ‘gpot’]</monospace></p></list-item>
<list-item><p><monospace>pat12.interface[m2_sel_out_gpot] = [1, ‘in’, ‘gpot’]</monospace></p></list-item>
<list-item><p><monospace>pat12.interface[m2_sel_in_spike] = [1, ‘out’, ‘spike’]</monospace></p></list-item>
<list-item><p><monospace>pat12.interface[m2_sel_out_spike] = [1, ‘in’, ‘spike’]</monospace></p></list-item>
<list-item><p><monospace><italic># Create the connections between ports</italic>:</monospace></p></list-item>
<list-item><p><monospace>pat12[‘/a/out/gpot[0]’, ‘/b/in/gpot[0]’] = 1</monospace></p></list-item>
<list-item><p><monospace>pat12[‘/a/out/gpot[1]’, ‘/b/in/gpot[1]’] = 1</monospace></p></list-item>
<list-item><p><monospace>pat12[‘/b/out/gpot[0]’, ‘/a/in/gpot[0]’] = 1</monospace></p></list-item>
<list-item><p><monospace>pat12[‘/b/out/gpot[1]’, ‘/a/in/gpot[1]’] = 1</monospace></p></list-item>
<list-item><p><monospace>pat12[‘/a/out/spike[0]’, ‘/b/in/spike[0]’] = 1</monospace></p></list-item>
<list-item><p><monospace>pat12[‘/a/out/spike[1]’, ‘/b/in/spike[1]’] = 1</monospace></p></list-item>
<list-item><p><monospace>pat12[‘/b/out/spike[0]’, ‘/a/in/spike[0]’] = 1</monospace></p></list-item>
<list-item><p><monospace>pat12[‘/b/out/spike[1]’, ‘/a/in/spike[1]’] = 1</monospace></p></list-item>
</list></p>
<p>We can then pass the defined LPU class and the parameters to be used during instantiation to a <monospace>Manager</monospace> class instance that connects them together with the above pattern. The <monospace>setup_logger</monospace> function may be used to enable output of log messages generated during execution:
<list list-type="simple">
<list-item><p><monospace>logger = setup_logger(screen = True, file_name=‘neurokernel.log’, mpi_comm = MPI.COMM_WORLD, multiline = True)</monospace></p></list-item>
<list-item><p><monospace>man = Manager()</monospace></p></list-item>
<list-item><p><monospace>m1_id = ‘m1’</monospace></p></list-item>
<list-item><p><monospace>man.add(MyModule, m1_id, m1_sel, m1_sel in, m1_sel_out, m1_sel_gpot, m1_sel_spike, np.zeros(N1_gpot, dtype = np.double), np.zeros(N1_spike, dtype = int), device = 0)</monospace></p></list-item>
<list-item><p><monospace>m2_id = ‘m2’</monospace></p></list-item>
<list-item><p><monospace>man.add(MyModule, m2_id, m2_sel, m2_sel_in, m2_sel_out, m2_sel_gpot, m2_sel_spike, np.zeros(N2_gpot, dtype = np.double), np.zeros(N2_spike, dtype = int), device = 1)</monospace></p></list-item>
<list-item><p><monospace>man.connect(m1_id, m2_id, pat12, 0, 1)</monospace></p></list-item>
</list></p>
<p>After all LPUs and connectivity patterns are provided to the manager, the emulation may be executed for a specified number of steps as follows. Neurokernel uses the dynamic process creation feature of MPI-2 supported by OpenMPI to automatically spawn as many MPI processes are needed to run the emulation:
<list list-type="simple">
<list-item><p><monospace><italic># Compute number of execution steps given emulation duration</italic></monospace></p></list-item>
<list-item><p><monospace><italic># and time step (both in seconds)</italic>:</monospace></p></list-item>
<list-item><p><monospace>duration = 10.0</monospace></p></list-item>
<list-item><p><monospace>dt = 1e-2</monospace></p></list-item>
<list-item><p><monospace>steps = int(duration/dt)</monospace></p></list-item>
<list-item><p><monospace>man.spawn()</monospace></p></list-item>
<list-item><p><monospace>man.start(steps)</monospace></p></list-item>
<list-item><p><monospace>man.wait()</monospace></p></list-item>
</list></p>
</sec>
</sec>
<sec id="sec010" sec-type="results">
<title>Results</title>
<p>To evaluate Neurokernel’s ability to facilitate interfacing of functional brain modules that can be executed on GPUs, we employed Neurokernel’s programming model to interconnect independently developed LPUs in the fruit fly’s early visual system to provide insights into the representation and processing of the visual field by the cascaded LPUs. We also evaluated Neurokernel’s scaling of communication performance in simple configurations of the architecture parameterized by numbers of ports and LPUs.</p>
<p>The scope of the effort to reverse engineer the fly brain and the need to support the revision of brain models in light of new data requires a structured means of advancing and documenting the evolution of those models and the framework required to support them. To this end, the Neurokernel project employs Requests for Comments documents (RFCs) as a tool for advancing the designs of both Neurokernel’s architecture and the LPU models built to use it. IPython notebooks and RFCs [<xref ref-type="bibr" rid="pone.0146581.ref040">40</xref>, <xref ref-type="bibr" rid="pone.0146581.ref041">41</xref>] containing detailed descriptions of the models of the visual system LPUs described below and their execution performance on multiple GPUs are publicly available on the project website <ext-link ext-link-type="uri" xlink:href="http://neurokernel.github.io/docs.html" xlink:type="simple">http://neurokernel.github.io/docs.html</ext-link>.</p>
<sec id="sec011">
<title>Integration of Independently Developed LPU Models</title>
<p>The integrated early visual system model we considered consists of models of the fruit fly’s retina and lamina. The retina model comprises a hexagonal array of 721 ommatidia, each of which contains 6 photoreceptor neurons. The photoreceptor model employs a stochastic model of how light input (photons) produce a membrane potential output. Each photoreceptor consists of 30,000 microvilli modeled by 15 equations per microvillus, a photon absorption model, and a model of how the aggregate microvilli contributions produce the photoreceptor’s membrane potential [<xref ref-type="bibr" rid="pone.0146581.ref041">41</xref>]; the entire retina model employs a total of about 1.95 billion equations. The lamina model consists of 4,326 Morris-Lecar neurons configured to not emit action potentials and about 50,000 conductance-based inhibitory synapses expressing histamine [<xref ref-type="bibr" rid="pone.0146581.ref040">40</xref>]. The LPUs were linked by 4,326 feed-forward connections from the retina to the lamina; the connections from the retina to the lamina were configured to map output ports exposed by the retina to input ports in the lamina based upon the neural superposition rule [<xref ref-type="bibr" rid="pone.0146581.ref042">42</xref>]. The source code for the visual system model is available at <ext-link ext-link-type="uri" xlink:href="http://github.com/neurokernel/retina-lamina" xlink:type="simple">http://github.com/neurokernel/retina-lamina</ext-link></p>
<p>The combined retina and lamina models were executed on up to 4 Tesla K20Xm NVIDIA GPUs with an 8 second natural video scene provided as input to the retinal model’s photoreceptors. The computed membrane potentials of specific photoreceptors in each retinal ommatidium and of select neurons in each cartridge of the lamina were recorded (<xref ref-type="fig" rid="pone.0146581.g006">Fig 6</xref>); videos of the computed potentials are included in the supporting information (<xref ref-type="supplementary-material" rid="pone.0146581.s001">S1 Video</xref>). In this example, the observed R1 photoreceptor outputs demonstrate the preservation of visual information received from the retina by the lamina LPU. The L1 and L2 lamina neuron outputs demonstrate the signal inversion taking place in the two pathways shaping the motion detection circuitry of the fly. These initial results illustrate how Neurokernel’s API enables LPU model designers to treat their models as neurocomputing modules that may be combined into complex information processing pipelines whose input/output properties may be obtained and evaluated.</p>
<fig id="pone.0146581.g006" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g006</object-id>
<label>Fig 6</label>
<caption>
<title>Example of natural input to the combined retina/lamina model.</title>
<p>The hexagonal tiling depicts the array of ommatidia in the retina and the corresponding retinotopic cartridges in the lamina. Outputs of select photoreceptors in the retina (R1) that are fed to neurons in the lamina and outputs of specific neurons in the lamina (L1, L2) are also depicted.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g006" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec012">
<title>Module Communication Performance</title>
<p>We compared the performance of emulations in which port data stored in GPU memory is copied to and from host memory for traditional network-based transmission by OpenMPI to that of emulations in which port data stored in GPU memory is directly passed to OpenMPI’s communication functions. The latter functions enabled OpenMPI to use NVIDIA’s GPUDirect Peer-to-Peer technology to perform accelerated transmission of data between GPUs whose hardware supports the technology by bypassing the host system’s CPU and memory [<xref ref-type="bibr" rid="pone.0146581.ref039">39</xref>]. All tests discussed below were performed on a host containing 2 Intel Xeon 6-core E5-2620 CPUs, 32 Gb of RAM, and 4 NVIDIA Tesla K20Xm GPUs running Ubuntu Linux 14.04, NVIDIA CUDA 7.0, and OpenMPI 1.8.5 built with CUDA support.</p>
<sec id="sec013">
<title>Scaling over Number of LPU Output Ports</title>
<p>To evaluate how well inter-LPU communication scales over the number of ports exposed by an LPU on a multi-GPU machine, we constructed and ran emulations comprising multiple connected instances of an LPU class with an empty <monospace>run_step()</monospace> method (see the Application Programming Interface section) and measured (1) the average time taken per execution step to synchronize the data exposed by the output ports in each of two connected LPUs with their respective destination input ports; (2) the average throughput per execution step (in terms of number of port data elements transmitted per second) of the synchronization, where each port is stored either as a 32-bit integer or double-precision floating point number (both of which occupy 8 bytes).</p>
<p>We initially examined how the above performance metrics scaled over the number of output ports exposed by each LPU in a 2-LPU emulation and over the number of LPUs in an emulation where each LPU is connected to every other LPU and the total number of output ports exposed by each LPU is fixed. We compared the performance for scenarios where data in GPU memory is directly exposed to OpenMPI to that for scenarios where the data is copied to the host memory prior to transmission; the former scenarios enabled OpenMPI to accelerate data transmission between GPUs using NVIDIA’s GPUDirect Peer-to-Peer technology. The metrics for each set of parameters were averaged over 3 trials; the emulation was executed for 500 steps during each trial.</p>
<p>The scaling of performance over number of ports depicted in <xref ref-type="fig" rid="pone.0146581.g007">Fig 7</xref> clearly illustrate the ability of GPU-to-GPU communication between locally hosted GPUs to ensure that increasing the number of ports exposed by an LPU does not increase model execution time for numbers of ports similar to the numbers of neurons in actual LPUs. We also observed noticeable speedups in synchronization time for scenarios using more than 2 GPUs as the number of ports exposed by each LPU is increased (<xref ref-type="fig" rid="pone.0146581.g008">Fig 8</xref>). As the number of GPUs in use reached the maximum available in our test system, overall speedup diminished; this appears to be due to gradual saturation of the host’s PCI bus.</p>
<fig id="pone.0146581.g007" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g007</object-id>
<label>Fig 7</label>
<caption>
<title>Synchronization performance for an emulation comprising 2 interconnected LPUs accessing 2 different GPUs on the same host scaled over number of output ports exposed by each LPU.</title>
<p>The number of output ports was varied over 25 equally spaced values between 50 and 15,000. The plot on the left depicts average synchronization time per execution step, while the plot on the right depicts average synchronization throughput (in number of ports per unit time) per execution step.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g007" xlink:type="simple"/>
</fig>
<fig id="pone.0146581.g008" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g008</object-id>
<label>Fig 8</label>
<caption>
<title>Speedup of average synchronization time per execution step for an emulation scaled over number of LPUs, where each LPU is mapped to a single GPU.</title>
<p>The total number of output ports exposed by each LPU was varied between 250 and 10,000 at 250 port intervals.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g008" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec014">
<title>Scaling over Number of LPUs</title>
<p>Current research on the fruit fly brain is mainly focused on LPUs in the fly’s central complex and olfactory and vision systems. Since the interplay between these systems will be key to increasing understanding of multisensory integration and how sensory data might inform behavior mediated by the central complex, we examined how well Neurokernel’s communication mechanism performs in scenarios where LPUs from these three systems are successively added to a multi-LPU emulation. Starting with the pair of LPUs with the largest number of inter-LPU connections, we sorted the 19 LPUs in the above three systems in decreasing order of the number of connections contributed with the addition of each successive LPU and measured the average speedup in synchronization time per execution step due to direct GPU-to-GPU data. The number of connections for each LPU was based upon estimates from a mesoscopic reconstruction of the fruit fly connectome; these numbers appear in Document S2 of the supplement of [<xref ref-type="bibr" rid="pone.0146581.ref025">25</xref>]. The LPU class instances were designed to send and receive data only; no other computation was performed or benchmarked during execution. To amortize inter-LPU transmission costs, the LPUs were partitioned across the available GPUs using the METIS graph partitioning package [<xref ref-type="bibr" rid="pone.0146581.ref043">43</xref>] to minimize the total edge cut. The speedup afforded by direct GPU-to-GPU data (<xref ref-type="fig" rid="pone.0146581.g009">Fig 9</xref>) illustrates that current GPU technology can readily power multi-LPU models based upon currently available connectome data.</p>
<fig id="pone.0146581.g009" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g009</object-id>
<label>Fig 9</label>
<caption>
<title>Synchronization performance for an emulation comprising between 4 and 19 interconnected LPUs selected from the central complex, olfactory, and vision systems partitioned over 2 to 4 GPUs on the same host.</title>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g009" xlink:type="simple"/>
</fig>
</sec>
</sec>
</sec>
<sec id="sec015" sec-type="conclusions">
<title>Discussion</title>
<p>In light of their low costs and rapidly increasing power and availability, there is growing interest in leveraging the power of multiple GPUs to support neural simulations with increasingly high computational demands [<xref ref-type="bibr" rid="pone.0146581.ref044">44</xref>–<xref ref-type="bibr" rid="pone.0146581.ref046">46</xref>]. When combined with concomitant increases in fruit fly connectomic knowledge and improvements in electrophysiological techniques, the ongoing advance of GPU technology affords an unprecedented opportunity to emulate an entire brain or nervous system of a computationally tractable organism. The OpenWorm project [<xref ref-type="bibr" rid="pone.0146581.ref047">47</xref>], for instance, is capitalizing on the extremely small number of neurons in the nervous system of the nematode <italic>Caenorhabditis elegans</italic> and the full reconstruction of its connectome [<xref ref-type="bibr" rid="pone.0146581.ref048">48</xref>] to develop an emulation of the entire worm on a computer. A recently started effort is the development of a neuromechanical model called Sibernetic [<xref ref-type="bibr" rid="pone.0146581.ref049">49</xref>] that uses GPUs to power simulation of its body and environment. In a similar vein, Neurokernel stands to enable fly researchers to leverage improving GPU technology to take advantage of the increasing amounts of connectome data produced by ongoing advances in our understanding of the fly brain’s connectivity [<xref ref-type="bibr" rid="pone.0146581.ref004">4</xref>, <xref ref-type="bibr" rid="pone.0146581.ref016">16</xref>, <xref ref-type="bibr" rid="pone.0146581.ref017">17</xref>] for designing and testing fly brain models.</p>
<p>Currently available neural simulation software affords researchers with a range of ways of constructing neural circuit models. These include tools that enable models to be explicitly expressed as systems of differential equations [<xref ref-type="bibr" rid="pone.0146581.ref050">50</xref>], structured documents [<xref ref-type="bibr" rid="pone.0146581.ref036">36</xref>], or explicit calls to a high-level programming API [<xref ref-type="bibr" rid="pone.0146581.ref051">51</xref>–<xref ref-type="bibr" rid="pone.0146581.ref053">53</xref>]. They also include tools for defining and manipulating neural connectivity patterns [<xref ref-type="bibr" rid="pone.0146581.ref054">54</xref>–<xref ref-type="bibr" rid="pone.0146581.ref056">56</xref>]. A platform for developing emulations of the entire fruit fly brain, however, must provide programming services for expressing the functional architecture of the whole brain (or its subsystems) in terms of subunits with high-level information processing properties that clearly separate between the internal design of each subunit and how they communicate with each other. Neurokernel’s architecture specifically targets these gaps by providing both the high-level APIs needed to explicitly define and manipulate the architectural elements of brain models as well as the low-level computational substrate required to efficiently execute those models’ implementations on multiple GPUs (see <xref ref-type="fig" rid="pone.0146581.g002">Fig 2</xref>).</p>
<p>Existing technologies for interfacing neural models currently provide no native support for the use of GPUs and none of the aforementioned services required to scale over multiple GPU resources. Neurokernel aims to address the problem of model incompatibility in the context of fly brain modeling by ensuring that GPU-based LPU model implementations and inter-LPU connectivity patterns that comply with its APIs are interoperable regardless of their internal implementations.</p>
<p>Despite the impressive performance GPU-based spiking neural network software can currently achieve for simulations comprising increasingly large numbers of neurons and synapses, enabling increasingly detailed fruit fly brain models to efficiently scale over multiple GPUs will require resource allocation and management features that are not yet provided by currently available neural simulation packages. By explicitly providing services and APIs for management of GPU resources, Neurokernel will enable fly brain emulations to benefit from the near-term advantages of scaling over multiple GPUs while leaving the door open to anticipated improvements in GPU technology that can further accelerate the performance of fly brain models.</p>
<p>The challenges of reverse engineering neural systems have spurred a growing number of projects specifically designed to encourage collaborative neuroscience research endeavors. These include technologies for model sharing [<xref ref-type="bibr" rid="pone.0146581.ref036">36</xref>, <xref ref-type="bibr" rid="pone.0146581.ref057">57</xref>, <xref ref-type="bibr" rid="pone.0146581.ref058">58</xref>], curation of publicly available electrophysiological data [<xref ref-type="bibr" rid="pone.0146581.ref059">59</xref>], and the construction of comprehensive nervous system models for specific organisms [<xref ref-type="bibr" rid="pone.0146581.ref047">47</xref>]. For collaborative efforts at fruit fly brain modeling to succeed, however, there is a need to both ensure the interoperability of independently developed LPU models without modification of their internal implementations while enforcing a model of the overall brain connectivity architecture. Software packages that enable multiple independently developed neural simulators to execute complex models either by means of communication APIs that simulators must support [<xref ref-type="bibr" rid="pone.0146581.ref060">60</xref>] or through encapsulation of calls to one simulator by a second simulator [<xref ref-type="bibr" rid="pone.0146581.ref061">61</xref>] must be complemented with the flexibility to define and manipulate the emulated connectivity architecture. By imposing mandatory communication interfaces upon models, Neurokernel explicitly ensures that LPU models may be combined with other compatible models to construct subsystem or whole brain emulations.</p>
<p>Neuromorphic platforms whose design is directly inspired by the brain have the potential to execute large-scale neural circuit models at speeds that significantly exceed those achievable with traditional von Neumann computer architectures [<xref ref-type="bibr" rid="pone.0146581.ref062">62</xref>–<xref ref-type="bibr" rid="pone.0146581.ref065">65</xref>]. Increasing support for high-level software interfaces such as PyNN [<xref ref-type="bibr" rid="pone.0146581.ref052">52</xref>] by such platforms raises the possibility of executing highly detailed LPU models on neuromorphic hardware. As neuromorphic technology matures and becomes available to the wider neurocomputing community, we anticipate Neurokernel’s compute plane eventually supporting the use of such hardware alongside and eventually in the place of GPU technology to power whole brain emulations.</p>
<p>Although the Neurokernel project is specifically focused upon reverse engineering the fruit fly brain, the framework’s ability to capitalize upon the structural modularity of the brain and facilitate collaborative modeling stand to benefit efforts to reverse engineer the brains of other model organisms. To this end, we have already used Neurokernel to successfully scale up the retinal model described in the Integration of Independently Developed LPU Models section to emulate the retina of the house fly, which comprises almost 10 times as many differential equations (18.8 billion) as that of the fruit fly (1.95 billion). Further development of Neurokernel’s support for multiple GPUs and—eventually—neuromorphic hardware will hopefully open the doors to collaborative modeling of the brains of even more complex organisms such as the zebra fish and mouse.</p>
</sec>
<sec id="sec016">
<title>Future Development</title>
<p>Efforts at reverse engineering the brain must ultimately confront the need to validate hypotheses regarding neural information processing against actual biological systems. In order to achieve biological validation of the Neurokernel, the computational modeling of the fruit fly brain must be tightly integrated with increasingly precise electrophysiological techniques and the recorded data evaluated with novel system identification methods [<xref ref-type="bibr" rid="pone.0146581.ref010">10</xref>, <xref ref-type="bibr" rid="pone.0146581.ref012">12</xref>, <xref ref-type="bibr" rid="pone.0146581.ref066">66</xref>–<xref ref-type="bibr" rid="pone.0146581.ref070">70</xref>]. This will enable direct comparison of the output of models executed by Neurokernel to that of corresponding neurons in the brain regions of interest. Given that recently designed GPU-based systems for emulating neuronal networks of single spiking neuron types have demonstrated near real-time execution performance for networks of up to ∼10<sup>5</sup> spiking neurons and ∼10<sup>7</sup> synapses using single GPUs [<xref ref-type="bibr" rid="pone.0146581.ref030">30</xref>, <xref ref-type="bibr" rid="pone.0146581.ref033">33</xref>, <xref ref-type="bibr" rid="pone.0146581.ref071">71</xref>], and in light of advances in the power and accessibility of neuromorphic technology [<xref ref-type="bibr" rid="pone.0146581.ref052">52</xref>, <xref ref-type="bibr" rid="pone.0146581.ref062">62</xref>–<xref ref-type="bibr" rid="pone.0146581.ref065">65</xref>], we anticipate that future advances in parallel computing technology will enable Neurokernel’s model execution efficiency to advance significantly towards the time scale of the actual fly brain. These advances will enable researchers to validate models of circuits in the live fly’s brain within similar time scales and use the observed discrepancies to inform subsequent model improvements (<xref ref-type="fig" rid="pone.0146581.g010">Fig 10</xref>).</p>
<fig id="pone.0146581.g010" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0146581.g010</object-id>
<label>Fig 10</label>
<caption>
<title>In vivo validation is essential to the development of accurate fly brain models.</title>
<p>Neural responses to sensory stimuli are recorded from the live fly brain in real time and compared to the computed responses of the corresponding components in a fly brain model executed on the same time scale. Discrepancies between these responses and new connectome data may be used to improve the model’s accuracy (fruit fly photograph adapted from Berger and fly robot image adapted from Vizcano, Benton, Gerber, and Louis, both reproduced with permission).</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.g010" xlink:type="simple"/>
</fig>
<p>Although Neurokernel currently permits brain models to make use of multiple GPUs, it requires programmers to explicitly manage the GPU resources used by a model’s implementation. Having implemented the API for building and interconnecting LPUs described in the Application Programming Interface section within Neurokernel’s application plane, our next major goal is to implement a prototype GPU resource allocation mechanism within the control plane to automate selection and management of available GPUs used to execute a fly brain model. Direct access to GPUs will also be restricted to modeling components implemented by LPU developers and added to Neurokernel’s compute plane; models implemented or defined in the application plane will instantiate and invoke these components. These developments will permit experimentation with different resource allocation policies as LPU models become more complex. Restricting parallel hardware access to modeling components exposed by the compute plane will also facilitate development of future support for other parallel computing technologies such as non-NVIDIA GPUs or neuromorphic hardware.</p>
<p>Neurokernel is a fundamental component of the collaborative workflow needed to accelerate the process of fruit fly brain model development, execution, and refinement by multiple researchers. This workflow, however, also requires a means of efficiently constructing brain models and modifying their structure and parameters in light of output discrepancies observed during validation or to incorporate new experimental data. As noted in the Application Programming Interface section, Neurokernel currently can execute LPU models declaratively specified as GEXF files that each describe an individual LPU’s design as a graph of currently supported neuron and synapse model instances and separately specified inter-LPU connectivity patterns. Since this model representation must either be manually constructed or generated by ad hoc processing of connectome data, modification of LPUs is currently time consuming and significantly slows down the improvement of brain models. LPUs explicitly implemented in Python that do not use supported neuron or synapse models are even less easy to update because of the need to explicitly modify their implementations.</p>
<p>To address these limitations and enable rapid updating and reevaluation of fly brain models, we are building a system based upon graph databases called NeuroArch for the specification and sophisticated manipulation of structural data associated with LPU models and inter-LPU connectivity [<xref ref-type="bibr" rid="pone.0146581.ref072">72</xref>]. NeuroArch will (1) provide LPU developers with a means of defining model components and canonical circuit abstractions using biologically-oriented model-specific labels, (2) enable powerful queries against the data associated with multiple interconnected LPU models via an object-oriented interface similar to that provided by object-relational mapping (ORM) software to web application developers, (3) provide access to model data at different levels of structural abstraction higher than neurons and synapses, (4) enable access to and/or modification of stored data in multiple modes, i.e., as a subgraph (to facilitate graph-based queries) or a table (to facilitate tabular or relational queries), and (5) provide an interface to Neurokernel that enables immediate execution of models defined in NeuroArch.</p>
</sec>
<sec id="sec017" sec-type="conclusions">
<title>Conclusion</title>
<p>Despite the fruit fly brain’s relative numerical tractability, its successful emulation is an ambitious goal that will require the joint efforts of multiple researchers from different disciplines. Neurokernel’s open design, support for widely available commodity parallel computing technology, and ability to integrate independently developed models of the brain’s functional subsystems all facilitate this joining of forces. The framework’s first release is a step in this direction; we expect and anticipate that aspects of the current design such as connectivity structure and module interfaces will be superseded by newer designs informed by the growing body of knowledge regarding the structure and function of the fly brain. We invite the research community to join this effort on Neurokernel’s website (<ext-link ext-link-type="uri" xlink:href="https://neurokernel.github.io/" xlink:type="simple">https://neurokernel.github.io/</ext-link>), online code repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/neurokernel/neurokernel" xlink:type="simple">https://github.com/neurokernel/neurokernel</ext-link>), and development mailing list (<ext-link ext-link-type="uri" xlink:href="https://lists.columbia.edu/mailman/listinfo/neurokernel-dev" xlink:type="simple">https://lists.columbia.edu/mailman/listinfo/neurokernel-dev</ext-link>).</p>
</sec>
<sec id="sec018">
<title>Supporting Information</title>
<supplementary-material id="pone.0146581.s001" mimetype="application/zip" position="float" xlink:href="info:doi/10.1371/journal.pone.0146581.s001" xlink:type="simple">
<label>S1 Video</label>
<caption>
<title>Natural video signal input and photoreceptor/neuron outputs of integrated retina/lamina LPU models.</title>
<p>This video depicts a natural video signal input to the photoreceptors in the 721 ommatidia comprised by the retina model, average photoreceptor response per ommatidium, and outputs (membrane potentials) of select photoreceptors (R1) in retina and neurons (L1, L2) in the lamina.</p>
<p>(ZIP)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>The authors would like to thank Konstantinos Psychas, Nikul H. Ukani, and Yiyin Zhou for developing and integrating the visual system LPU models used to test the software. The authors would also like to thank Juergen Berger for kindly permitting reuse of his fruit fly photograph and thank Nacho Vizcaíno, Richard Benton, Bertram Gerber, and Matthieu Louis for permitting reuse of the robot fly image they composed for the ESF-EMBO 2010 Conference on Functional Neurobiology in Minibrains.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pone.0146581.ref001">
<label>1</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kandel</surname> <given-names>ER</given-names></name>, <name name-style="western"><surname>Markram</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Matthews</surname> <given-names>PM</given-names></name>, <name name-style="western"><surname>Yuste</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Koch</surname> <given-names>C</given-names></name>. <article-title>Neuroscience thinks big (and collaboratively)</article-title>. <source>Nature Reviews Neuroscience</source>. <year>2013</year> <month>Sep</month>;<volume>14</volume>(<issue>9</issue>):<fpage>659</fpage>–<lpage>664</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nrn3578" xlink:type="simple">10.1038/nrn3578</ext-link></comment> <object-id pub-id-type="pmid">23958663</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Sanes</surname> <given-names>JR</given-names></name>, <name name-style="western"><surname>Zipursky</surname> <given-names>SL</given-names></name>. <article-title>Design Principles of Insect and Vertebrate Visual Systems</article-title>. <source>Neuron</source>. <year>2010</year> <month>Apr</month>;<volume>66</volume>(<issue>1</issue>):<fpage>15</fpage>–<lpage>36</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://linkinghub.elsevier.com/retrieve/pii/S0896627310000449" xlink:type="simple">http://linkinghub.elsevier.com/retrieve/pii/S0896627310000449</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.neuron.2010.01.018" xlink:type="simple">10.1016/j.neuron.2010.01.018</ext-link></comment> <object-id pub-id-type="pmid">20399726</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref003">
<label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Armstrong</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>van Hemert</surname> <given-names>JI</given-names></name>. <article-title>Towards a virtual fly brain</article-title>. <source>Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences</source>. <year>2009</year> <month>Jun</month>;<volume>367</volume>(<issue>1896</issue>):<fpage>2387</fpage>–<lpage>2397</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://rsta.royalsocietypublishing.org/content/367/1896/2387.abstract" xlink:type="simple">http://rsta.royalsocietypublishing.org/content/367/1896/2387.abstract</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1098/rsta.2008.0308" xlink:type="simple">10.1098/rsta.2008.0308</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0146581.ref004">
<label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Chiang</surname> <given-names>AS</given-names></name>, <name name-style="western"><surname>Lin</surname> <given-names>CY</given-names></name>, <name name-style="western"><surname>Chuang</surname> <given-names>CC</given-names></name>, <name name-style="western"><surname>Chang</surname> <given-names>HM</given-names></name>, <name name-style="western"><surname>Hsieh</surname> <given-names>CH</given-names></name>, <name name-style="western"><surname>Yeh</surname> <given-names>CW</given-names></name>, <etal>et al</etal>. <article-title>Three-dimensional reconstruction of brain-wide wiring networks in Drosophila at single-cell resolution</article-title>. <source>Current Biology</source>. <year>2011</year> <month>Jan</month>;<volume>21</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>11</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.cell.com/current-biology/abstract/S0960-9822(10)01522-8?switch=standard" xlink:type="simple">http://www.cell.com/current-biology/abstract/S0960-9822(10)01522-8?switch=standard</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.cub.2010.11.056" xlink:type="simple">10.1016/j.cub.2010.11.056</ext-link></comment> <object-id pub-id-type="pmid">21129968</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref005">
<label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Duffy</surname> <given-names>JB</given-names></name>. <article-title>GAL4 system in Drosophila: a fly geneticist’s Swiss Army knife</article-title>. <source>Genesis (New York, NY: 2000)</source>. <year>2002</year> <month>Oct</month>;<volume>34</volume>(<issue>1–2</issue>):<fpage>1</fpage>–<lpage>15</lpage>. PMID: 12324939. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pubmed/12324939" xlink:type="simple">http://www.ncbi.nlm.nih.gov/pubmed/12324939</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1002/gene.10150" xlink:type="simple">10.1002/gene.10150</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0146581.ref006">
<label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Rister</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Pauls</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Schnell</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Ting</surname> <given-names>CY</given-names></name>, <name name-style="western"><surname>Lee</surname> <given-names>CH</given-names></name>, <name name-style="western"><surname>Sinakevitch</surname> <given-names>I</given-names></name>, <etal>et al</etal>. <article-title>Dissection of the Peripheral Motion Channel in the Visual System of Drosophila melanogaster</article-title>. <source>Neuron</source>. <year>2007</year> <month>Oct</month>;<volume>56</volume>(<issue>1</issue>):<fpage>155</fpage>–<lpage>170</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.cell.com/neuron/abstract/S0896-6273(07)00712-X" xlink:type="simple">http://www.cell.com/neuron/abstract/S0896-6273(07)00712-X</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.neuron.2007.09.014" xlink:type="simple">10.1016/j.neuron.2007.09.014</ext-link></comment> <object-id pub-id-type="pmid">17920022</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref007">
<label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Song</surname> <given-names>Z</given-names></name>, <name name-style="western"><surname>Postma</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Billings</surname> <given-names>SA</given-names></name>, <name name-style="western"><surname>Coca</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Hardie</surname> <given-names>RC</given-names></name>, <name name-style="western"><surname>Juusola</surname> <given-names>M</given-names></name>. <article-title>Stochastic, Adaptive Sampling of Information by Microvilli in Fly Photoreceptors</article-title>. <source>Current Biology</source>. <year>2012</year> <month>Jun</month>;<volume>22</volume>(<issue>15</issue>):<fpage>1371</fpage>–<lpage>1380</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.cell.com/current-biology/abstract/S0960-9822(12)00634-3" xlink:type="simple">http://www.cell.com/current-biology/abstract/S0960-9822(12)00634-3</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.cub.2012.05.047" xlink:type="simple">10.1016/j.cub.2012.05.047</ext-link></comment> <object-id pub-id-type="pmid">22704990</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref008">
<label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Wardill</surname> <given-names>TJ</given-names></name>, <name name-style="western"><surname>List</surname> <given-names>O</given-names></name>, <name name-style="western"><surname>Li</surname> <given-names>X</given-names></name>, <name name-style="western"><surname>Dongre</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>McCulloch</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Ting</surname> <given-names>CY</given-names></name>, <etal>et al</etal>. <article-title>Multiple Spectral Inputs Improve Motion Discrimination in the Drosophila Visual System</article-title>. <source>Science</source>. <year>2012</year> <month>May</month>;<volume>336</volume>(<issue>6083</issue>):<fpage>925</fpage>–<lpage>931</lpage>. PMID: 22605779. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencemag.org/content/336/6083/925" xlink:type="simple">http://www.sciencemag.org/content/336/6083/925</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1126/science.1215317" xlink:type="simple">10.1126/science.1215317</ext-link></comment> <object-id pub-id-type="pmid">22605779</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Maisak</surname> <given-names>MS</given-names></name>, <name name-style="western"><surname>Haag</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Ammer</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Serbe</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Meier</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Leonhardt</surname> <given-names>A</given-names></name>, <etal>et al</etal>. <article-title>A directional tuning map of Drosophila elementary motion detectors</article-title>. <source>Nature</source>. <year>2013</year> <month>Aug</month>;<volume>500</volume>(<issue>7461</issue>):<fpage>212</fpage>–<lpage>216</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.nature.com/nature/journal/v500/n7461/abs/nature12320.html" xlink:type="simple">http://www.nature.com/nature/journal/v500/n7461/abs/nature12320.html</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nature12320" xlink:type="simple">10.1038/nature12320</ext-link></comment> <object-id pub-id-type="pmid">23925246</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref010">
<label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kim</surname> <given-names>AJ</given-names></name>, <name name-style="western"><surname>Lazar</surname> <given-names>AA</given-names></name>, <name name-style="western"><surname>Slutskiy</surname> <given-names>YB</given-names></name>. <article-title>System identification of Drosophila olfactory sensory neurons</article-title>. <source>Journal of Computational Neuroscience</source>. <year>2011</year> <month>Aug</month>;<volume>30</volume>(<issue>1</issue>):<fpage>143</fpage>–<lpage>161</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.springerlink.com/content/j046v670uj85v48v/" xlink:type="simple">http://www.springerlink.com/content/j046v670uj85v48v/</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/s10827-010-0265-0" xlink:type="simple">10.1007/s10827-010-0265-0</ext-link></comment> <object-id pub-id-type="pmid">20730480</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref011">
<label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Wilson</surname> <given-names>RI</given-names></name>. <article-title>Understanding the functional consequences of synaptic specialization: insight from the Drosophila antennal lobe</article-title>. <source>Current Opinion in Neurobiology</source>. <year>2011</year> <month>Apr</month>;<volume>21</volume>(<issue>2</issue>):<fpage>254</fpage>–<lpage>260</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/S0959438811000420" xlink:type="simple">http://www.sciencedirect.com/science/article/pii/S0959438811000420</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.conb.2011.03.002" xlink:type="simple">10.1016/j.conb.2011.03.002</ext-link></comment> <object-id pub-id-type="pmid">21441021</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref012">
<label>12</label>
<mixed-citation publication-type="other" xlink:type="simple">Kim AJ, Lazar AA, Slutskiy YB. Projection neurons in Drosophila antennal lobes signal the acceleration of odor concentrations. eLife. 2015 May;p. e06651. Available from: <ext-link ext-link-type="uri" xlink:href="http://elifesciences.org/content/early/2015/05/14/eLife.06651" xlink:type="simple">http://elifesciences.org/content/early/2015/05/14/eLife.06651</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref013">
<label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Budick</surname> <given-names>SA</given-names></name>, <name name-style="western"><surname>Dickinson</surname> <given-names>MH</given-names></name>. <article-title>Free-flight responses of Drosophila melanogaster to attractive odors</article-title>. <source>Journal of Experimental Biology</source>. <year>2006</year>;<volume>209</volume>(<issue>15</issue>):<fpage>3001</fpage>–<lpage>3017</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://jeb.biologists.org/content/209/15/3001.abstract" xlink:type="simple">http://jeb.biologists.org/content/209/15/3001.abstract</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1242/jeb.02305" xlink:type="simple">10.1242/jeb.02305</ext-link></comment> <object-id pub-id-type="pmid">16857884</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref014">
<label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Maimon</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Straw</surname> <given-names>AD</given-names></name>, <name name-style="western"><surname>Dickinson</surname> <given-names>MH</given-names></name>. <article-title>A simple vision-based algorithm for decision making in flying Drosophila</article-title>. <source>Current Biology</source>. <year>2008</year> <month>Mar</month>;<volume>18</volume>(<issue>6</issue>):<fpage>464</fpage>–<lpage>470</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/B6VRT-4S21J46-2/2/5ef5f08d7f9b78d3777a5e731d088567" xlink:type="simple">http://www.sciencedirect.com/science/article/B6VRT-4S21J46-2/2/5ef5f08d7f9b78d3777a5e731d088567</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.cub.2008.02.054" xlink:type="simple">10.1016/j.cub.2008.02.054</ext-link></comment> <object-id pub-id-type="pmid">18342508</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref015">
<label>15</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Chiappe</surname> <given-names>ME</given-names></name>, <name name-style="western"><surname>Seelig</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Reiser</surname> <given-names>MB</given-names></name>, <name name-style="western"><surname>Jayaraman</surname> <given-names>V</given-names></name>. <article-title>Walking Modulates Speed Sensitivity in Drosophila Motion Vision</article-title>. <source>Current Biology</source>. <year>2010</year> <month>Aug</month>;<volume>20</volume>(<issue>16</issue>):<fpage>1470</fpage>–<lpage>1475</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/S0960982210008614" xlink:type="simple">http://www.sciencedirect.com/science/article/pii/S0960982210008614</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.cub.2010.06.072" xlink:type="simple">10.1016/j.cub.2010.06.072</ext-link></comment> <object-id pub-id-type="pmid">20655222</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref016">
<label>16</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Chklovskii</surname> <given-names>DB</given-names></name>, <name name-style="western"><surname>Vitaladevuni</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Scheffer</surname> <given-names>LK</given-names></name>. <article-title>Semi-automated reconstruction of neural circuits using electron microscopy</article-title>. <source>Current Opinion in Neurobiology</source>. <year>2010</year> <month>Oct</month>;<volume>20</volume>(<issue>5</issue>):<fpage>667</fpage>–<lpage>675</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/S0959438810001224" xlink:type="simple">http://www.sciencedirect.com/science/article/pii/S0959438810001224</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.conb.2010.08.002" xlink:type="simple">10.1016/j.conb.2010.08.002</ext-link></comment> <object-id pub-id-type="pmid">20833533</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref017">
<label>17</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Takemura</surname> <given-names>SY</given-names></name>, <name name-style="western"><surname>Bharioke</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Lu</surname> <given-names>Z</given-names></name>, <name name-style="western"><surname>Nern</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Vitaladevuni</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Rivlin</surname> <given-names>PK</given-names></name>, <etal>et al</etal>. <article-title>A visual motion detection circuit suggested by Drosophila connectomics</article-title>. <source>Nature</source>. <year>2013</year> <month>Aug</month>;<volume>500</volume>(<issue>7461</issue>):<fpage>175</fpage>–<lpage>181</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nature12450" xlink:type="simple">10.1038/nature12450</ext-link></comment> <object-id pub-id-type="pmid">23925240</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref018">
<label>18</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Frye</surname> <given-names>MA</given-names></name>, <name name-style="western"><surname>Dickinson</surname> <given-names>MH</given-names></name>. <article-title>Closing the loop between neurobiology and flight behavior in Drosophila</article-title>. <source>Current Opinion in Neurobiology</source>. <year>2004</year> <month>Dec</month>;<volume>14</volume>(<issue>6</issue>):<fpage>729</fpage>–<lpage>736</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/B6VS3-4DPH182-6/2/17c22b45f3c0e9eafd8933dfcbefd7c5" xlink:type="simple">http://www.sciencedirect.com/science/article/B6VS3-4DPH182-6/2/17c22b45f3c0e9eafd8933dfcbefd7c5</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.conb.2004.10.004" xlink:type="simple">10.1016/j.conb.2004.10.004</ext-link></comment> <object-id pub-id-type="pmid">15582376</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref019">
<label>19</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Morante</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Desplan</surname> <given-names>C</given-names></name>. <article-title>The Color-Vision Circuit in the Medulla of Drosophila</article-title>. <source>Current Biology</source>. <year>2008</year> <month>Apr</month>;<volume>18</volume>(<issue>8</issue>):<fpage>553</fpage>–<lpage>565</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/B6VRT-4S80H99-1/2/d29c3c349afe68de045a80c14f6149e1" xlink:type="simple">http://www.sciencedirect.com/science/article/B6VRT-4S80H99-1/2/d29c3c349afe68de045a80c14f6149e1</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.cub.2008.02.075" xlink:type="simple">10.1016/j.cub.2008.02.075</ext-link></comment> <object-id pub-id-type="pmid">18403201</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref020">
<label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Huston</surname> <given-names>SJ</given-names></name>, <name name-style="western"><surname>Jayaraman</surname> <given-names>V</given-names></name>. <article-title>Studying sensorimotor integration in insects</article-title>. <source>Current Opinion in Neurobiology</source>. <year>2011</year> <month>Aug</month>;<volume>21</volume>(<issue>4</issue>):<fpage>527</fpage>–<lpage>534</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/S0959438811000985" xlink:type="simple">http://www.sciencedirect.com/science/article/pii/S0959438811000985</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.conb.2011.05.030" xlink:type="simple">10.1016/j.conb.2011.05.030</ext-link></comment> <object-id pub-id-type="pmid">21705212</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref021">
<label>21</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Mu</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Ito</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Bacon</surname> <given-names>JP</given-names></name>, <name name-style="western"><surname>Strausfeld</surname> <given-names>NJ</given-names></name>. <article-title>Optic Glomeruli and Their Inputs in Drosophila Share an Organizational Ground Pattern with the Antennal Lobes</article-title>. <source>The Journal of Neuroscience</source>. <year>2012</year> <month>May</month>;<volume>32</volume>(<issue>18</issue>):<fpage>6061</fpage>–<lpage>6071</lpage>. PMID: 22553013. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.jneurosci.org/content/32/18/6061" xlink:type="simple">http://www.jneurosci.org/content/32/18/6061</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1523/JNEUROSCI.0221-12.2012" xlink:type="simple">10.1523/JNEUROSCI.0221-12.2012</ext-link></comment> <object-id pub-id-type="pmid">22553013</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref022">
<label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Seelig</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Jayaraman</surname> <given-names>V</given-names></name>. <article-title>Feature detection and orientation tuning in the Drosophila central complex</article-title>. <source>Nature</source>. <year>2013</year> <month>Oct</month>;advance online publication. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nature12601" xlink:type="simple">10.1038/nature12601</ext-link></comment> <object-id pub-id-type="pmid">24107996</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref023">
<label>23</label>
<mixed-citation publication-type="other" xlink:type="simple">Bradner S. The Internet Standards Process—Revision 3. Internet RFCs, ISSN 2070-1721. 1996 Oct;RFC 2026. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.rfc-editor.org/rfc/rfc2026.txt" xlink:type="simple">http://www.rfc-editor.org/rfc/rfc2026.txt</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref024">
<label>24</label>
<mixed-citation publication-type="other" xlink:type="simple">Warsaw B, Hylton J, Goodger D, Coghlan N. PEP Purpose and Guidelines. Python Enhancement Proposals. 2000 Jun;PEP 1. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.python.org/dev/peps/pep-0001/" xlink:type="simple">http://www.python.org/dev/peps/pep-0001/</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref025">
<label>25</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Shih</surname> <given-names>CT</given-names></name>, <name name-style="western"><surname>Sporns</surname> <given-names>O</given-names></name>, <name name-style="western"><surname>Yuan</surname> <given-names>SL</given-names></name>, <name name-style="western"><surname>Su</surname> <given-names>TS</given-names></name>, <name name-style="western"><surname>Lin</surname> <given-names>YJ</given-names></name>, <name name-style="western"><surname>Chuang</surname> <given-names>CC</given-names></name>, <etal>et al</etal>. <article-title>Connectomics-Based Analysis of Information Flow in the Drosophila Brain</article-title>. <source>Current Biology</source>. <year>2015</year>;<volume>0</volume>(<issue>0</issue>). Available from: <ext-link ext-link-type="uri" xlink:href="http://www.cell.com/article/S096098221500336X/abstract" xlink:type="simple">http://www.cell.com/article/S096098221500336X/abstract</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref026">
<label>26</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Peng</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Ruan</surname> <given-names>Z</given-names></name>, <name name-style="western"><surname>Long</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Simpson</surname> <given-names>JH</given-names></name>, <name name-style="western"><surname>Myers</surname> <given-names>EW</given-names></name>. <article-title>V3D enables real-time 3D visualization and quantitative analysis of large-scale biological image data sets</article-title>. <source>Nature Biotechnology</source>. <year>2010</year> <month>Apr</month>;<volume>28</volume>(<issue>4</issue>):<fpage>348</fpage>–<lpage>353</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nbt.1612" xlink:type="simple">10.1038/nbt.1612</ext-link></comment> <object-id pub-id-type="pmid">20231818</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref027">
<label>27</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Peng</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Tang</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Xiao</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Bria</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Zhou</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Butler</surname> <given-names>V</given-names></name>, <etal>et al</etal>. <article-title>Virtual finger boosts three-dimensional imaging and microsurgery as well as terabyte volume image visualization and analysis</article-title>. <source>Nature Communications</source>. <year>2014</year>;<volume>5</volume>:<fpage>4342</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/ncomms5342" xlink:type="simple">10.1038/ncomms5342</ext-link></comment> <object-id pub-id-type="pmid">25014658</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref028">
<label>28</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Peng</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Bria</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Zhou</surname> <given-names>Z</given-names></name>, <name name-style="western"><surname>Iannello</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Long</surname> <given-names>F</given-names></name>. <article-title>Extensible visualization and analysis for multidimensional images using Vaa3D</article-title>. <source>Nature Protocols</source>. <year>2014</year> <month>Jan</month>;<volume>9</volume>(<issue>1</issue>):<fpage>193</fpage>–<lpage>208</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nprot.2014.011" xlink:type="simple">10.1038/nprot.2014.011</ext-link></comment> <object-id pub-id-type="pmid">24385149</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref029">
<label>29</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lazar</surname> <given-names>AA</given-names></name>. <article-title>Programming telecommunication networks</article-title>. <source>IEEE Network</source>. <year>1997</year> <month>Oct</month>;<volume>11</volume>(<issue>5</issue>):<fpage>8</fpage>–<lpage>18</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/65.620517" xlink:type="simple">10.1109/65.620517</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0146581.ref030">
<label>30</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Nageswaran</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Dutt</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Krichmar</surname> <given-names>JL</given-names></name>, <name name-style="western"><surname>Nicolau</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Veidenbaum</surname> <given-names>AV</given-names></name>. <article-title>A configurable simulation environment for the efficient simulation of large-scale spiking neural networks on graphics processors</article-title>. <source>Neural Networks</source>. <year>2009</year> <month>Jul</month>;<volume>22</volume>(<issue>5–6</issue>):<fpage>791</fpage>–<lpage>800</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/B6T08-4WNGW6V-4/2/1836146d5752dbc7a170f3aa19a436ca" xlink:type="simple">http://www.sciencedirect.com/science/article/B6T08-4WNGW6V-4/2/1836146d5752dbc7a170f3aa19a436ca</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.neunet.2009.06.028" xlink:type="simple">10.1016/j.neunet.2009.06.028</ext-link></comment> <object-id pub-id-type="pmid">19615853</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref031">
<label>31</label>
<mixed-citation publication-type="other" xlink:type="simple">Mutch J, Knoblich U, Poggio T. CNS: a GPU-based framework for simulating cortically-organized networks. MIT; 2010. MIT-CSAIL-TR-2010-013. Available from: <ext-link ext-link-type="uri" xlink:href="http://gpucomputing.net/?q=node/429" xlink:type="simple">http://gpucomputing.net/?q=node/429</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref032">
<label>32</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Nowotny</surname> <given-names>T</given-names></name>. <article-title>Flexible neuronal network simulation framework using code generation for NVidia® CUDA(TM)</article-title>. <source>BMC Neuroscience</source>. <year>2011</year> <month>Jul</month>;<volume>12</volume>(<issue>Suppl 1</issue>):<fpage>P239</fpage>. PMID: null PMCID: PMC3240344. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3240344/" xlink:type="simple">http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3240344/</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/1471-2202-12-S1-P239" xlink:type="simple">10.1186/1471-2202-12-S1-P239</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0146581.ref033">
<label>33</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Richert</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Nageswaran</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Dutt</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Krichmar</surname> <given-names>JL</given-names></name>. <article-title>An efficient simulation environment for modeling large-scale cortical processing</article-title>. <source>Frontiers in Neuroinformatics</source>. <year>2011</year>;<volume>5</volume>:<fpage>19</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.3389/fninf.2011.00019" xlink:type="simple">10.3389/fninf.2011.00019</ext-link></comment> <object-id pub-id-type="pmid">22007166</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref034">
<label>34</label>
<mixed-citation publication-type="other" xlink:type="simple">Brette R, Goodman DFM. Simulating spiking neural networks on GPU [review-article]; 2012. Available from: <ext-link ext-link-type="uri" xlink:href="http://informahealthcare.com/doi/abs/10.3109/0954898X.2012.730170" xlink:type="simple">http://informahealthcare.com/doi/abs/10.3109/0954898X.2012.730170</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref035">
<label>35</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Klöckner</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Pinto</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Lee</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Catanzaro</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Ivanov</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Fasih</surname> <given-names>A</given-names></name>. <article-title>PyCUDA and PyOpenCL: A scripting-based approach to GPU run-time code generation</article-title>. <source>Parallel Computing</source>. <year>2012</year> <month>Mar</month>;<volume>38</volume>(<issue>3</issue>):<fpage>157</fpage>–<lpage>174</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/S0167819111001281" xlink:type="simple">http://www.sciencedirect.com/science/article/pii/S0167819111001281</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.parco.2011.09.001" xlink:type="simple">10.1016/j.parco.2011.09.001</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0146581.ref036">
<label>36</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gleeson</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Crook</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Cannon</surname> <given-names>RC</given-names></name>, <name name-style="western"><surname>Hines</surname> <given-names>ML</given-names></name>, <name name-style="western"><surname>Billings</surname> <given-names>GO</given-names></name>, <name name-style="western"><surname>Farinella</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <article-title>NeuroML: A Language for Describing Data Driven Models of Neurons and Networks with a High Degree of Biological Detail</article-title>. <source>PLoS Comput Biol</source>. <year>2010</year> <month>Jun</month>;<volume>6</volume>(<issue>6</issue>):<fpage>e1000815</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1000815" xlink:type="simple">10.1371/journal.pcbi.1000815</ext-link></comment> <object-id pub-id-type="pmid">20585541</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref037">
<label>37</label>
<mixed-citation publication-type="other" xlink:type="simple">Gabriel E, Fagg GE, Bosilca G, Angskun T, Dongarra JJ, Squyres JM, et al. Open MPI: Goals, Concept, and Design of a Next Generation MPI Implementation. In: Proceedings, 11th European PVM/MPI Users’ Group Meeting. Budapest, Hungary; 2004. p. 97–104. Available from: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/978-3-540-30218-6_19" xlink:type="simple">http://dx.doi.org/10.1007/978-3-540-30218-6_19</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref038">
<label>38</label>
<mixed-citation publication-type="other" xlink:type="simple">NVIDIA. CUDA Toolkit 4.0 Readiness for CUDA Applications. NVIDIA; 2011. Available from: <ext-link ext-link-type="uri" xlink:href="http://developer.download.nvidia.com/compute/DevZone/docs/html/C/doc/CUDA_4.0_Readiness_Tech_Brief.pdf" xlink:type="simple">http://developer.download.nvidia.com/compute/DevZone/docs/html/C/doc/CUDA_4.0_Readiness_Tech_Brief.pdf</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref039">
<label>39</label>
<mixed-citation publication-type="other" xlink:type="simple">NVIDIA. Kepler GK110 Whitepaper. NVIDIA; 2012. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.nvidia.com/content/PDF/kepler/NVIDIA-Kepler-GK110-Architecture-Whitepaper.pdf" xlink:type="simple">http://www.nvidia.com/content/PDF/kepler/NVIDIA-Kepler-GK110-Architecture-Whitepaper.pdf</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref040">
<label>40</label>
<mixed-citation publication-type="other" xlink:type="simple">Lazar AA, Ukani NH, Zhou Y. The Cartridge: A Canonical Neural Circuit Abstraction of the Lamina Neuropil—Construction and Composition Rules; 2014. NK RFC #2. Available from: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.5281/zenodo.11856" xlink:type="simple">http://dx.doi.org/10.5281/zenodo.11856</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref041">
<label>41</label>
<mixed-citation publication-type="other" xlink:type="simple">Lazar AA, Psychas K, Ukani NH, Zhou Y. A Parallel Processing Model of the Drosophila Retina; 2015. NK RFC #3. Available from: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.5281/zenodo.30036" xlink:type="simple">http://dx.doi.org/10.5281/zenodo.30036</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref042">
<label>42</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kirschfeld</surname> <given-names>K</given-names></name>. <article-title>Die projektion der optischen umwelt auf das raster der rhabdomere im komplex auge von musca</article-title>. <source>Experimental Brain Research</source>. <year>1967</year>;<volume>3</volume>:<fpage>248</fpage>–<lpage>270</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/BF00235588" xlink:type="simple">10.1007/BF00235588</ext-link></comment> <object-id pub-id-type="pmid">6067693</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref043">
<label>43</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Karypis</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Kumar</surname> <given-names>V</given-names></name>. <article-title>A fast and high quality multilevel scheme for partitioning irregular graphs</article-title>. <source>SIAM Journal on Scientific Computing</source>. <year>1998</year>;<volume>20</volume>(<issue>1</issue>):<fpage>359</fpage>–<lpage>392</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1137/S1064827595287997" xlink:type="simple">10.1137/S1064827595287997</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0146581.ref044">
<label>44</label>
<mixed-citation publication-type="other" xlink:type="simple">Thibeault C, Hoang R, Harris F Jr. A Novel Multi-GPU Neural Simulator. In: Proceedings of 3rd International Conference on Bioinformatics and Computational Biology 2011. New Orleans, LA; 2011. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.cse.unr.edu/~fredh/papers/conf/107-anmgpuns/paper.pdf" xlink:type="simple">http://www.cse.unr.edu/~fredh/papers/conf/107-anmgpuns/paper.pdf</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref045">
<label>45</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Nere</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Franey</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Hashmi</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Lipasti</surname> <given-names>M</given-names></name>. <article-title>Simulating cortical networks on heterogeneous multi-GPU systems</article-title>. <source>Journal of Parallel and Distributed Computing</source>. <year>2012</year>;Article in press. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/S0743731512000408" xlink:type="simple">http://www.sciencedirect.com/science/article/pii/S0743731512000408</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref046">
<label>46</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Minkovich</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Thibeault</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>O’Brien</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Nogin</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Cho</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Srinivasa</surname> <given-names>N</given-names></name>. <article-title>HRLSim: A High Performance Spiking Neural Network Simulator for GPGPU Clusters</article-title>. <source>IEEE Transactions on Neural Networks and Learning Systems</source>. <year>2014</year>;<volume>25</volume>(<issue>2</issue>):<fpage>316</fpage>–<lpage>331</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/TNNLS.2013.2276056" xlink:type="simple">10.1109/TNNLS.2013.2276056</ext-link></comment> <object-id pub-id-type="pmid">24807031</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref047">
<label>47</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Szigeti</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Gleeson</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Vella</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Khayrulin</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Palyanov</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Hokanson</surname> <given-names>J</given-names></name>, <etal>et al</etal>. <article-title>OpenWorm: an open-science approach to modelling Caenorhabditis elegans</article-title>. <source>Frontiers in Computational Neuroscience</source>. <year>2014</year>;<volume>8</volume>:<fpage>137</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.3389/fncom.2014.00137" xlink:type="simple">10.3389/fncom.2014.00137</ext-link></comment> <object-id pub-id-type="pmid">25404913</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref048">
<label>48</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>White</surname> <given-names>JG</given-names></name>, <name name-style="western"><surname>Southgate</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Thomson</surname> <given-names>JN</given-names></name>, <name name-style="western"><surname>Brenner</surname> <given-names>S</given-names></name>. <article-title>The Structure of the Nervous System of the Nematode Caenorhabditis elegans</article-title>. <source>Philosophical Transactions of the Royal Society of London B, Biological Sciences</source>. <year>1986</year> <month>Nov</month>;<volume>314</volume>(<issue>1165</issue>):<fpage>1</fpage>–<lpage>340</lpage>. PMID: 22462104. Available from: <ext-link ext-link-type="uri" xlink:href="http://rstb.royalsocietypublishing.org/content/314/1165/1" xlink:type="simple">http://rstb.royalsocietypublishing.org/content/314/1165/1</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1098/rstb.1986.0056" xlink:type="simple">10.1098/rstb.1986.0056</ext-link></comment> <object-id pub-id-type="pmid">22462104</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref049">
<label>49</label>
<mixed-citation publication-type="other" xlink:type="simple">Palyanov A, Khayrulin S, Mike V. Sibernetic fluid mechanics simulator [Internet]; 2015. Available from: <ext-link ext-link-type="uri" xlink:href="http://openworm.github.io/sibernetic/" xlink:type="simple">http://openworm.github.io/sibernetic/</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref050">
<label>50</label>
<mixed-citation publication-type="other" xlink:type="simple">Goodman DFM, Brette R. The Brian Simulator. Frontiers in Neuroscience. 2009 Sep;Available from: <ext-link ext-link-type="uri" xlink:href="http://frontiersin.org/neuroscience/paper/10.3389/neuro.01/026.2009/" xlink:type="simple">http://frontiersin.org/neuroscience/paper/10.3389/neuro.01/026.2009/</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref051">
<label>51</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Carnevale</surname> <given-names>NT</given-names></name>, <name name-style="western"><surname>Hines</surname> <given-names>ML</given-names></name>. <chapter-title>The NEURON Book</chapter-title>. <source>Cambridge</source>; <publisher-loc>New York</publisher-loc>: <publisher-name>Cambridge University Press</publisher-name>; <year>2006</year>. Available from: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1017/CBO9780511541612" xlink:type="simple">http://dx.doi.org/10.1017/CBO9780511541612</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref052">
<label>52</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Davison</surname> <given-names>AP</given-names></name>, <name name-style="western"><surname>Brüderle</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Eppler</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Kremkow</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Muller</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Pecevski</surname> <given-names>D</given-names></name>, <etal>et al</etal>. <article-title>PyNN: a common interface for neuronal network simulators</article-title>. <source>Frontiers in Neuroinformatics</source>. <year>2009</year>;<volume>2</volume>:<fpage>11</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.3389/neuro.11.011.2008" xlink:type="simple">10.3389/neuro.11.011.2008</ext-link></comment> <object-id pub-id-type="pmid">19194529</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref053">
<label>53</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Eliasmith</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Stewart</surname> <given-names>TC</given-names></name>, <name name-style="western"><surname>Choo</surname> <given-names>X</given-names></name>, <name name-style="western"><surname>Bekolay</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>DeWolf</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Tang</surname> <given-names>Y</given-names></name>, <etal>et al</etal>. <article-title>A Large-Scale Model of the Functioning Brain</article-title>. <source>Science</source>. <year>2012</year> <month>Nov</month>;<volume>338</volume>(<issue>6111</issue>):<fpage>1202</fpage>–<lpage>1205</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencemag.org/content/338/6111/1202" xlink:type="simple">http://www.sciencemag.org/content/338/6111/1202</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1126/science.1225266" xlink:type="simple">10.1126/science.1225266</ext-link></comment> <object-id pub-id-type="pmid">23197532</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref054">
<label>54</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gleeson</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Steuber</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Silver</surname> <given-names>RA</given-names></name>. <article-title>neuroConstruct: A Tool for Modeling Networks of Neurons in 3D Space</article-title>. <source>Neuron</source>. <year>2007</year> <month>Apr</month>;<volume>54</volume>(<issue>2</issue>):<fpage>219</fpage>–<lpage>235</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/S0896627307002486" xlink:type="simple">http://www.sciencedirect.com/science/article/pii/S0896627307002486</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.neuron.2007.03.025" xlink:type="simple">10.1016/j.neuron.2007.03.025</ext-link></comment> <object-id pub-id-type="pmid">17442244</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref055">
<label>55</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bernardet</surname> <given-names>U</given-names></name>, <name name-style="western"><surname>Verschure</surname> <given-names>PFMJ</given-names></name>. <article-title>iqr: A Tool for the Construction of Multi-level Simulations of Brain and Behaviour</article-title>. <source>Neuroinformatics</source>. <year>2010</year> <month>Jun</month>;<volume>8</volume>(<issue>2</issue>):<fpage>113</fpage>–<lpage>134</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/s12021-010-9069-7" xlink:type="simple">10.1007/s12021-010-9069-7</ext-link></comment> <object-id pub-id-type="pmid">20502987</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref056">
<label>56</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Djurfeldt</surname> <given-names>M</given-names></name>. <article-title>The Connection-Set Algebra—A Novel Formalism for the Representation of Connectivity Structure in Neuronal Network Models</article-title>. <source>Neuroinformatics</source>. <year>2012</year> <month>Jul</month>;<volume>10</volume>(<issue>3</issue>):<fpage>287</fpage>–<lpage>304</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/s12021-012-9146-1" xlink:type="simple">10.1007/s12021-012-9146-1</ext-link></comment> <object-id pub-id-type="pmid">22437992</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref057">
<label>57</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hines</surname> <given-names>ML</given-names></name>, <name name-style="western"><surname>Morse</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Migliore</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Carnevale</surname> <given-names>NT</given-names></name>, <name name-style="western"><surname>Shepherd</surname> <given-names>GM</given-names></name>. <article-title>ModelDB: A Database to Support Computational Neuroscience</article-title>. <source>Journal of Computational Neuroscience</source>. <year>2004</year> <month>Aug</month>;<volume>17</volume>(<issue>1</issue>):<fpage>7</fpage>–<lpage>11</lpage>. PMID: 15218350. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1023/B:JCNS.0000023869.22017.2e" xlink:type="simple">10.1023/B:JCNS.0000023869.22017.2e</ext-link></comment> <object-id pub-id-type="pmid">15218350</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref058">
<label>58</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gleeson</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Piasini</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Crook</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Cannon</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Steuber</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Jaeger</surname> <given-names>D</given-names></name>, <etal>et al</etal>. <article-title>The Open Source Brain Initiative: enabling collaborative modelling in computational neuroscience</article-title>. <source>BMC Neuroscience</source>. <year>2012</year> <month>Jul</month>;<volume>13</volume>(<issue>Suppl 1</issue>):<fpage>O7</fpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.biomedcentral.com/1471-2202/13/S1/O7/" xlink:type="simple">http://www.biomedcentral.com/1471-2202/13/S1/O7/</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref059">
<label>59</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Shreejoy</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Richard</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Judy</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Nathaniel</surname> <given-names>U</given-names></name>. <article-title>NeuroElectro.org: a community database on the electrophysiological diversity of mammalian neuron types</article-title>. <source>Frontiers in Neuroinformatics</source>. <year>2013</year>;<volume>7</volume>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.3389/conf.fninf.2013.09.00070" xlink:type="simple">10.3389/conf.fninf.2013.09.00070</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0146581.ref060">
<label>60</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Djurfeldt</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Hjorth</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Eppler</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Dudani</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Helias</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Potjans</surname> <given-names>TC</given-names></name>, <etal>et al</etal>. <article-title>Run-Time Interoperability Between Neuronal Network Simulators Based on the MUSIC Framework</article-title>. <source>Neuroinformatics</source>. <year>2010</year> <month>Mar</month>;<volume>8</volume>(<issue>1</issue>):<fpage>43</fpage>–<lpage>60</lpage>. PMID: 20195795 PMCID: 2846392. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/s12021-010-9064-z" xlink:type="simple">10.1007/s12021-010-9064-z</ext-link></comment> <object-id pub-id-type="pmid">20195795</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref061">
<label>61</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pecevski</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Natschläger</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Schuch</surname> <given-names>K</given-names></name>. <article-title>PCSIM: a parallel simulation environment for neural circuits fully integrated with Python</article-title>. <source>Frontiers in Neuroinformatics</source>. <year>2009</year>;<volume>3</volume>:<fpage>11</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.3389/neuro.11.011.2009" xlink:type="simple">10.3389/neuro.11.011.2009</ext-link></comment> <object-id pub-id-type="pmid">19543450</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref062">
<label>62</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Silver</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Boahen</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Grillner</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Kopell</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Olsen</surname> <given-names>KL</given-names></name>. <article-title>Neurotech for Neuroscience: Unifying Concepts, Organizing Principles, and Emerging Tools</article-title>. <source>The Journal of Neuroscience</source>. <year>2007</year> <month>Oct</month>;<volume>27</volume>(<issue>44</issue>):<fpage>11807</fpage>–<lpage>11819</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.jneurosci.org/content/27/44/11807.abstract" xlink:type="simple">http://www.jneurosci.org/content/27/44/11807.abstract</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1523/JNEUROSCI.3575-07.2007" xlink:type="simple">10.1523/JNEUROSCI.3575-07.2007</ext-link></comment> <object-id pub-id-type="pmid">17978017</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref063">
<label>63</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Stewart</surname> <given-names>TC</given-names></name>, <name name-style="western"><surname>Tripp</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Eliasmith</surname> <given-names>C</given-names></name>. <article-title>Python scripting in the Nengo simulator</article-title>. <source>Frontiers in Neuroinformatics</source>. <year>2009</year>;<volume>3</volume>:<fpage>7</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.3389/neuro.11.007.2009" xlink:type="simple">10.3389/neuro.11.007.2009</ext-link></comment> <object-id pub-id-type="pmid">19352442</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref064">
<label>64</label>
<mixed-citation publication-type="other" xlink:type="simple">Rast AD, Jin X, Galluppi F, Plana LA, Patterson C, Furber S. Scalable event-driven native parallel processing: the SpiNNaker neuromimetic system. In: Proceedings of the 7th ACM international conference on Computing frontiers. CF’10. New York, NY, USA: ACM; 2010. p. 21–30. ACM ID: 1787279. Available from: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1145/1787275.1787279" xlink:type="simple">http://dx.doi.org/10.1145/1787275.1787279</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref065">
<label>65</label>
<mixed-citation publication-type="other" xlink:type="simple">Preissl R, Wong TM, Datta P, Flickner M, Singh R, Esser SK, et al. Compass: a scalable simulator for an architecture for cognitive computing. In: Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis. SC’12. Los Alamitos, CA, USA: IEEE Computer Society Press; 2012. p. 54:1–54:11. Available from: <ext-link ext-link-type="uri" xlink:href="http://dl.acm.org/citation.cfm?id = 2388996.2389070" xlink:type="simple">http://dl.acm.org/citation.cfm?id = 2388996.2389070</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref066">
<label>66</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lazar</surname> <given-names>AA</given-names></name>, <name name-style="western"><surname>Slutskiy</surname> <given-names>YB</given-names></name>. <article-title>Functional Identification of Spike-Processing Neural Circuits</article-title>. <source>Neural Computation</source>. <year>2014</year> <month>February</month>;<volume>26</volume>(<issue>2</issue>). <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1162/NECO_a_00543" xlink:type="simple">10.1162/NECO_a_00543</ext-link></comment> <object-id pub-id-type="pmid">24206386</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref067">
<label>67</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lazar</surname> <given-names>AA</given-names></name>, <name name-style="western"><surname>Slutskiy</surname> <given-names>YB</given-names></name>. <article-title>Channel Identification Machines for Multidimensional Receptive Fields</article-title>. <source>Frontiers in Computational Neuroscience</source>. <year>2014</year>;<volume>8</volume>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.3389/fncom.2014.00117" xlink:type="simple">10.3389/fncom.2014.00117</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0146581.ref068">
<label>68</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lazar</surname> <given-names>AA</given-names></name>, <name name-style="western"><surname>Zhou</surname> <given-names>Y</given-names></name>. <article-title>Volterra Dendritic Stimulus Processors and Biophysical Spike Generators with Intrinsic Noise Sources</article-title>. <source>Frontiers in Computational Neuroscience</source>. <year>2014</year>;<volume>8</volume>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.3389/fncom.2014.00095" xlink:type="simple">10.3389/fncom.2014.00095</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0146581.ref069">
<label>69</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lazar</surname> <given-names>AA</given-names></name>, <name name-style="western"><surname>Slutskiy</surname> <given-names>YB</given-names></name>. <article-title>Spiking Neural Circuits with Dendritic Stimulus Processors</article-title>. <source>Journal of Computational Neuroscience</source>. <year>2015</year>;<volume>38</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>24</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/s10827-014-0522-8" xlink:type="simple">10.1007/s10827-014-0522-8</ext-link></comment> <object-id pub-id-type="pmid">25175020</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref070">
<label>70</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lazar</surname> <given-names>AA</given-names></name>, <name name-style="western"><surname>Slutskiy</surname> <given-names>YB</given-names></name>, <name name-style="western"><surname>Zhou</surname> <given-names>Y</given-names></name>. <article-title>Massively Parallel Neural Circuits for Stereoscopic Color Vision: Encoding, Decoding and Identification</article-title>. <source>Neural Networks</source>. <year>2015</year>;<volume>63</volume>:<fpage>254</fpage>–<lpage>271</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.neunet.2014.10.014" xlink:type="simple">10.1016/j.neunet.2014.10.014</ext-link></comment> <object-id pub-id-type="pmid">25594573</object-id></mixed-citation>
</ref>
<ref id="pone.0146581.ref071">
<label>71</label>
<mixed-citation publication-type="other" xlink:type="simple">Fidjeland A, Shanahan M. Accelerated simulation of spiking neural networks using GPUs. In: Neural Networks (IJCNN), The 2010 International Joint Conference on; 2010. p. 1–8. Available from: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/IJCNN.2010.5596678" xlink:type="simple">http://dx.doi.org/10.1109/IJCNN.2010.5596678</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0146581.ref072">
<label>72</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Givon</surname> <given-names>LE</given-names></name>, <name name-style="western"><surname>Lazar</surname> <given-names>AA</given-names></name>, <name name-style="western"><surname>Ukani</surname> <given-names>NH</given-names></name>. <article-title>Neuroarch: A Graph-Based Platform for Constructing and Querying Models of the Fruit Fly Brain Architecture</article-title>. <source>Frontiers in Neuroinformatics</source>. <year>2014</year> <month>Aug</month>;(<issue>42</issue>). Available from: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.3389/conf.fninf.2014.18.00042" xlink:type="simple">http://dx.doi.org/10.3389/conf.fninf.2014.18.00042</ext-link>.</mixed-citation>
</ref>
</ref-list>
</back>
</article>