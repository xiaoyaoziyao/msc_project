<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article article-type="research-article" dtd-version="1.1d3" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS ONE</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">plosone</journal-id>
<journal-title-group>
<journal-title>PLOS ONE</journal-title>
</journal-title-group>
<issn pub-type="epub">1932-6203</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PONE-D-18-11549</article-id>
<article-id pub-id-type="doi">10.1371/journal.pone.0202355</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Eukaryota</subject><subj-group><subject>Animals</subject><subj-group><subject>Invertebrates</subject><subj-group><subject>Arthropoda</subject><subj-group><subject>Insects</subject><subj-group><subject>Grasshoppers</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Experimental organism systems</subject><subj-group><subject>Model organisms</subject><subj-group><subject>Caenorhabditis elegans</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Model organisms</subject><subj-group><subject>Caenorhabditis elegans</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Experimental organism systems</subject><subj-group><subject>Animal models</subject><subj-group><subject>Caenorhabditis elegans</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Eukaryota</subject><subj-group><subject>Animals</subject><subj-group><subject>Invertebrates</subject><subj-group><subject>Nematoda</subject><subj-group><subject>Caenorhabditis</subject><subj-group><subject>Caenorhabditis elegans</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Genomic libraries</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Genomic libraries</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Sequence assembly tools</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Sequence assembly tools</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Bioinformatics</subject><subj-group><subject>Sequence analysis</subject><subj-group><subject>Sequence alignment</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Cell biology</subject><subj-group><subject>Chromosome biology</subject><subj-group><subject>Chromosomes</subject><subj-group><subject>Autosomes</subject><subj-group><subject>Chromosome pairs</subject><subj-group><subject>Chromosome 14</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Cell biology</subject><subj-group><subject>Chromosome biology</subject><subj-group><subject>Chromosomes</subject><subj-group><subject>Chromosome pairs</subject><subj-group><subject>Chromosome 14</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject><subj-group><subject>Genomics statistics</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Genomics statistics</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Microbiology</subject><subj-group><subject>Bacteriology</subject><subj-group><subject>Bacterial genetics</subject><subj-group><subject>Bacterial genomics</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Microbial genetics</subject><subj-group><subject>Bacterial genetics</subject><subj-group><subject>Bacterial genomics</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Microbial genomics</subject><subj-group><subject>Bacterial genomics</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Microbiology</subject><subj-group><subject>Microbial genomics</subject><subj-group><subject>Bacterial genomics</subject></subj-group></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>GRASShopPER—An algorithm for <italic>de novo</italic> assembly based on GPU alignments</article-title>
<alt-title alt-title-type="running-head">GRASShopPER—<italic>de novo</italic> assembler</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5574-8222</contrib-id>
<name name-style="western">
<surname>Swiercz</surname> <given-names>Aleksandra</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Data curation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Frohmberg</surname> <given-names>Wojciech</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Kierzynka</surname> <given-names>Michal</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Data curation</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Wojciechowski</surname> <given-names>Pawel</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Resources</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Zurkowski</surname> <given-names>Piotr</given-names></name>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Badura</surname> <given-names>Jan</given-names></name>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Laskowski</surname> <given-names>Artur</given-names></name>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Kasprzak</surname> <given-names>Marta</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Blazewicz</surname> <given-names>Jacek</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
</contrib-group>
<aff id="aff001">
<label>1</label>
<addr-line>Institute of Computing Science, Poznań University of Technology, Poznań, Poland</addr-line>
</aff>
<aff id="aff002">
<label>2</label>
<addr-line>Institute of Bioorganic Chemistry, Polish Academy of Sciences, Poznań, Poland</addr-line>
</aff>
<aff id="aff003">
<label>3</label>
<addr-line>European Centre for Bioinformatics and Genomics, Poznań, Poland</addr-line>
</aff>
<aff id="aff004">
<label>4</label>
<addr-line>Poznań Supercomputing and Networking Center, Poznań, Poland</addr-line>
</aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Kalendar</surname> <given-names>Ruslan</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1">
<addr-line>University of Helsinki, FINLAND</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">Aleksandra.Swiercz@cs.put.poznan.pl</email></corresp>
</author-notes>
<pub-date pub-type="collection">
<year>2018</year>
</pub-date>
<pub-date pub-type="epub">
<day>16</day>
<month>8</month>
<year>2018</year>
</pub-date>
<volume>13</volume>
<issue>8</issue>
<elocation-id>e0202355</elocation-id>
<history>
<date date-type="received">
<day>16</day>
<month>4</month>
<year>2018</year>
</date>
<date date-type="accepted">
<day>1</day>
<month>8</month>
<year>2018</year>
</date>
</history>
<permissions>
<copyright-year>2018</copyright-year>
<copyright-holder>Swiercz et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pone.0202355"/>
<abstract>
<p>Next generation sequencers produce billions of short DNA sequences in a massively parallel manner, which causes a great computational challenge in accurately reconstructing a genome sequence <italic>de novo</italic> using these short sequences. Here, we propose the GRASShopPER assembler, which follows an approach of overlap-layout-consensus. It uses an efficient GPU implementation for the sequence alignment during the graph construction stage and a greedy hyper-heuristic algorithm at the fork detection stage. A two-part fork detection method allows us to identify repeated fragments of a genome and to reconstruct them without misassemblies. The assemblies of data sets of bacteria <italic>Candidatus</italic> Microthrix, nematode <italic>Caenorhabditis elegans</italic>, and human chromosome 14 were evaluated with the golden standard tool QUAST. In comparison with other assemblers, GRASShopPER provided contigs that covered the largest part of the genomes and, at the same time, kept good values of other metrics, e.g., NG50 and misassembly rate.</p>
</abstract>
<funding-group>
<award-group id="award001">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100008530</institution-id>
<institution>European Regional Development Fund</institution>
</institution-wrap>
</funding-source>
<award-id>POIR.04.02.00-30-A004/16</award-id>
<principal-award-recipient>
<name name-style="western">
<surname>Blazewicz</surname> <given-names>Jacek</given-names></name>
</principal-award-recipient>
</award-group>
<funding-statement>This research was supported in part by the European Regional Development Fund (<ext-link ext-link-type="uri" xlink:href="http://ec.europa.eu/regional_policy/en/funding/erdf/" xlink:type="simple">http://ec.europa.eu/regional_policy/en/funding/erdf/</ext-link>) grant no. POIR.04.02.00-30-A004/16 (AS, WF, PW, JBa, AL, MKa, JBl). The computational experiments were performed within PLGrid Infrastructure (<ext-link ext-link-type="uri" xlink:href="http://www.plgrid.pl/en" xlink:type="simple">http://www.plgrid.pl/en</ext-link>). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="8"/>
<table-count count="3"/>
<page-count count="23"/>
</counts>
<custom-meta-group>
<custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>GRASShopPER is freely available and can be accessed at: <ext-link ext-link-type="uri" xlink:href="http://grasshopper.cs.put.poznan.pl/" xlink:type="simple">http://grasshopper.cs.put.poznan.pl/</ext-link> Data sets used for the computational experiment are freely accessible. Data set of Candidatus Microthrix parvicella can be downloaded at Sequence Read Archive (<ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/sra" xlink:type="simple">http://www.ncbi.nlm.nih.gov/sra</ext-link>, SRA058866, library accession number is SRX189748). Data set of Caenorhabditis elegans strain N2 can be downloaded from the DNA Data Bank of Japan (<ext-link ext-link-type="uri" xlink:href="http://trace.ddbj.nig.ac.jp/" xlink:type="simple">http://trace.ddbj.nig.ac.jp/</ext-link>, accession number DRA000967) The data set of human chromosome 14 is available at GAGE web page (<ext-link ext-link-type="uri" xlink:href="http://gage.cbcb.umd.edu/data/Hg_chr14/Data.original/frag_1.fastq.gz" xlink:type="simple">http://gage.cbcb.umd.edu/data/Hg_chr14/Data.original/frag_1.fastq.gz</ext-link> and <ext-link ext-link-type="uri" xlink:href="http://gage.cbcb.umd.edu/data/Hg_chr14/Data.original/frag_2.fastq.gz" xlink:type="simple">http://gage.cbcb.umd.edu/data/Hg_chr14/Data.original/frag_2.fastq.gz</ext-link>).</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>In the last decade, we have witnessed a dynamic evolution of a next generation sequencing (NGS). Its availability as well as potential has amplified, making it possible to reveal information from yet unknown genomes (e.g., panda [<xref ref-type="bibr" rid="pone.0202355.ref001">1</xref>], turkey [<xref ref-type="bibr" rid="pone.0202355.ref002">2</xref>], fungi [<xref ref-type="bibr" rid="pone.0202355.ref003">3</xref>], and bacteria [<xref ref-type="bibr" rid="pone.0202355.ref004">4</xref>]). Sequencers are now capable of producing billions of short DNA or RNA sequences, called reads, in a massively parallel manner. Consequently, sequencing takes no longer than a few days and costs far less than its precursor—the Sanger technology. However, like before, NGS reads come from random positions of a target genome sequence, and it is still a computational challenge to reconstruct the target sequence using only the information from the reads or pairs of reads in the case of the paired-end/mate-pair sequencing protocol. The process of such a reconstruction is called <italic>de novo</italic> assembly. Each <italic>de novo</italic> assembly method is based on a simple assumption that the reads cover the examined part of a genome and are overlapping one another. By utilizing the information from the overlaps, the method is able to reconstruct the genome sequence, approximately. However, if the reads do not cover the whole target, which is very likely because of technology limitations, the reconstruction may result in several independent sequences called contigs. Yet another problem the assembly method faces is repetitions of genome fragments. This may lead to misassembled genome fragments. From the computational point of view, the assembly can be seen as a more complicated version of the Shortest Common Superstring Problem, which is known to be NP-complete [<xref ref-type="bibr" rid="pone.0202355.ref005">5</xref>]. To make matters worse, the assembly problem has to tackle additional problems like sequencing errors, hardness in assigning reads to the proper DNA strand, or filtering the input data; for example, some reads may come from different organisms due to contamination.</p>
<p>Historically, one of the first methods to reconstruct a DNA sequence from shorter fragments was proposed in [<xref ref-type="bibr" rid="pone.0202355.ref006">6</xref>]. The method is related to sequencing by hybridization. This approach did not stand the test of time, but it initiated the industry of microarrays. The goal of the method was pretty much the same as in assembly nowadays, namely reconstruction of the original sequence from a set of its shorter fragments, here called <italic>l</italic>-mers (<italic>l</italic> stands for the length of the fragment). The only difference between <italic>l</italic>-mers and NGS reads is that the length of the former is much smaller. Lysov and coauthors modeled the problem as the graph theory problem of finding a Hamiltonian path. In the graph model, <italic>l</italic>-mers are associated with vertices and directed arcs represent their overlapping relations. Another solution of the problem was provided by Pevzner in [<xref ref-type="bibr" rid="pone.0202355.ref007">7</xref>]. He redefined the graph model to apply the Eulerian path problem, where <italic>l</italic>-mers are associated with arcs. Comparison of these two models was addressed ten years later in [<xref ref-type="bibr" rid="pone.0202355.ref008">8</xref>]. There the properties of labeled graphs, which are directed graphs with labels in vertices fulfilling special rules of overlapping, were analyzed, with de Bruijn graphs being one of its natural examples. Lysov graphs and Pevzner graphs are different kinds of subgraphs of de Bruijn graphs. More relationships between these graphs were explained in [<xref ref-type="bibr" rid="pone.0202355.ref009">9</xref>, <xref ref-type="bibr" rid="pone.0202355.ref010">10</xref>].</p>
<p>The Pevzner graph model has been exploited in many algorithms for <italic>de novo</italic> assembly, which decompose reads into series of <italic>l</italic>-mers and benefit from such a reduction to the sequencing by hybridization problem (see e.g., [<xref ref-type="bibr" rid="pone.0202355.ref011">11</xref>–<xref ref-type="bibr" rid="pone.0202355.ref014">14</xref>]). In the literature, such a strategy is called, not quite justifiably, the de Bruijn graph approach (DBG). Nevertheless, in real world applications and in contrast to the original Pevzner’s solution, the occurrence of sequencing errors is inevitable, and the reconstruction problem becomes computationally harder. Only time- and memory-efficient heuristic algorithms are capable of dealing with large input data sets within a reasonable time. The overlap-layout-consensus strategy (OLC), based on the Lysov graph model, deals with the sequencing errors by allowing overlaps between pairs of reads represented by arcs to be inexact [<xref ref-type="bibr" rid="pone.0202355.ref015">15</xref>]. This approach has an advantage over the DBG strategy in the context of quality, as the latter approach partly loses the information about read continuity after the decomposition to <italic>l</italic>-mers. In DBG, paths corresponding to reads interweave and a heuristic algorithm is not able to strictly maintain their initial form. However, the quality improvement of OLC comes at the cost of memory consumption. OLC graphs (overlap graphs) need to store the information about overlaps, which is not necessary in DBG where <italic>l</italic>-mers themselves imply subsequent <italic>l</italic>-mers. In some circumstances, the quality of assembly results is the most crucial factor. For those cases, we find the OLC strategy promising. In fact, only a few assemblers utilizing this strategy have been developed, probably due to its computational cost [<xref ref-type="bibr" rid="pone.0202355.ref016">16</xref>–<xref ref-type="bibr" rid="pone.0202355.ref018">18</xref>].</p>
<p>On the other hand, new hardware technologies like graphics processing units (GPUs) offer much more computational power than CPUs. To focus our solution on producing high quality results in a reasonable time, we decided to use the OLC approach and parallelize its most time-demanding steps on GPUs. These ideas are the background of our new algorithm for de novo assembly GRASShopPER—GPU overlap GRaph ASSembler using Paired End Reads. A high performance module for overlap graph creation using graphics cards and a novel method for forks detection in the graph are the main features that differentiate GRASShopPER from other assemblers. We compare our algorithm with other top methods for <italic>de novo</italic> assembly: SOAPdenovo2 [<xref ref-type="bibr" rid="pone.0202355.ref013">13</xref>], Velvet [<xref ref-type="bibr" rid="pone.0202355.ref012">12</xref>], Platanus [<xref ref-type="bibr" rid="pone.0202355.ref014">14</xref>], Celera [<xref ref-type="bibr" rid="pone.0202355.ref016">16</xref>], String Graph Assembler (SGA, [<xref ref-type="bibr" rid="pone.0202355.ref018">18</xref>]), and SPAdes [<xref ref-type="bibr" rid="pone.0202355.ref019">19</xref>]. The data set consists of real NGS data for different types of genomes, starting from a bacterial genome to a repetitive mammalian genome.</p>
</sec>
<sec id="sec002" sec-type="results">
<title>Results</title>
<sec id="sec003">
<title>Algorithm overview</title>
<p>GRASShopPER is composed of three main stages (<xref ref-type="fig" rid="pone.0202355.g001">Fig 1</xref>). At the beginning, an overlap graph is constructed from all high quality input reads including their reverse complementary counterparts (they constitute vertices of the graph). The part of calculating read overlaps is cut down to a reasonable minimum by a heuristic algorithm, which selects only those pairs of reads that are likely to overlap, the so-called promising pairs. The selection is based on the similarity of characteristics of corresponding <italic>k</italic>-mers (see section <xref ref-type="sec" rid="sec013">Methods</xref> for details). To confirm whether the promising pairs actually overlap, an exact algorithm for sequence alignment running on GPUs is executed. Later, in the overlap graph, arcs are created only for those pairs of reads having the number of misaligned residues on the overlapping section below an adjustable threshold. The graph is expanded by several improvements toward finding further promising pairs. For the constructed graph, the algorithm continues with a traversal method in order to find paths. The algorithm detects forks along its way, and unambiguous paths are translated into contigs. In the next step, the reads are mapped to contigs to find yet undetected forks by utilizing information from a wider context. This step allows reducing the misassembly rate and at the same time only slightly decreases the NG50 measure. At the end, the contigs are prepared for the scaffolding methods, which expect non-overlapping contigs.</p>
<fig id="pone.0202355.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Diagram of the GRASShopPER assembler.</title>
<p>The method has three main steps: construction of the overlap graph, its traversal, and correction of contigs.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.g001" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec004">
<title>Other assemblers</title>
<p>We have compared GRASShopPER with a few assemblers that are well recognized in the scientific community: Velvet [<xref ref-type="bibr" rid="pone.0202355.ref012">12</xref>], SOAPdenovo2 [<xref ref-type="bibr" rid="pone.0202355.ref013">13</xref>], Platanus [<xref ref-type="bibr" rid="pone.0202355.ref014">14</xref>], SPAdes [<xref ref-type="bibr" rid="pone.0202355.ref019">19</xref>], Celera [<xref ref-type="bibr" rid="pone.0202355.ref016">16</xref>], and SGA [<xref ref-type="bibr" rid="pone.0202355.ref018">18</xref>]. They were used in the GAGE evaluation of assembly algorithms [<xref ref-type="bibr" rid="pone.0202355.ref020">20</xref>] and in the Assemblathon competitions [<xref ref-type="bibr" rid="pone.0202355.ref021">21</xref>, <xref ref-type="bibr" rid="pone.0202355.ref022">22</xref>]. The first four assemblers represent the decomposition-based graph approach (DBG), and the rest are based on the idea of overlap graphs (OLC). Velvet, although developed in 2008 for very short reads, is still updated and works now with longer reads as well. It is one of the most popular assemblers and is still used in many <italic>de novo</italic> assembly projects [<xref ref-type="bibr" rid="pone.0202355.ref023">23</xref>, <xref ref-type="bibr" rid="pone.0202355.ref024">24</xref>]. SOAPdenovo2 has been designed to be memory efficient and fast and still produces very high quality results. The origin of the tool lays in sequencing the giant panda genome [<xref ref-type="bibr" rid="pone.0202355.ref001">1</xref>]. Platanus was created recently to assemble highly heterozygous diploid genomes. While resolving bubbles in a de Bruijn graph, it distinguishes between repeated regions and heterozygosity and uses this information in the scaffolding step (a postassembly step for ordering non-overlapping contigs). The tool produced one of the highest NG50 values during the Assemblathon 2 contest and was used in several <italic>de novo</italic> assembly projects (e.g., [<xref ref-type="bibr" rid="pone.0202355.ref025">25</xref>]). SPAdes is the continuation of decomposition-based graphs proposed in [<xref ref-type="bibr" rid="pone.0202355.ref026">26</xref>] and paired de Bruijn graphs [<xref ref-type="bibr" rid="pone.0202355.ref027">27</xref>]. It uses multisized de Bruijn graph with different lengths of <italic>k</italic>-mers. It was tested mainly for small size genomes, like bacterial ones.</p>
<p>Methods following the OLC approach seem to be slightly underestimated. Nonetheless, the model is still developed in laboratories, which put high impact on the quality of the assembly results, where longer computation times or higher hardware requirements can be accepted. An example of this approach is the Celera assembler first released in 1999 [<xref ref-type="bibr" rid="pone.0202355.ref016">16</xref>] and then optimized under different names for different types of sequencers: wgs-assembler (Sanger/Applied Biosystems), CABOG (454/Roche), or PBcR (PacBio/Oxford). Another OLC-driven assembler under consideration is String Graph Assembler [<xref ref-type="bibr" rid="pone.0202355.ref018">18</xref>]. Here, read overlaps are calculated with the use of a compressed substring index based on the Burrows-Wheeler transform (FM-index), which can be effectively searched for the number of locations of a pattern within the compressed text. Additionally, the method transforms the graph into a so-called string graph by removing transitive edges. The method itself is memory- and time-efficient and was used in a few sequencing projects [<xref ref-type="bibr" rid="pone.0202355.ref028">28</xref>, <xref ref-type="bibr" rid="pone.0202355.ref029">29</xref>]. We performed multiple tests for each algorithm in order to optimize the input parameter values for a reliable comparison of the methods.</p>
</sec>
<sec id="sec005">
<title>Data sets for tests</title>
<p>To achieve an unbiased comparison, we performed tests on three data sets differing in read length, coverage depth, and genome repetitiveness. The first data set is the actinobacteria <italic>Candidatus</italic> Microthrix parvicella, which can be commonly found in biological wastewater treatment plants. The draft of the genome consists of 4.2 Mb and is arranged in 13 scaffolds [<xref ref-type="bibr" rid="pone.0202355.ref023">23</xref>]. Raw reads were downloaded from the Sequence Read Archive (<ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/sra" xlink:type="simple">http://www.ncbi.nlm.nih.gov/sra</ext-link>, SRA058866, library accession number is SRX189748). The second data set comes from the nematode <italic>Caenorhabditis elegans</italic> strain N2 and was downloaded from the DNA Data Bank of Japan (<ext-link ext-link-type="uri" xlink:href="http://trace.ddbj.nig.ac.jp/" xlink:type="simple">http://trace.ddbj.nig.ac.jp/</ext-link>, accession number DRA000967). <italic>C. elegans</italic> provides a good test case for assembly methods, because of the completeness of its reference genome and reasonable size of 100 Mb. The third data set is one of the libraries provided in the GAGE benchmark, human chromosome 14 [<xref ref-type="bibr" rid="pone.0202355.ref020">20</xref>]. The data is available at GAGE web page (<ext-link ext-link-type="uri" xlink:href="http://gage.cbcb.umd.edu/data/Hg_chr14/Data.original/frag_1.fastq.gz" xlink:type="simple">http://gage.cbcb.umd.edu/data/Hg_chr14/Data.original/frag_1.fastq.gz</ext-link> and <ext-link ext-link-type="uri" xlink:href="http://gage.cbcb.umd.edu/data/Hg_chr14/Data.original/frag_2.fastq.gz" xlink:type="simple">http://gage.cbcb.umd.edu/data/Hg_chr14/Data.original/frag_2.fastq.gz</ext-link>). The length of chromosome 14 is estimated to be 107 Mb; however, due to a large gap of unknown nucleotides (N) at the beginning of the sequence, its effective length is approximately 90 Mb.</p>
<p>All the data sets contain paired-end read libraries of small insert size. The data were preprocessed before the assembly process. Illumina specific adapters were clipped. Reads containing ‘N’ or not mapping to the reference genome were removed from the libraries. Moreover, the reads were trimmed and filtered out, leaving those of the minimum average quality value of 30 along 60 consecutive nucleotides for <italic>C. elegans</italic>. Those values for <italic>H. sapiens</italic> were 20 along 30 nucleotides, and 30 along 60 for <italic>C</italic>. Microthrix. The summary of the read libraries and the size of the reference genomes are presented in <xref ref-type="table" rid="pone.0202355.t001">Table 1</xref>.</p>
<table-wrap id="pone.0202355.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.t001</object-id>
<label>Table 1</label>
<caption>
<title>Characteristics of paired-end data sets of <italic>C</italic>. Microthrix parvicella strain Bio17-1, <italic>C. elegans</italic> and <italic>Homo sapiens</italic> after the preprocessing of raw reads with the adapter and low-quality trimming.</title>
<p>* corresponds to the depth of coverage calculated for the length of the chromosome without a large gap of ‘N’.</p>
</caption>
<alternatives>
<graphic id="pone.0202355.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.t001" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">genome</th>
<th align="center"><italic>C</italic>. Microthrix<break/>13 scaffolds</th>
<th align="center"><italic>C</italic>. <italic>elegans</italic><break/>7 chromosomes</th>
<th align="center"><italic>H</italic>. <italic>sapiens</italic><break/>chromosome 14</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">species</td>
<td align="center">bacteria</td>
<td align="center">nematode</td>
<td align="center">mammal</td>
</tr>
<tr>
<td align="left">sequence length</td>
<td align="center">4,202,850 bp</td>
<td align="center">100,267,633 bp</td>
<td align="center">107,043,718 bp</td>
</tr>
<tr>
<td align="left">sequencer</td>
<td align="center">Illumina GA II</td>
<td align="center">Illumina GA IIx</td>
<td align="center">Illumina HiSeq 2000</td>
</tr>
<tr>
<td align="left">avg. read length</td>
<td align="center">97 bp</td>
<td align="center">109 bp</td>
<td align="center">100 bp</td>
</tr>
<tr>
<td align="left">no. of read pairs</td>
<td align="center">2,463,704</td>
<td align="center">30,436,661</td>
<td align="center">12,015,343</td>
</tr>
<tr>
<td align="left">avg. depth of cov.</td>
<td align="center">113</td>
<td align="center">66</td>
<td align="center">26*</td>
</tr>
<tr>
<td align="left">avg. insert size</td>
<td align="center">312 bp</td>
<td align="center">232 bp</td>
<td align="center">159 bp</td>
</tr>
<tr>
<td align="left">st. dev. of insert size</td>
<td align="center">36 bp</td>
<td align="center">56 bp</td>
<td align="center">18 bp</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
</sec>
<sec id="sec006">
<title>Evaluation metrics</title>
<p>Assembled sequences cannot be reliably evaluated with a single measure. There are a few complementary measures that need to be taken into account in the process of assembly method assessment. In the comparison, we chose the golden standard tool QUAST [<xref ref-type="bibr" rid="pone.0202355.ref030">30</xref>], which comes with a set of well-established metrics for the assembly problem. Genome fraction is one of the most important metrics here. It reveals the information on how much of the genome is covered by the provided contigs. The closer this value is to 100%, the greater number of reference nucleotides can be reconstructed from the contigs. The next relevant metric is the duplication ratio. It can be perceived, to some extent, as an orthogonal quantity to genome fraction. Duplication ratio helps to illustrate the redundancy of the information in contigs. Unfortunately, it does not take into account the repetitiveness of the genome itself, which may lead to an unjustified penalization of longer contigs just because they may cover alternative paths. One can view the assembly from yet another perspective by comparing the length of the largest alignment. Long continuous sequences are valuable in biological analysis. A similar rationale stands behind the NG50 and NGA50 metrics; however, they provide more comprehensive information not only from a single contig but also by being an aggregation from a number of longest ones. NG50 determines the length <italic>c</italic> of the longest contig that together with all the other contigs longer than <italic>c</italic> constitute, cumulatively, at least 50% of the genome length. The same applies to NGA50. This one, however, takes into account only these contigs that are successfully mapped to the reference genome. All the above metrics reward the maximization of the contig lengths. However, if we only try to extend contigs too heavily, we may end up with sequences too distinct from the target genome. One of the most important metrics exposing such errors is the misassembled contig length. It counts the length of all reported contigs that cannot be mapped continuously to the reference genome. In the evaluation of the assembly results we set the maximum misassembled contig length as 1 percent of the reference genome length. The methods having greater misassembled length were not considered in the scaffolding phase. It is noteworthy that QUAST filters out too short contigs, considering them as relatively uninformative, in our tests, we set the contig limit to 250 bases. The detailed summary of all the used metrics can be found at QUAST manual page (<ext-link ext-link-type="uri" xlink:href="http://quast.bioinf.spbau.ru/manual.html" xlink:type="simple">http://quast.bioinf.spbau.ru/manual.html</ext-link>). The heatmap presented in <xref ref-type="table" rid="pone.0202355.t002">Table 2</xref> is derived directly from QUAST.</p>
<table-wrap id="pone.0202355.t002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.t002</object-id>
<label>Table 2</label>
<caption>
<title>Assemblies obtained for three data sets: <italic>C</italic>. Microthrix, <italic>C. elegans</italic>, and human chromosome 14 (metrics calculated by QUAST).</title>
</caption>
<alternatives>
<graphic id="pone.0202355.t002g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.t002" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Genome statistics</th>
<th align="center">GRASShopPER</th>
<th align="center">Celera</th>
<th align="center">Platanus</th>
<th align="center">SGA</th>
<th align="center">SOAPdenovo2</th>
<th align="center">Velvet</th>
<th align="center">SPAdes</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center" colspan="8">Data set of Candidatus Microthrix parvicella strain Bio17-1</td>
</tr>
<tr>
<td align="left">Genome fraction (%)</td>
<td align="right" style="background-color:#F1F1FD">98.73</td>
<td align="right" style="background-color:#E61919">89.21</td>
<td align="right" style="background-color:#FEFAFA">98.38</td>
<td align="right" style="background-color:#EDEDFD">98.82</td>
<td align="right">98.52</td>
<td align="right" style="background-color:#FBDFDF">97.86</td>
<td align="right" style="background-color:#E3E3FC">98.96</td>
</tr>
<tr>
<td align="left">Duplication ratio</td>
<td align="right" style="background-color:#EB4747">1.006</td>
<td align="right">1.002</td>
<td align="right" style="background-color:#EB4747">1.017</td>
<td align="right">1.002</td>
<td align="right" style="background-color:#DADAFB">1.001</td>
<td align="right" style="background-color:#B6B6F7">1.000</td>
<td align="right" style="background-color:#DADAFB">1.001</td>
</tr>
<tr>
<td align="left">Largest alignment</td>
<td align="right" style="background-color:#F1F1FD">126,696</td>
<td align="right" style="background-color:#FBDFDF">50,960</td>
<td align="right" style="background-color:#FAD1D1">25,116</td>
<td align="right" style="background-color:#FEFAFA">101,782</td>
<td align="right">107,154</td>
<td align="right" style="background-color:#D6D6FA">166,835</td>
<td align="right" style="background-color:#5E5EED">740,450</td>
</tr>
<tr>
<td align="left">Total aligned length</td>
<td align="right" style="background-color:#F1F1FD">4,173,839</td>
<td align="right" style="background-color:#E61919">3,755,338</td>
<td align="right" style="background-color:#CDCDF9">4,203,934</td>
<td align="right">4,161,932</td>
<td align="right" style="background-color:#FDF1F1">4,145,584</td>
<td align="right" style="background-color:#FBDADA">4,113,131</td>
<td align="right">4,161,980</td>
</tr>
<tr>
<td align="left">NG50</td>
<td align="right">33,570</td>
<td align="right" style="background-color:#FBDADA">11,255</td>
<td align="right" style="background-color:#FAD1D1">5,286</td>
<td align="right">32,697</td>
<td align="right" style="background-color:#FAFAFE">34,653</td>
<td align="right" style="background-color:#5E5EED">78,563</td>
<td align="right" style="background-color:#5E5EED">156,137</td>
</tr>
<tr>
<td align="left">NG75</td>
<td align="right" style="background-color:#FEFAFA">16,714</td>
<td align="right" style="background-color:#FBDADA">5,614</td>
<td align="right" style="background-color:#FAD6D6">2,889</td>
<td align="right" style="background-color:#FAFAFE">18,691</td>
<td align="right">17,879</td>
<td align="right" style="background-color:#5E5EED">39,191</td>
<td align="right" style="background-color:#5E5EED">104,295</td>
</tr>
<tr>
<td align="left">NGA50</td>
<td align="right">33,566</td>
<td align="right" style="background-color:#FBDADA">11,013</td>
<td align="right" style="background-color:#FAD1D1">5,281</td>
<td align="right">32,697</td>
<td align="right" style="background-color:#FAFAFE">34,653</td>
<td align="right" style="background-color:#5E5EED">77,856</td>
<td align="right" style="background-color:#5E5EED">151,220</td>
</tr>
<tr>
<td align="left">NGA75</td>
<td align="right" style="background-color:#FEFAFA">16,712</td>
<td align="right" style="background-color:#FBDADA">5,528</td>
<td align="right" style="background-color:#FAD6D6">2,886</td>
<td align="right" style="background-color:#FAFAFE">18,691</td>
<td align="right">17,879</td>
<td align="right" style="background-color:#5E5EED">39,191</td>
<td align="right" style="background-color:#5E5EED">88,932</td>
</tr>
<tr>
<td align="left"># misassembled contigs (length)</td>
<td align="right" style="background-color:#DFDFFB">4 (11 kb)</td>
<td align="right">4 (32 kb)</td>
<td align="right" style="background-color:#D6D6FA">1 (6 kb)</td>
<td align="right" style="background-color:#FEF6F6">3 (37 kb)</td>
<td align="right">1 (31 kb)</td>
<td align="right" style="background-color:#EB4747">6 (330 kb)</td>
<td align="right" style="background-color:#EB4747">5 (370 kb)</td>
</tr>
<tr>
<td align="left">no. contigs (&gt; 0 bp)</td>
<td align="right">439</td>
<td align="right">493</td>
<td align="right">2,107</td>
<td align="right">668</td>
<td align="right">949</td>
<td align="right">103</td>
<td align="right">1,297</td>
</tr>
<tr>
<td align="left">no. contigs (≥250 bp)</td>
<td align="right">336</td>
<td align="right">449</td>
<td align="right">1,395</td>
<td align="right">257</td>
<td align="right">267</td>
<td align="right">103</td>
<td align="right">808</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 1 kb)</td>
<td align="right">254</td>
<td align="right">424</td>
<td align="right">966</td>
<td align="right">215</td>
<td align="right">220</td>
<td align="right">103</td>
<td align="right">64</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 5 kb)</td>
<td align="right">159</td>
<td align="right">256</td>
<td align="right">257</td>
<td align="right">161</td>
<td align="right">157</td>
<td align="right">88</td>
<td align="right">49</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 10 kb)</td>
<td align="right">112</td>
<td align="right">127</td>
<td align="right">66</td>
<td align="right">118</td>
<td align="right">115</td>
<td align="right">75</td>
<td align="right">44</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 25 kb)</td>
<td align="right">57</td>
<td align="right">21</td>
<td align="right">1</td>
<td align="right">56</td>
<td align="right">54</td>
<td align="right">51</td>
<td align="right">30</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 50 kb)</td>
<td align="right">19</td>
<td align="right">1</td>
<td align="right">0</td>
<td align="right">20</td>
<td align="right">21</td>
<td align="right">29</td>
<td align="right">23</td>
</tr>
<tr>
<td align="center" colspan="8">Data set of Caenorhabditis elegans</td>
</tr>
<tr>
<td align="left">Genome fraction (%)</td>
<td align="right" style="background-color:#EDEDFD">95.47</td>
<td align="right" style="background-color:#F8BFBF">78.81</td>
<td align="right" style="background-color:#FDEDED">88.39</td>
<td align="right" style="background-color:#F6F6FE">93.92</td>
<td align="right">92.58</td>
<td align="right" style="background-color:#FBDFDF">85.61</td>
<td align="right" style="background-color:#F1F1FD">94.81</td>
</tr>
<tr>
<td align="left">Duplication ratio</td>
<td align="right" style="background-color:#EB4747">1.019</td>
<td align="right" style="background-color:#EB4747">1.020</td>
<td align="right">1.004</td>
<td align="right" style="background-color:#FBDADA">1.008</td>
<td align="right">1.004</td>
<td align="right">1.004</td>
<td align="right">1.004</td>
</tr>
<tr>
<td align="left">Largest alignment</td>
<td align="right" style="background-color:#DADAFB">96,261</td>
<td align="right" style="background-color:#F7BABA">33,627</td>
<td align="right" style="background-color:#FCE8E8">63,884</td>
<td align="right">80,404</td>
<td align="right" style="background-color:#F6F6FE">83,885</td>
<td align="right" style="background-color:#FBDFDF">58,073</td>
<td align="right" style="background-color:#5E5EED">180,696</td>
</tr>
<tr>
<td align="left">Total aligned length</td>
<td align="right" style="background-color:#E3E3FC">97,504,793</td>
<td align="right" style="background-color:#F9C8C8">80,514,782</td>
<td align="right" style="background-color:#FDEDED">88,972,062</td>
<td align="right" style="background-color:#F6F6FE">94,936,888</td>
<td align="right">93,192,365</td>
<td align="right" style="background-color:#FBDFDF">85,981,341</td>
<td align="right" style="background-color:#F1F1FD">95,338,850</td>
</tr>
<tr>
<td align="left">NG50</td>
<td align="right" style="background-color:#E8E8FC">7,772</td>
<td align="right" style="background-color:#FBDADA">3,982</td>
<td align="right" style="background-color:#FBDFDF">4,157</td>
<td align="right">6,618</td>
<td align="right" style="background-color:#FEFAFA">6,364</td>
<td align="right" style="background-color:#F6F6FE">7,000</td>
<td align="right" style="background-color:#5E5EED">20,063</td>
</tr>
<tr>
<td align="left">NG75</td>
<td align="right" style="background-color:#F6F6FE">2,793</td>
<td align="right" style="background-color:#FBDFDF">1,789</td>
<td align="right" style="background-color:#F9CDCD">1,402</td>
<td align="right">2,665</td>
<td align="right" style="background-color:#FEF6F6">2,486</td>
<td align="right" style="background-color:#EDEDFD">3,018</td>
<td align="right" style="background-color:#5E5EED">8,732</td>
</tr>
<tr>
<td align="left">NGA50</td>
<td align="right" style="background-color:#E3E3FC">7,771</td>
<td align="right" style="background-color:#FBDADA">3,903</td>
<td align="right" style="background-color:#FBDADA">4,088</td>
<td align="right">6,581</td>
<td align="right" style="background-color:#FEFAFA">6,313</td>
<td align="right" style="background-color:#FAFAFE">6,736</td>
<td align="right" style="background-color:#5E5EED">18,679</td>
</tr>
<tr>
<td align="left">NGA75</td>
<td align="right" style="background-color:#F1F1FD">2,783</td>
<td align="right" style="background-color:#FBDADA">1,700</td>
<td align="right" style="background-color:#F9C8C8">1,277</td>
<td align="right">2,557</td>
<td align="right" style="background-color:#FEF6F6">2,325</td>
<td align="right">2,576</td>
<td align="right" style="background-color:#5E5EED">7,495</td>
</tr>
<tr>
<td align="left"># misassembled contigs (length)</td>
<td align="right">142 (177 kb)</td>
<td align="right" style="background-color:#FBDADA">524 (2402 kb)</td>
<td align="right" style="background-color:#FAFAFE">5 (47 kb)</td>
<td align="right">55 (215 kb)</td>
<td align="right" style="background-color:#FAFAFE">12 (58 kb)</td>
<td align="right" style="background-color:#FBDADA">337 (2229 kb)</td>
<td align="right" style="background-color:#EB4747">475 (8519 kb)</td>
</tr>
<tr>
<td align="left">no. contigs (&gt; 0 bp)</td>
<td align="right">82,283</td>
<td align="right">21,503</td>
<td align="right">233,557</td>
<td align="right">150,360</td>
<td align="right">160,015</td>
<td align="right">17,510</td>
<td align="right">52,752</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 250 bp)</td>
<td align="right">38,336</td>
<td align="right">20,766</td>
<td align="right">42,224</td>
<td align="right">34,185</td>
<td align="right">33,847</td>
<td align="right">17,510</td>
<td align="right">13,779</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 1 kb)</td>
<td align="right">15,971</td>
<td align="right">20,220</td>
<td align="right">20,742</td>
<td align="right">18,911</td>
<td align="right">19,006</td>
<td align="right">17,510</td>
<td align="right">9,320</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 5 kb)</td>
<td align="right">5,108</td>
<td align="right">4,912</td>
<td align="right">4,328</td>
<td align="right">5,246</td>
<td align="right">5,100</td>
<td align="right">5,897</td>
<td align="right">4,915</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 10 kb)</td>
<td align="right">2,247</td>
<td align="right">1,108</td>
<td align="right">1,572</td>
<td align="right">2,122</td>
<td align="right">2,004</td>
<td align="right">2,278</td>
<td align="right">2,866</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 25 kb)</td>
<td align="right">401</td>
<td align="right">17</td>
<td align="right">167</td>
<td align="right">287</td>
<td align="right">307</td>
<td align="right">202</td>
<td align="right">946</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 50 kb)</td>
<td align="right">39</td>
<td align="right">0</td>
<td align="right">6</td>
<td align="right">14</td>
<td align="right">17</td>
<td align="right">5</td>
<td align="right">244</td>
</tr>
<tr>
<td align="center" colspan="8">Data set of human chromosome 14</td>
</tr>
<tr>
<td align="left">Genome fraction (%)</td>
<td align="right" style="background-color:#F1F1FD">92.28</td>
<td align="right" style="background-color:#FCE3E3">75.96</td>
<td align="right" style="background-color:#FBDADA">71.80</td>
<td align="right">88.30</td>
<td align="right" style="background-color:#FAFAFE">88.99</td>
<td align="right" style="background-color:#FBDADA">72.33</td>
<td align="right" style="background-color:#EDEDFD">93.53</td>
</tr>
<tr>
<td align="left">Duplication ratio</td>
<td align="right" style="background-color:#EB4747">1.038</td>
<td align="right" style="background-color:#DADAFB">1.005</td>
<td align="right" style="background-color:#DADAFB">1.005</td>
<td align="right">1.007</td>
<td align="right">1.007</td>
<td align="right">1.007</td>
<td align="right" style="background-color:#EB4747">1.011</td>
</tr>
<tr>
<td align="left">Largest alignment</td>
<td align="right">38,022</td>
<td align="right" style="background-color:#F6F6FE">39,634</td>
<td align="right" style="background-color:#F5A8A8">13,122</td>
<td align="right" style="background-color:#FCE3E3">30,294</td>
<td align="right" style="background-color:#FBDFDF">28,332</td>
<td align="right" style="background-color:#EDEDFD">41,564</td>
<td align="right" style="background-color:#5E5EED">58,597</td>
</tr>
<tr>
<td align="left">Total aligned length</td>
<td align="right" style="background-color:#E8E8FC">86,648,380</td>
<td align="right" style="background-color:#FCE3E3">69,025,599</td>
<td align="right" style="background-color:#FBDADA">65,344,557</td>
<td align="right">80,527,423</td>
<td align="right" style="background-color:#FAFAFE">81,146,875</td>
<td align="right" style="background-color:#FBDADA">65,606,013</td>
<td align="right" style="background-color:#EDEDFD">85,602,007</td>
</tr>
<tr>
<td align="left">NG50</td>
<td align="right" style="background-color:#FCE8E8">2,500</td>
<td align="right" style="background-color:#E8E8FC">2,891</td>
<td align="right" style="background-color:#E61919">782</td>
<td align="right" style="background-color:#F1F1FD">2,909</td>
<td align="right" style="background-color:#FBDFDF">2,418</td>
<td align="right">2,628</td>
<td align="right" style="background-color:#5E5EED">4,755</td>
</tr>
<tr>
<td align="left">NG75</td>
<td align="right" style="background-color:#FCE3E3">1,020</td>
<td align="right">1,154</td>
<td align="right">-</td>
<td align="right" style="background-color:#F1F1FD">1,207</td>
<td align="right" style="background-color:#FBDFDF">1,000</td>
<td align="right">-</td>
<td align="right" style="background-color:#5E5EED">2,260</td>
</tr>
<tr>
<td align="left">NGA50</td>
<td align="right" style="background-color:#FDF1F1">2,500</td>
<td align="right" style="background-color:#E8E8FC">2,891</td>
<td align="right" style="background-color:#E61919">782</td>
<td align="right" style="background-color:#E3E3FC">2,909</td>
<td align="right" style="background-color:#FCE8E8">2,418</td>
<td align="right">2,628</td>
<td align="right" style="background-color:#5E5EED">4,755</td>
</tr>
<tr>
<td align="left">NGA75</td>
<td align="right" style="background-color:#FDEDED">1,014</td>
<td align="right">1,077</td>
<td align="right">-</td>
<td align="right" style="background-color:#E3E3FC">1,202</td>
<td align="right" style="background-color:#FCE8E8">997</td>
<td align="right">-</td>
<td align="right" style="background-color:#5E5EED">2,204</td>
</tr>
<tr>
<td align="left"># misassembled contigs (length)</td>
<td align="right">123 (207 kb)</td>
<td align="right" style="background-color:#EB4747">1110 (5039 kb)</td>
<td align="right" style="background-color:#F6F6FE">0 (0 kb)</td>
<td align="right">51 (171 kb)</td>
<td align="right">17 (92 kb)</td>
<td align="right" style="background-color:#FBDADA">358 (1606 kb)</td>
<td align="right" style="background-color:#F6ACAC">559 (3601 kb)</td>
</tr>
<tr>
<td align="left">no. contigs (&gt; 0 bp)</td>
<td align="right">81,314</td>
<td align="right">21,003</td>
<td align="right">574,441</td>
<td align="right">97,520</td>
<td align="right">239,297</td>
<td align="right">21,153</td>
<td align="right">62,461</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 250 bp)</td>
<td align="right">64,638</td>
<td align="right">20,930</td>
<td align="right">72,766</td>
<td align="right">40,353</td>
<td align="right">48,947</td>
<td align="right">21,153</td>
<td align="right">29,935</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 1 kb)</td>
<td align="right">24,310</td>
<td align="right">20,880</td>
<td align="right">21,035</td>
<td align="right">22,930</td>
<td align="right">24,237</td>
<td align="right">21,153</td>
<td align="right">19,521</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 5 kb)</td>
<td align="right">2,988</td>
<td align="right">3,607</td>
<td align="right">259</td>
<td align="right">3,460</td>
<td align="right">2,830</td>
<td align="right">3,398</td>
<td align="right">4,796</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 10 kb)</td>
<td align="right">468</td>
<td align="right">559</td>
<td align="right">1</td>
<td align="right">525</td>
<td align="right">390</td>
<td align="right">651</td>
<td align="right">1,354</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 25 kb)</td>
<td align="right">7</td>
<td align="right">4</td>
<td align="right">0</td>
<td align="right">12</td>
<td align="right">1</td>
<td align="right">10</td>
<td align="right">105</td>
</tr>
<tr>
<td align="left">no. contigs (≥ 50 kb)</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="right">0</td>
<td align="right">1</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
</sec>
<sec id="sec007">
<title>Assembly of the Microthrix bacteria</title>
<p>
<xref ref-type="table" rid="pone.0202355.t002">Table 2</xref> presents the comparison of assemblies obtained for the three data sets. In the first part of the table, the results on the Microthrix bacteria data set are shown. The first observation is that Celera results seem to be inferior with reference to the three collectively relevant metrics: genome fraction, largest alignment, and NG50. On the other hand, it generates the largest number of contigs that are longer than 10 kb. One could also notice that SPAdes produces the longest contigs, which is reflected in both largest alignment and NGA50. However, this payoff appears to be at the cost of quality—SPAdes has the highest number of misassembled contigs, having significantly larger cumulative length (e.g. 10 times larger than SGA has). Velvet obtained the second longest aligned contigs and NGA50 value. Similarily to SPAdes, contig length bloat induced radical increase of observed misassembly rate in comparison to other methods. Another conclusion can be drawn from Platanus results. Basing on relatively low NG50 and extremely short largest alignment, one can get the impression that its contigs are highly shredded. Still, the results of Platanus are interesting, because of a decent genome fraction and high quality results with a very low misassembly rate. SGA, SOAPdenovo2, and GRASShopPER produce results with quite similar reasonable values on all considered metrics. They all cover nearly 99% of the reference genome. The largest alignment of these methods exceeds 100 kb.</p>
<p>Some of these remarks can also be observed in <xref ref-type="fig" rid="pone.0202355.g002">Fig 2A and 2B</xref>. The first figure exposes correlation between the distribution of the NG(X) lengths and the genome coverage, while the second one is a function of the genome coverage and the length of misassembled contigs for each assembler. The NG(X) is a length of the contig that combined with all longer contigs covers X% of the genome. For example, Platanus covers 20% of the genome with contigs of length 10 kb or longer, while for SGA, SOAPdenovo2, and GRASShopPER the contig length is almost 100 kb. Each line drops down to zero on the right side of the graph in the place corresponding to the aggregated length of all contigs. The rugged lines in this graph are due to the fact that the longest contigs cover a significant percentage of this short genome, which is expressed as the steps, more visible on the left side of the graph where larger contigs are placed. The figure is informative, but one should not evaluate the methods based only on it. Otherwise, one would give the highest score to SPAdes and the lowest to Platanus. What we observed previously in <xref ref-type="table" rid="pone.0202355.t002">Table 2</xref>, by looking at the misassembly rate, was the opposite. Also the second figure (<xref ref-type="fig" rid="pone.0202355.g002">Fig 2B</xref>) confirms that misassembled contigs highly impact on the genome coverage. The X axis stands for the misassembled contig lengths that are taken into account in calculating the genome coverage. Zero means there no tolerance for misassemblies—this corresponds to the rigorous situation when each partly valuable information concealed in a contig should not participate in the genome coverage. On the right-hand side of the chart we restricted the misassembled contig length to 1 percent of the genome length, assuming that greater values lead to too low quality results. The observable steps in the chart originate from the length of misassembled contigs, the longer the contig, the longer the step is. On the other hand, the height of the step depends on the length of the reference genome fragment it covers. For example, the longest misassembled contig produced by SGA is almost of 0.6% of genome length, that is why the first step starts around 0.6. Platanus has very low misassembly rate, and its line ends at approximately 0.15% of the genome length. SPAdes and Velvet output very high misassembly rate, approximately 8% of the genome length, and the longest misassembled contig exceeds 1%. This is the reason why we observe just the straight lines for the two methods without any steps. Only three methods: GRASShopPER, SGA and SOAPdenovo2, which are in the middle of the NG ranking, yet not superior for any measure, provide a balanced trade-off between contigs/NG lengths and the assembly quality/genome fraction.</p>
<fig id="pone.0202355.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.g002</object-id>
<label>Fig 2</label>
<caption>
<title>Values of NG(X) and the genome coverage as a function of the misassembled contigs length.</title>
<p>(A) Values of NG(X) for <italic>C</italic>. Microthrix data set. (B) Genome coverage and misassemblies for <italic>C</italic>. Microthrix data set. (C) Values of NG(X) for <italic>C. elegans</italic> data set. (D) Genome coverage and misassemblies for <italic>C. elegans</italic> data set. (E) Values of NG(X) for human data set. (F) Genome coverage and misassemblies for human data set.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.g002" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec008">
<title>Assembly of the nematode <italic>C. elegans</italic></title>
<p>The genome of Microthrix is relatively small. In this context, the <italic>C. elegans</italic> data set represents a more challenging test case (results are presented in the second part of <xref ref-type="table" rid="pone.0202355.t002">Table 2</xref>). It is quite obvious that a longer genome entails a longer overall length of misassemblies; however, results of SPAdes, Celera and Velvet in this matter are a bit disturbing. SPAdes obtained misassembled contigs of length over 8.5 Mb, while both, Celera and Velvet, produced bad contigs of cumulative length exceeding 2 Mb, which for the genome consisting of approximately 100 Mb is considerably below expectations. Even bigger disappointment comes from the Celera contigs genome fraction, which together with its outlying result on the largest alignment and NG50 makes Celera inferior on this data set. The same does not apply to Velvet, which, although also has relatively low genome fraction, provides a satisfactory NG50 value. On contrary, SPAdes outputs the largest alignment, the highest NG50 value, and second best genome fraction. Platanus acts here a bit unexpectedly, as it does not cover the genome to a large degree (only 88.4%). On the other hand, it has remarkably low misassembled contig length. Again, it is hard to find the favorite between SGA and SOAPdenovo2. They both cover the genome well and produce quite long contigs, while SOAPdenovo2 has a bit better quality. This time GRASShopPER beats all its opponents in the genome fraction, keeping high values of largest alignment, NG* statistics, and the number of contigs longer than 50 kb. However, the method results in a little higher rate of duplicated information inside contigs. The distribution of NG lengths presented in <xref ref-type="fig" rid="pone.0202355.g002">Fig 2C</xref> confirms that, although, SPAdes outperforms other assemblers in NG(X) metrics due to forcing to contig length bloat, it suffers from poor misassemblies metrics (<xref ref-type="fig" rid="pone.0202355.g002">Fig 2D</xref>) and thus provides results of a lower quality. Apart from SPAdes, also Velvet and Celera give a high misassembly rate, which drastically decreases genome coverage when considering only good quality contigs.</p>
</sec>
<sec id="sec009">
<title>Assembly of human chromosome 14</title>
<p>The last tests were performed to provide reliable quality assessment of all the methods on an even more challenging data set, the 14th human chromosome. The tests confirmed that Platanus scatters its contigs to a large degree, at the same time yielding an incredible quality result without a single misassembled contig. The low genome fraction rate might be due to the fact that only contigs longer than 250 bp are taken into account by QUAST. In the case of Platanus, only 13% of produced contigs (574 k) are longer than the minimum meaningful length. The second method that produced a high number of very short contigs was SOAPdenovo2, for which only 20% of contigs were longer than 250 bp.</p>
<p>The data set of human chromosome 14 has the lowest depth of coverage among the three tested sets. Most likely, this is the reason for the smallest genome fraction and NG values, although the lengths of human chromosome 14 and of the <italic>C. elegans</italic> genome are similar. Nevertheless, SPAdes and GRASShopPER have become a leader, covering 93.5% and 92.3% of the genome, respecitively, 4-5% more than the SGA and SOAPdenovo2 assemblers, and approximately 20% more than the other three methods. This can be easily observed in <xref ref-type="fig" rid="pone.0202355.g002">Fig 2E</xref>, by the sudden drop down to zero for NG lengths, much before the GRASShopPER method. Among the assemblers covering more than 80% of the chromosome, SPAdes and SGA are outstanding in NG values, although SPAdes achieved this high rank at the cost of a very high misassembled contig rate (3.4% of the chromosome length). NG75 values could not be computed for Platanus and Velvet, as their genome coverage is below 75%. We can observe that the longest alignments, observed for SPAdes, Velvet and Celera, strongly affect the length of misassembled contigs (<xref ref-type="table" rid="pone.0202355.t002">Table 2</xref> and <xref ref-type="fig" rid="pone.0202355.g002">Fig 2F</xref>). In this context, GRASShopPER is the best assembler that does not exceed with its misassembled contigs 1% of the chromosome length.</p>
<p>The three data sets provide a wide variety of benchmark test cases. The libraries vary in the reference genome length and coverage. We could see that the methods which are superior in one or two metrics are the worst in the others. Some of the methods were working well for one of the data sets (e.g., Velvet for the high coverage data set of the Microthrix bacteria) but resulted in much lower genome fraction for other sets. Moreover, none of the methods could be seen as the worst in terms of one criterion in all tested cases. All of the metrics provided by QUAST are presented in <xref ref-type="supplementary-material" rid="pone.0202355.s001">S1</xref>–<xref ref-type="supplementary-material" rid="pone.0202355.s003">S3</xref> Tables.</p>
<p>We selected two assemblers that achieved high genome coverage and behaved reasonably well on other metrics (where misassembled contig length did not exceed 1% of the genome length) across the tested instances, SGA and SOAPdenovo2. These two methods were further compared with GRASShopPER in the scaffolding phase.</p>
</sec>
<sec id="sec010">
<title>Scaffolding</title>
<p>In the last phase of the process of reconstructing a genome, scaffolding, contigs may be further joined on the basis of paired-end reads. We used freely accessible scaffolding tools [<xref ref-type="bibr" rid="pone.0202355.ref031">31</xref>], and chose two of them that produce the best results for the selected assemblers: SSPACE [<xref ref-type="bibr" rid="pone.0202355.ref032">32</xref>] and SOAPdenovo2 scaffolding module. SSPACE is a greedy approach. It starts from extending the longest contig as long as there are some read pairs supporting the extension. Next, it continues with the remaining largest contig. SOAPdenovo2 is a topology-based approach that establishes a relationship between the contigs. Heterozygous contigs are detected and only the contigs with higher depth of coverage remain in the scaffolds, which reduce the impact of heterozygosity on the scaffold lengths.</p>
<p>In <xref ref-type="table" rid="pone.0202355.t003">Table 3</xref>, we provide the results for the best combinations of assembler and scaffolder. The remaining results are accessible in <xref ref-type="supplementary-material" rid="pone.0202355.s004">S4</xref>–<xref ref-type="supplementary-material" rid="pone.0202355.s006">S6</xref> Tables. While choosing the best scaffolder for each assembler, we were not taking into account just a single metric. We wanted the scaffolds to be long and of high quality, i.e., not providing a large amount of misassemblies. Hence, the selected scaffolder is not always the same for a given assembler for the tested data sets.</p>
<table-wrap id="pone.0202355.t003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.t003</object-id>
<label>Table 3</label>
<caption>
<title>Scaffolding of the three data sets for the assemblers GRASShopPER, SOAPdenovo2, and SGA with the best combination of scaffolders SSPACE and SOAPdenovo2 (metrics calculated by QUAST).</title>
</caption>
<alternatives>
<graphic id="pone.0202355.t003g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.t003" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Assembler</th>
<th align="left">Scaffolder</th>
<th align="left">Genome fraction (%)</th>
<th align="left">Largest alignment</th>
<th align="left">Total aligned length</th>
<th align="left">NG50</th>
<th align="left">NG75</th>
<th align="left">Misassembled scaffolds (length)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left" colspan="8">Data set of <italic>Candidatus</italic> Microthrix parvicella strain Bio17-1</td>
</tr>
<tr>
<td align="left">GRASShopPER</td>
<td align="left">SSPACE</td>
<td align="right">98.602</td>
<td align="right"><bold>126,696</bold></td>
<td align="right"><bold>4,165,836</bold></td>
<td align="right">33,570</td>
<td align="right">16,714</td>
<td align="right"><bold>4 (11 kb)</bold></td>
</tr>
<tr>
<td align="left">SGA</td>
<td align="left">SSPACE</td>
<td align="right"><bold>98.819</bold></td>
<td align="right">101,782</td>
<td align="right">4,161,932</td>
<td align="right">32,697</td>
<td align="right"><bold>18,691</bold></td>
<td align="right">3 (37 kb)</td>
</tr>
<tr>
<td align="left">SOAPdenovo2</td>
<td align="left">SOAPdenovo2</td>
<td align="right">98.522</td>
<td align="right">107,154</td>
<td align="right">4,145,584</td>
<td align="right"><bold>34,653</bold></td>
<td align="right">17,879</td>
<td align="right">1 (31 kb)</td>
</tr>
<tr>
<td align="left" colspan="8">Data set of <italic>Caenorhabditis elegans</italic></td>
</tr>
<tr>
<td align="left">GRASShopPER</td>
<td align="left">SOAPdenovo2</td>
<td align="right"><bold>95.357</bold></td>
<td align="right"><bold>126,121</bold></td>
<td align="right"><bold>97,363,265</bold></td>
<td align="right">11,352</td>
<td align="right">4306</td>
<td align="right">461 (1,2 Mb)</td>
</tr>
<tr>
<td align="left">SGA</td>
<td align="left">SOAPdenovo2</td>
<td align="right">94.037</td>
<td align="right">105,248</td>
<td align="right">94,990,734</td>
<td align="right">10,187</td>
<td align="right">4149</td>
<td align="right">443 (1,2 Mb)</td>
</tr>
<tr>
<td align="left">SOAPdenovo2</td>
<td align="left">SSPACE</td>
<td align="right">93.549</td>
<td align="right">119,149</td>
<td align="right">93,929,080</td>
<td align="right"><bold>12,859</bold></td>
<td align="right"><bold>4920</bold></td>
<td align="right"><bold>95 (838 kb)</bold></td>
</tr>
<tr>
<td align="left" colspan="8">Data set of human chromosome 14</td>
</tr>
<tr>
<td align="left">GRASShopPER</td>
<td align="left">SSPACE</td>
<td align="right"><bold>92.275</bold></td>
<td align="right"><bold>38,022</bold></td>
<td align="right"><bold>86,645,202</bold></td>
<td align="right">2500</td>
<td align="right">1020</td>
<td align="right">123 (207 kb)</td>
</tr>
<tr>
<td align="left">SGA</td>
<td align="left">SSPACE</td>
<td align="right">88.586</td>
<td align="right">35,224</td>
<td align="right">81,213,834</td>
<td align="right"><bold>3040</bold></td>
<td align="right"><bold>1289</bold></td>
<td align="right">114 (268 kb)</td>
</tr>
<tr>
<td align="left">SOAPdenovo2</td>
<td align="left">SOAPdenovo2</td>
<td align="right">89.582</td>
<td align="right">33,186</td>
<td align="right">81,612,904</td>
<td align="right">2894</td>
<td align="right">1206</td>
<td align="right"><bold>31 (130 kb)</bold></td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>In the tests of the scaffolding phase, we were using contigs produced by GRASShopPER with the postprocessing step switched on, which reduced the redundancy at the ends of contigs. The necessity of this additional step is required, because scaffolders do not take into account that the ends of contigs might overlap and align them one after another. This produces an extra few dozen of nucleotides repeated twice inside a scaffold. This issue is explained in detail in the Methods section.</p>
<p>A few selected metrics for the scaffolding results are presented in <xref ref-type="table" rid="pone.0202355.t003">Table 3</xref>, while the distribution of the number of scaffolds of a given length is presented in <xref ref-type="fig" rid="pone.0202355.g003">Fig 3A, 3B and 3C</xref>.</p>
<fig id="pone.0202355.g003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.g003</object-id>
<label>Fig 3</label>
<caption>
<title>Numbers of scaffolds.</title>
<p>(A) Number of scaffolds of a given length for <italic>C</italic>. Microthrix data set. (B) Number of scaffolds of a given length for <italic>C. elegans</italic> data set. (C) Number of scaffolds of a given length for human data set.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.g003" xlink:type="simple"/>
</fig>
<p>In the first part of <xref ref-type="table" rid="pone.0202355.t003">Table 3</xref>, the summary results of scaffolding for the <italic>C</italic>. Microthrix data set are given. Both scaffolders, SOAPdenovo2 and SSPACE, gave similar results (see <xref ref-type="supplementary-material" rid="pone.0202355.s004">S4 Table</xref>) for all assembly methods, which, additionally, were not very different from the original contigs. Genome coverage, NG statistics, and the largest alignment remained the same as for the input contigs (in the case of GRASShopPER, compare the contigs after the postprocessing step in <xref ref-type="supplementary-material" rid="pone.0202355.s004">S4 Table</xref>). The only difference was in reducing the number of very small contigs (&lt; 250 bp) in the case of the combination of the SOAPdenovo2 assembler and a scaffolder. These contigs were either merged into scaffold sequences, which could not be observed by the generalized statistics, or rejected by the scaffolder. The reason for the invariability of the results before and after the scaffolding phase might be the rather short genome length, 4 Mbp, and its division into 13 fragments, its low repetitiveness, and high coverage of the input reads. The assemblers have obtained contigs that were not further elongated by the scaffolders.</p>
<p>The second part of <xref ref-type="table" rid="pone.0202355.t003">Table 3</xref> and <xref ref-type="supplementary-material" rid="pone.0202355.s005">S5 Table</xref> provide the results of scaffolding for the <italic>C. elegans</italic> data set. In this case, the scaffolders have improved the results for every input contig set. The best combination of greatest NG values and smallest misassembled scaffold length was obtained for the SOAPdenovo2 assembler with the SSPACE scaffolder, although, the misassembly rate is much higher than for the assembly results (838 kb vs. 58 kb). Both GRASShopPER and SGA worked better with the SOAPdenovo2 scaffolder, obtaining NG50 lengths of 11 kb for GRASShopPER and 10 kb for SGA. The cumulative length of misassembled scaffold sequences reached the value 1.2 Mb for both methods. The postprocessing step for GRASShopPER, which cut the overlapping ends of the contigs, allowed reducing significantly the misassembled length from 3.6 Mb (see <xref ref-type="supplementary-material" rid="pone.0202355.s005">S5 Table</xref>). GRASShopPER again outperformed all the methods in the genome coverage and the aligned scaffold lengths.</p>
<p>The last part of <xref ref-type="table" rid="pone.0202355.t003">Table 3</xref> and <xref ref-type="supplementary-material" rid="pone.0202355.s006">S6 Table</xref> provide the comparison of scaffolding made for human chromosome 14. Scaffolders were not able to improve results of GRASShopPER. However, its highest rate of genome coverage and largest alignment is preserved. The greatest NG50 was achieved this time by the combination of the SGA assembler and the SSPACE scaffolder. It should be noticed that even though the lengths of the <italic>C. elegans</italic> genome and human chromosome 14 are similar, their statistics are very different. The NG50 scaffold length for <italic>C. elegans</italic> is approximately 11 kb, while for human it is hardly more than 3 kb in the best case. The human genome is more repetitive, and, in this specific data set, we had a much smaller depth of coverage than for <italic>C. elegans</italic>. Thus, there might be many more places with much lower read coverage, which prevents us from reconstructing longer contiguous sequences.</p>
</sec>
<sec id="sec011">
<title>Test environment</title>
<p>The computational tests were done in the Poznan Supercomputing and Networking Center on a cluster named moss, which is a part of the Polish Grid Infrastructure (PL-Grid). Moss provides six highly specialized nodes for heterogeneous computing, each equipped with two general purpose graphics processing units (GPGPUs), between 256 and 512 GB RAM, and two CPUs. Whenever possible, all the methods were run on one node with 16 cores. The parameters of all the methods used in the computational experiment are given in <xref ref-type="supplementary-material" rid="pone.0202355.s007">S1 Text</xref>.</p>
<p>Resources used in the assembly process of <italic>C</italic>. Microthrix, <italic>C</italic>.<italic>elegans</italic>, and <italic>H</italic>.<italic>sapiens</italic> chromosome 14 by GRASShopPER were 25 minutes/17 GB RAM in peak, 4579 minutes/335 GB RAM in peak, and 603 minutes/82 GB RAM in peak, respectively. For other assemblers, the time and memory requirements were (in peak, either for <italic>C. elegans</italic> or <italic>H. sapiens</italic> chr. 14): 2270 minutes/422 GB RAM for Celera, 519 minutes/65 GB RAM for SPAdes, 370 minutes/29 GB RAM for Velvet, 124 minutes/7 GB RAM for SGA, 76 minutes/15 GB RAM for Platanus, and 33 minutes/11 GB RAM for SOAPdenovo2.</p>
</sec>
</sec>
<sec id="sec012" sec-type="conclusions">
<title>Discussion</title>
<p>We are reporting on GRASShopPER, an overlap graph assembler employing GPUs, which uses information from paired-end reads for resolving repetitions in a genome sequence. GRASShopPER is based on the OLC approach, which does not lose information by decomposing input reads into <italic>k</italic>-mers, but, at the same time, is more time and memory demanding than the DBG approach. We use a very efficient GPU implementation of the reads alignment algorithm for calculating the scores and shifts on the arcs of the graph. We introduce a two-part fork detection strategy, which highly reduces misassemblies in the resulting contigs. The first part is carried out during the traversal of the graph. In the second part, a greedy hyper-heuristic finds undetected forks on the basis of paired-end read information.</p>
<p>The assemblies of the data sets of bacteria <italic>C</italic>. Microthrix, nematode <italic>C. elegans</italic>, and human chromosome 14, were evaluated with the golden standard tool QUAST. We observed that GRASShopPER produced contigs that covered the largest part of the genomes (metric ‘genome fraction’) and usually had a few percent more coverage than other methods (<xref ref-type="table" rid="pone.0202355.t002">Table 2</xref>). The largest difference was observed in the case of the data set of human chromosome 14 with the lowest depth of coverage, for which Platanus obtained even 20% less of the genome fraction coverage than our method. Among the tested assemblers, Velvet and Celera produced contigs with the lowest coverage and highest misassembly rate. On the other hand, both methods were superior on NG(X) length—Velvet for <italic>C</italic>. Microthrix and Celera for human chromosome 14 data set. SPAdes for all tested data sets output the longest alignments and the highest NG50 and NG75, but at the same time the quality of these contigs was very low—the assembler gives the greatest misassemblied contig lengths, reaching in total even 8.5% of the genome length. Platanus, and in some cases also SOAPdenovo2, produced a huge amount of contigs shorter than 250 bp, which was the minimum length threshold for QUAST, and thus were not considered in the statistics. This highly influenced the lower genome fraction of Platanus. However, one may wonder if the information given in 500 thousand contigs (in the case of the human data set), a little longer than the input reads, is of any value. The two methods, Velvet and Celera, output only (or mostly) contigs longer than 1 kb. This fact could be easily observed in <xref ref-type="fig" rid="pone.0202355.g002">Fig 2</xref>, which shows that at NG(X) equal to approximately 1 kb, there is a sudden drop of the line toward zero. The other three methods, GRASShopPER, SOAPdenovo2, and SGA, behave reasonably well for all considered statistics and for all tested data sets, providing high quality and long contigs that covered the largest part of the considered genomes.</p>
<p>The further step of scaffolding with the use of external tools SSPACE and SOAPdenovo2 revealed that only for the <italic>C. elegans</italic> data set the scaffolding tools were able to markedly improve the results by merging and lengthening the contigs. In the case of this data set, the SOAPdenovo2 assembler worked better with the SSPACE scaffolder, while GRASShopPER and SGA gave better results with the SOAPdenovo2 scaffolder. For the other data sets, with less depth of coverage, it was the opposite—GRASShopPER and SGA worked better with SSPACE scaffolder and SOAPdenovo2 assembler with its original scaffolder. Results obtained for all combinations of the tools are listed in <xref ref-type="supplementary-material" rid="pone.0202355.s004">S4</xref>–<xref ref-type="supplementary-material" rid="pone.0202355.s006">S6</xref> Tables.</p>
<p>Among the three best performing assemblers, SGA, SOAPdenovo2, and GRASShopPER, the latter one achieved the highest rates in the context of genome coverage and alignment length for <italic>C. elegans</italic> and human chromosome 14, with a moderate misassembly rate. For <italic>C</italic>. Microthrix, it keeps its position regarding the largest alignment, with the lowest misassembly rate, and shares the leadership on other metrics.</p>
<p>Although the new method presented in the article is not the most efficient among the tested assemblers with respect to memory and time usage, it represents the overlap-layout-consensus strategy, which is considered to be more accurate. Due to its precision, the OLC strategy requires more time and memory resources. It is especially noticeable in the graph construction step, where the method needs to remember reads on vertices and calculate the alignment of the pairs of reads to decide to what extent the reads overlap one another. Moreover, the method does not lose the information about reads continuity caused by the decomposition into shorter <italic>k</italic>-mers, as entire reads are stored in the graph vertices. This is particularly important in the case of repetitions of short DNA fragments. We find the OLC strategy to be the future of the assembly of long read data sets produced by third generation sequencers, such as, for example, Pacific Biosiences or Oxford Nanopore.</p>
</sec>
<sec id="sec013" sec-type="materials|methods">
<title>Methods</title>
<sec id="sec014">
<title>Overlap graph construction</title>
<p>In the overlap graph, every read and its reverse complementary counterpart are represented by a double vertex. To differentiate a read with distinct paired-end reads, even if the read sequences are identical, they are considered separately. The goal of the graph construction is to connect vertices by arcs when corresponding reads overlap. The problem is not only in erroneous reads, which impose the need for inexact comparison, but also in their number. Because of the latter, it is not feasible in practice to compare every sequence with each other. Therefore, a method is needed for an efficient preselection of overlapping reads. The most important step of the preselection adopts the <italic>k</italic>-mer characteristic as an indicator of the similarity between reads. To be more precise, given the length <italic>l</italic> of a read, the maximum number of extracted <italic>k</italic>-mers is equal to <italic>l</italic> − <italic>k</italic> + 1. However, if a <italic>k</italic>-mer occurs multiple times within a sequence, it appears only once in its characteristic—but with an increased counter. After extracting <italic>k</italic>-mers from a sequence, they are sorted internally (within each characteristic) in descending order according to their numbers of occurrence. Next, all the <italic>k</italic>-mer characteristics are sorted alphabetically, just like words in a dictionary. As the most distinguishing <italic>k</italic>-mers were put in front, a chance that neighboring characteristics refer to overlapping sequences is very high. We observed that if two sequences overlap on at least half of their length, then their <italic>k</italic>-mer characteristics are very close to each other once sorted. On the other hand, the characteristics tend to drift apart for those sequences that overlap on a relatively short segment only. To address this issue, we introduced partial characteristics in which <italic>k</italic>-mers are extracted only from selected parts of a sequence, i.e, the beginning, center, or the end of a read. The sorting procedures and further steps are the same as in the first scenario.</p>
<p>Pairs of reads laying within a given neighborhood are called <italic>promising pairs</italic>. The size of the neighborhood on the sorted lists is a parameter of the method. To verify the overlapping property of the promising pairs, we align the corresponding pairs of reads using a semi-global version of the Needleman-Wunsch algorithm (NW), which finds optimal alignments. This is a relatively time-consuming method, but it is applicable since we use a very efficient implementation on the GPU platform, the G-DNA library [<xref ref-type="bibr" rid="pone.0202355.ref033">33</xref>]. At the output of the method, we get the alignment score and the so-called shift value for each pair of tested reads. Those pairs, for which the overlap is sufficiently long and the number of alignment errors is below a given threshold, are connected by an arc in the graph model.</p>
<p>As already mentioned, the <italic>k</italic>-mer characteristic-based selection is only one of the steps to preselect pairs of reads that are likely to overlap. A sketch of the entire method is presented in <xref ref-type="fig" rid="pone.0202355.g004">Fig 4</xref>. One of the next steps is the smallest lexicographical index method. It selects two descriptors for each read, one for the first half and the other for the second half of a read. The descriptor is defined here as the lexicographically smallest subsequence of a fixed length, usually between 12 and 20 nucleotides. Reads having the same descriptors are marked as promising pairs and their overlapping is verified with the G-DNA library. The next step takes into account the information given in paired-end reads. Assume we have two paired-end reads: <italic>A</italic> paired with <italic>A</italic>′ and <italic>B</italic> paired with <italic>B</italic>′. If <italic>A</italic> and <italic>B</italic> overlap, then <italic>A</italic>′ and <italic>B</italic>′ may overlap as well. Therefore, all such pairs (<italic>A</italic>′, <italic>B</italic>′) become promising and the algorithm verifies their alignment. The next step compares direct successors of vertices. Let <italic>A</italic>, <italic>B</italic> and <italic>C</italic> denote reads. If <italic>A</italic> overlaps <italic>B</italic> and <italic>A</italic> overlaps <italic>C</italic>, then <italic>B</italic> and <italic>C</italic> are marked as a promising pair and the GPU-based algorithm verifies the quality of the alignment. The last step verifies the reverse complementary sequence alignment. Let <italic>A</italic> and <italic>B</italic> denote sequences, and let <inline-formula id="pone.0202355.e001"><alternatives><graphic id="pone.0202355.e001g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pone.0202355.e001" xlink:type="simple"/><mml:math display="inline" id="M1"><mml:mover accent="true"><mml:mi>A</mml:mi> <mml:mo>¯</mml:mo></mml:mover></mml:math></alternatives></inline-formula> and <inline-formula id="pone.0202355.e002"><alternatives><graphic id="pone.0202355.e002g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pone.0202355.e002" xlink:type="simple"/><mml:math display="inline" id="M2"><mml:mover accent="true"><mml:mi>B</mml:mi> <mml:mo>¯</mml:mo></mml:mover></mml:math></alternatives></inline-formula> be their reverse complementary counterparts, respectively. If <italic>A</italic> and <italic>B</italic> do overlap, then <inline-formula id="pone.0202355.e003"><alternatives><graphic id="pone.0202355.e003g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pone.0202355.e003" xlink:type="simple"/><mml:math display="inline" id="M3"><mml:mover accent="true"><mml:mi>A</mml:mi> <mml:mo>¯</mml:mo></mml:mover></mml:math></alternatives></inline-formula> and <inline-formula id="pone.0202355.e004"><alternatives><graphic id="pone.0202355.e004g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pone.0202355.e004" xlink:type="simple"/><mml:math display="inline" id="M4"><mml:mover accent="true"><mml:mi>B</mml:mi> <mml:mo>¯</mml:mo></mml:mover></mml:math></alternatives></inline-formula> must overlap too. In this case, alignment-based verification is needed only to check a shift between reads to discover an exact number of errors inside the alignment (without the expensive procedure of backtracing).</p>
<fig id="pone.0202355.g004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.g004</object-id>
<label>Fig 4</label>
<caption>
<title>Graph construction algorithm.</title>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.g004" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec015">
<title>Graph traversal</title>
<p>When the overlap graph is created, the GRASShopPER algorithm can start the traversal phase in search of unambiguous paths. In case of graphs for complicated genomes (containing many repetitive regions) constructed on erroneous sequence sets, we may encounter a number of difficulties to detect ambiguities. Those fragments of the graph usually form fork-like structures, where at one point of the search phase one must choose between two or more paths that are equally possible. The forks being a result of sequencing errors must be ignored or carefully handled.</p>
<p>The traversal algorithm selects multiple random starting points for contigs and extends them in both directions. Instead of a single vertex, we operate on a set of vertices, called the <italic>state</italic>, which were recently added to the path. Vertices from the state vote for candidates for extension, being their direct successors, and a weighted sum of the votes determines the score of a candidate. Therefore, it is not likely that a single wrongly chosen vertex affects the whole path. Every iteration of the traversal algorithm ends with the selection of the candidate with the highest score and adds it to the state.</p>
<p>Let <italic>S</italic> = <italic>s</italic><sub>1</sub>, <italic>s</italic><sub>2</sub>, …, <italic>s</italic><sub><italic>r</italic></sub> be a state, which is a list of <italic>r</italic> most recently added vertices <italic>s</italic><sub><italic>i</italic></sub> to the currently traversed contig and let <italic>C</italic> be a list of candidates considered as successors. <inline-formula id="pone.0202355.e005"><alternatives><graphic id="pone.0202355.e005g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pone.0202355.e005" xlink:type="simple"/><mml:math display="inline" id="M5"><mml:mrow><mml:mi>C</mml:mi> <mml:mo>=</mml:mo> <mml:msubsup><mml:mo mathsize="140%">∪</mml:mo> <mml:mrow><mml:mi>i</mml:mi> <mml:mo>=</mml:mo> <mml:mn>1</mml:mn></mml:mrow> <mml:mi>r</mml:mi></mml:msubsup> <mml:mi>o</mml:mi> <mml:mi>u</mml:mi> <mml:mi>t</mml:mi> <mml:mrow><mml:mo>(</mml:mo> <mml:msub><mml:mi>s</mml:mi> <mml:mi>i</mml:mi></mml:msub> <mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>, where <italic>out</italic>(<italic>s</italic><sub><italic>i</italic></sub>) is the set of vertices being successors of <italic>s</italic><sub><italic>i</italic></sub> in the graph. The size <italic>r</italic> of the state is dynamically adjusted based on the graph density and the level of overlaps of vertices being considered as a premise to form an arc. Whenever the overlap between <italic>s</italic><sub>1</sub> and <italic>s</italic><sub><italic>r</italic></sub> is smaller than the required sequence overlap between vertices from the state, the oldest vertex in the state (<italic>s</italic><sub>1</sub>) is removed. This way the state contains all and only the meaningful vertices—the ones that can contribute to the selection.</p>
<p>The candidate successor is chosen on the basis of the scoring function, which weights the votes of the predecessors of candidates by the level of similarities concealed in arcs. The scoring function sums the overlaps of all the supporting arcs and, therefore, promotes candidates supported by newest vertices in the state.</p>
</sec>
<sec id="sec016">
<title>Fork detection</title>
<p>The main source of forks in DNA overlap graphs is the occurence of errors in the sequenced reads, single nucleotide polymorphisms (SNPs), and repeated regions of a genome. All three cases result in similar graph structures, but it is possible to differentiate among them. Sequencing errors are the easiest to detect and resolve, because they most often have a very low confirmation in the neighboring sequences, e.g., one of the branches ends up shortly after the fork, while in case of repetitions it does not. SNP branches join back together right after the fork, so it is possible to detect them too. When it comes to repetitive fragments, one needs to be very cautious, because both paths may appear to be equally accurate. Unfortunately, looking from the whole genome perspective, further traversal might lead to incorrect contigs. Therefore, the algorithm must stop traversing the path each time an unsolvable fork is detected. Following a random path on consecutive forks most often results in a misassembly. In the rest of the section, we focus mainly on branches that come from repetitive fragments.</p>
<p>The algorithm detects two types of forks: forward and backward. A forward fork occurs when graph traversal along one path creates a possibility of going to two or more different paths. A backward fork occurs when two (or more) paths merge into one in the graph.</p>
<p>While approaching a forward fork, <italic>C</italic> contains vertices from two (or more) paths (<xref ref-type="fig" rid="pone.0202355.g005">Fig 5A</xref>). At this point, we are not aware of the existence of a fork ahead of us, the fork is detected once the whole state is placed entirely on one of the paths after crossing the branch and there is no candidate on the other paths. When the first candidate from one of the distinct paths is chosen (<xref ref-type="fig" rid="pone.0202355.g005">Fig 5B</xref>), the scores on all branches are modified and higher scores are assigned to candidates on the selected branch. Hence, they are more likely to be selected as a subsequent contig vertices. When the last vertex that has successors in more than one branch is removed from the state, a group of candidates that belong to the other path (or paths) is also removed (<xref ref-type="fig" rid="pone.0202355.g005">Fig 5C</xref>). This confirms the existence of a fork and suggests a cut of the path directly before the state. However, if not all arcs are detected during the graph construction phase and dropped vertices have connections to the vertices from <italic>S</italic>, we may mistakenly detect a fork while the dropped vertices should be included in the current path. Thus, it is necessary to countercheck that there is no arc between vertices from the removed group to the state, otherwise we may mistakenly detect a ‘jump’ over skipped vertices.</p>
<fig id="pone.0202355.g005" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.g005</object-id>
<label>Fig 5</label>
<caption>
<title>An example of the fork detection made by the algorithm.</title>
<p>The ordered vertices are already in a path (A). Vertices from the state are in the path and they vote for the candidates, which could extend the current path (A, B). When all the vertices from the state are moved toward one branch of the fork, and many candidates from the other branch are lost, the algorithm cuts the current path at the beginning of the fork (C).</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.g005" xlink:type="simple"/>
</fig>
<p>Detection of the backward fork follows similar rules as for the forward fork. Compared to forward forks, which expect the removal of candidates—backward forks expect the addition of candidates in the situation when the state enters the vertex common for both branches of the backward fork. To confirm the fork—for the same reason as above—we have to verify the nonexistence of arcs in the other direction. The number of dropped candidates from one branch, which is a threshold that allows detecting a fork, is adjusted dynamically, based on genome coverage in a given region of the graph and on the overall distribution of coverage in the whole data set.</p>
<p>As mentioned earlier, forks in the graph occur not only due to repetitive regions, but also due to errors and SNPs. Therefore, some additional checks have to be introduced to recognize the second type of forks. To ignore the second type of forks, which usually make contigs short, the algorithm compares the candidate sets from all branches. If they have a significant number of similar candidates, the fork is discarded.</p>
</sec>
<sec id="sec017">
<title>Contig correction</title>
<p>Although the fork detection step already identifies most of the alternative paths of the overlap graph, it operates only on the local context of reads, i.e., overlaps, and does not apply the information from paired-end sequencing. The contig correction step improves the quality of the contigs by cutting them at the point where the paired-end data suggest anomalies in overlaps. There are two main types of anomalies that can be detected:</p>
<list list-type="simple">
<list-item>
<label>(i)</label>
<p>incoherence in paired-end reads continuity (<xref ref-type="fig" rid="pone.0202355.g006">Fig 6</xref>),</p>
</list-item>
<list-item>
<label>(ii)</label>
<p>excessive density of paired-end reads pointing to different contigs or to distant parts of the same contig (<xref ref-type="fig" rid="pone.0202355.g007">Fig 7</xref>).</p>
</list-item>
</list>
<fig id="pone.0202355.g006" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.g006</object-id>
<label>Fig 6</label>
<caption>
<title>Contigs correction.</title>
<p>Visualization of breaks in the continuity of paired-end information (shown as arches) on a real data set, mapped to a contig created by the traversal step.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.g006" xlink:type="simple"/>
</fig>
<fig id="pone.0202355.g007" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.g007</object-id>
<label>Fig 7</label>
<caption>
<title>Contigs correction.</title>
<p>Histogram visualizing the number of reads mapped to a given contig region and having the other read from the pair mapped to a different contig or a distant part of the same contig.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.g007" xlink:type="simple"/>
</fig>
<p>To find both types of anomalies, we developed a hyper-heuristic-driven algorithm. A hyper-heuristic method does not operate on the solution directly but uses simple procedures, called low-level heuristics, which modify a solution and are evaluated by a function. The algorithm can learn during the search process, whose procedure is better for a particular instance or at a particular time (more on hyper-heuristics can be found in [<xref ref-type="bibr" rid="pone.0202355.ref034">34</xref>–<xref ref-type="bibr" rid="pone.0202355.ref036">36</xref>]). Hyper-heuristics have already been successfully applied to some bioinformatics problems (e.g., [<xref ref-type="bibr" rid="pone.0202355.ref037">37</xref>–<xref ref-type="bibr" rid="pone.0202355.ref039">39</xref>]).</p>
<p>In our approach, a hyper-heuristic is a greedy algorithm, which operates on two low-level procedures. The first one detects the gap between paired-end reads that are consecutively mapped to a contig (anomaly (i)). The second one searches for pairs of reads, which are mapped within a far distance (anomaly (ii)).</p>
<p>The method is parameterized to adjust to different properties of the input data (e.g., low coverage or high insert size). Parameters allow defining the minimal continuity break width to be considered as an anomaly, set the threshold on the number of pairs of reads matched to different contigs to be considered as significant, or declare the minimum and maximum insert size in the data (see <xref ref-type="supplementary-material" rid="pone.0202355.s007">S1 Text</xref> for the reference to the complete list of the algorithm parameters). As the output of the hyper-heuristic method, we get a set of contig cuts that potentially reduce the misassembly rate.</p>
</sec>
<sec id="sec018">
<title>Contig trimming</title>
<p>When contigs are ready, the next step is to compose them into scaffolds. In contrast to the stage of contig correction, paired-end information is used here to merge contigs together instead of splitting them apart. To perform the scaffolding, we use external tools. The main assumption of the available scaffolding methods is that the input contigs do not overlap. GRASShopPER does not provide non-overlapping contigs out of the box. This is caused by the specific data abstraction of the OLC strategy. OLC does not operate on the nucleotide level, but instead wraps the reads in an additional layer of indirection. They become vertices with arcs representing overlaps. At this stage, one does not even need to load nucleic acid sequences of reads. However, there is a drawback—the exact position of the fork in the consensus alignment cannot be precisely indicated. Therefore, GRASShopPER contigs may not fulfill the expectations of the scaffolding methods. This is why there was a need to provide yet another step, contig trimming.</p>
<p>As overlaps in contigs produced by GRASShopPER are placed very close to the ends of the contigs, they are relatively easy to locate. However, one has to be extra cautious, because simply cutting them off from the contigs may bring undesirable consequences on the genome fraction metric. The problem is with possibly nearly located forks. It would lead to excessive scatter of contigs and loss of information from the shortest ones (see <xref ref-type="fig" rid="pone.0202355.g008">Fig 8</xref>). This is due to the fact that most of the scaffolding methods never take short contigs into account. Our approach attempts to minimize this effect.</p>
<fig id="pone.0202355.g008" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0202355.g008</object-id>
<label>Fig 8</label>
<caption>
<title>Visualization of the problem caused by closely located forks.</title>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.g008" xlink:type="simple"/>
</fig>
<p>The contig trimming method uses reads-to-contigs mapping to find repeated regions in the contigs. When it finds one, it performs the analysis whether a potential cutoff can cause genome fraction loss. If removing the region from one of the contigs shortens it too much, the method tries to cut the region off from the other considered contig. If also this one is not long enough, the contigs are left untouched to protect the valuable information.</p>
</sec>
</sec>
<sec id="sec019">
<title>Supporting information</title>
<supplementary-material id="pone.0202355.s001" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.s001" xlink:type="simple">
<label>S1 Table</label>
<caption>
<title>Assemblies obtained for the data set Candidatus Microthrix parvicella strain Bio17-1.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pone.0202355.s002" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.s002" xlink:type="simple">
<label>S2 Table</label>
<caption>
<title>Assemblies obtained for the data set Caenorhabditis elegans strain N2.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pone.0202355.s003" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.s003" xlink:type="simple">
<label>S3 Table</label>
<caption>
<title>Assemblies obtained for the data set Homo sapiens chromosome 14.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pone.0202355.s004" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.s004" xlink:type="simple">
<label>S4 Table</label>
<caption>
<title>Scaffolding of the data set <italic>Candidatus</italic> Microthrix parvicella strain Bio17-1 for the assemblers GRASShopPER, SOAPdenovo2 and SGA with the combination of scaffolders SSPACE and SOAPdenovo2.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pone.0202355.s005" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.s005" xlink:type="simple">
<label>S5 Table</label>
<caption>
<title>Scaffolding of the data set <italic>Caenorhabditis elegans</italic> strain N2 for the assemblers GRASShopPER, SOAPdenovo2 and SGA with the combination of scaffolders SSPACE and SOAPdenovo2.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pone.0202355.s006" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.s006" xlink:type="simple">
<label>S6 Table</label>
<caption>
<title>Scaffolding of the data set <italic>Homo sapiens</italic> chromosome 14 for the assemblers GRASShopPER, SOAPdenovo2 and SGA with the combination of scaffolders SSPACE and SOAPdenovo2.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pone.0202355.s007" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pone.0202355.s007" xlink:type="simple">
<label>S1 Text</label>
<caption>
<title>Algorithm parameters.</title>
<p>The list of GRASShopPER parameters. Description of how to run GRASShopPER. Parameters of all the methods used throughout computational experiment.</p>
<p>(DOCX)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ref-list>
<title>References</title>
<ref id="pone.0202355.ref001">
<label>1</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Li</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Tan</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Tian</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Zhu</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>He</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Cai</surname> <given-names>J</given-names></name>, <etal>et al</etal>. <article-title>The sequence and <italic>de novo</italic> assembly of giant panda genome</article-title>. <source>Nature</source>. <year>2010</year>;<volume>463</volume>:<fpage>311</fpage>–<lpage>317</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nature08696" xlink:type="simple">10.1038/nature08696</ext-link></comment> <object-id pub-id-type="pmid">20010809</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Dalloul</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Long</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Zimin</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Aslam</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Beal</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Blomberg</surname> <given-names>LA</given-names></name>, <etal>et al</etal>. <article-title>Multi-platform next-generation sequencing of domestic turkey (<italic>Meleagris gallopavo</italic>): genome assembly and analysis</article-title>. <source>PLoS Biol</source>. <year>2010</year>;<volume>8</volume>(<issue>9</issue>):<fpage>e1000475</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pbio.1000475" xlink:type="simple">10.1371/journal.pbio.1000475</ext-link></comment> <object-id pub-id-type="pmid">20838655</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref003">
<label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Nowrousian</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Stajich</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Chu</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Engh</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Espagne</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Halliday</surname> <given-names>K</given-names></name>, <etal>et al</etal>. <article-title><italic>De novo</italic> assembly of a 40 Mb eukaryotic genome from short sequence seads: <italic>Sordaria macrospora</italic>, a model organism for fungal morphogenesis</article-title>. <source>PLoS Genet</source>. <year>2010</year>;<volume>6</volume>(<issue>4</issue>):<fpage>e1000891</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pgen.1000891" xlink:type="simple">10.1371/journal.pgen.1000891</ext-link></comment> <object-id pub-id-type="pmid">20386741</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref004">
<label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kappler</surname> <given-names>U</given-names></name>, <name name-style="western"><surname>Davenport</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Beatson</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Lucas</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Lapidus</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Copeland</surname> <given-names>A</given-names></name>, <etal>et al</etal>. <article-title>Complete genome sequence of the facultatively chemolithoautotrophic and methylotrophic alpha Proteobacterium <italic>Starkeya novella</italic> type strain (ATCC 8093T)</article-title>. <source>Standards in Genomic Sciences</source>. <year>2012</year>;<volume>7</volume>:<fpage>7010044</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.4056/sigs.3006378" xlink:type="simple">10.4056/sigs.3006378</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0202355.ref005">
<label>5</label>
<mixed-citation publication-type="other" xlink:type="simple">Maier D, Storer J. A note on the complexity of the superstring problem. Computer Science Laboratory: Princeton University; 1977. Report No. 233.</mixed-citation>
</ref>
<ref id="pone.0202355.ref006">
<label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lysov</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Florentiev</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Khorlin</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Khrapko</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Shik</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Mirzabekov</surname> <given-names>A</given-names></name>. <article-title>Determination of the nucleotide sequence of DNA using hybridization with oligonucleotides. A new method</article-title>. <source>Dokl Akad Nauk SSSR</source>. <year>1988</year>;<volume>303</volume>:<fpage>1508</fpage>–<lpage>1511</lpage>. <object-id pub-id-type="pmid">3250844</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref007">
<label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pevzner</surname> <given-names>P</given-names></name>. <article-title>l-Tuple DNA sequencing: Computer analysis</article-title>. <source>J Biomol Struct Dyn</source>. <year>1989</year>;<volume>7</volume>:<fpage>63</fpage>–<lpage>73</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1080/07391102.1989.10507752" xlink:type="simple">10.1080/07391102.1989.10507752</ext-link></comment> <object-id pub-id-type="pmid">2684223</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref008">
<label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Blazewicz</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Hertz</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Kobler</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>de Werra</surname> <given-names>D</given-names></name>. <article-title>On some properties of DNA graphs</article-title>. <source>Discrete Appl Math</source>. <year>1999</year>;<volume>98</volume>:<fpage>1</fpage>–<lpage>19</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/S0166-218X(99)00109-2" xlink:type="simple">10.1016/S0166-218X(99)00109-2</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0202355.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Blazewicz</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Kasprzak</surname> <given-names>M</given-names></name>. <article-title>Complexity issues in computational biology</article-title>. <source>Fundamenta Informaticae</source>. <year>2012</year>;<volume>118</volume>:<fpage>385</fpage>–<lpage>401</lpage>.</mixed-citation>
</ref>
<ref id="pone.0202355.ref010">
<label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Blazewicz</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Kasprzak</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Kierzynka</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Frohmberg</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Swiercz</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Wojciechowski</surname> <given-names>P</given-names></name>, <etal>et al</etal>. <article-title>Graph algorithms for DNA sequencing—origins, current models and the future</article-title>. <source>Eur J Oper Res</source>. <year>2018</year>;<volume>264</volume>:<fpage>799</fpage>–<lpage>812</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.ejor.2016.06.043" xlink:type="simple">10.1016/j.ejor.2016.06.043</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0202355.ref011">
<label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Blazewicz</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Formanowicz</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Guinand</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Kasprzak</surname> <given-names>M</given-names></name>. <article-title>A heuristic managing errors for DNA sequencing</article-title>. <source>Bioinformatics</source>. <year>2002</year>;<volume>18</volume>:<fpage>652</fpage>–<lpage>660</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/18.5.652" xlink:type="simple">10.1093/bioinformatics/18.5.652</ext-link></comment> <object-id pub-id-type="pmid">12050060</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref012">
<label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Zerbino</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Birney</surname> <given-names>E</given-names></name>. <article-title>Velvet: Algorithms for de novo short read assembly using de Bruijn graphs</article-title>. <source>Genome Res</source>. <year>2008</year>;<volume>18</volume>:<fpage>821</fpage>–<lpage>829</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gr.074492.107" xlink:type="simple">10.1101/gr.074492.107</ext-link></comment> <object-id pub-id-type="pmid">18349386</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref013">
<label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Luo</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Liu</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Xie</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Li</surname> <given-names>Z</given-names></name>, <name name-style="western"><surname>Huang</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Yuan</surname> <given-names>J</given-names></name>, <etal>et al</etal>. <article-title>SOAPdenovo2: An empirically improved memory-effcient short-read <italic>de novo</italic> assembler</article-title>. <source>GigaScience</source>. <year>2012</year>;<volume>1</volume>:<fpage>18</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/2047-217X-1-18" xlink:type="simple">10.1186/2047-217X-1-18</ext-link></comment> <object-id pub-id-type="pmid">23587118</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref014">
<label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kajitani</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Toshimoto</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Noguchi</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Toyoda</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Ogura</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Okuno</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <article-title>Effcient <italic>de novo</italic> assembly of highly heterozygous genomes from whole-genome shotgun short reads</article-title>. <source>Genome Res</source>. <year>2014</year>;<volume>24</volume>:<fpage>1384</fpage>–<lpage>1395</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gr.170720.113" xlink:type="simple">10.1101/gr.170720.113</ext-link></comment> <object-id pub-id-type="pmid">24755901</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref015">
<label>15</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Blazewicz</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Formanowicz</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Kasprzak</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Markiewicz</surname> <given-names>WT</given-names></name>, <name name-style="western"><surname>Weglarz</surname> <given-names>J</given-names></name>. <article-title>DNA sequencing with positive and negative errors</article-title>. <source>J Comput Biol</source>. <year>1999</year>;<volume>6</volume>:<fpage>113</fpage>–<lpage>123</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1089/cmb.1999.6.113" xlink:type="simple">10.1089/cmb.1999.6.113</ext-link></comment> <object-id pub-id-type="pmid">10223668</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref016">
<label>16</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Myers</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Sutton</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Delcher</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Dew</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Fasulo</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Flanigan</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <article-title>Whole-genome assembly of Drosophila</article-title>. <source>Science</source>. <year>2000</year>;<volume>287</volume>:<fpage>2196</fpage>–<lpage>2204</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1126/science.287.5461.2196" xlink:type="simple">10.1126/science.287.5461.2196</ext-link></comment> <object-id pub-id-type="pmid">10731133</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref017">
<label>17</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Blazewicz</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Bryja</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Figlerowicz</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Gawron</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Kasprzak</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Kirton</surname> <given-names>E</given-names></name>, <etal>et al</etal>. <article-title>Whole genome assembly from 454 sequencing output via modified DNA graph concept</article-title>. <source>Comput Biol Chem</source>. <year>2009</year>;<volume>33</volume>(<issue>3</issue>):<fpage>224</fpage>–<lpage>230</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.compbiolchem.2009.04.005" xlink:type="simple">10.1016/j.compbiolchem.2009.04.005</ext-link></comment> <object-id pub-id-type="pmid">19477687</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref018">
<label>18</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Simpson</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Durbin</surname> <given-names>R</given-names></name>. <article-title>Efficient de novo assembly of large genomes using compressed data structures</article-title>. <source>Genome Res</source>. <year>2012</year>;<volume>22</volume>:<fpage>549</fpage>–<lpage>556</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gr.126953.111" xlink:type="simple">10.1101/gr.126953.111</ext-link></comment> <object-id pub-id-type="pmid">22156294</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref019">
<label>19</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bankevich</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Nurk</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Antipov</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Gurevich</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Dvorkin</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Kulikov</surname> <given-names>A</given-names></name>, <etal>et al</etal>. <article-title>SPAdes: A new genome assembly algorithm and its applications to single-cell sequencing</article-title>. <source>J Comput Biol</source>. <year>2012</year>;<volume>19</volume>(<issue>5</issue>):<fpage>455</fpage>–<lpage>477</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1089/cmb.2012.0021" xlink:type="simple">10.1089/cmb.2012.0021</ext-link></comment> <object-id pub-id-type="pmid">22506599</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref020">
<label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Salzberg</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Phillippy</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Zimin</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Puiu</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Magoc</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Koren</surname> <given-names>S</given-names></name>, <etal>et al</etal>. <article-title>GAGE: A critical evaluation of genome assemblies and assembly algorithms</article-title>. <source>Genome Res</source>. <year>2012</year>;<volume>22</volume>:<fpage>557</fpage>–<lpage>567</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gr.131383.111" xlink:type="simple">10.1101/gr.131383.111</ext-link></comment> <object-id pub-id-type="pmid">22147368</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref021">
<label>21</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Earl</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Bradnam</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>St John</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Darling</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Lin</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Fass</surname> <given-names>J</given-names></name>, <etal>et al</etal>. <article-title>Assemblathon 1: A competitive assessment of <italic>de novo</italic> short read assembly methods</article-title>. <source>Genome Res</source>. <year>2011</year>;<volume>12</volume>:<fpage>2224</fpage>–<lpage>2241</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gr.126599.111" xlink:type="simple">10.1101/gr.126599.111</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0202355.ref022">
<label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bradnam</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Fass</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Alexandrov</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Baranay</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Bechner</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Birol</surname> <given-names>I</given-names></name>, <etal>et al</etal>. <article-title>Assemblathon 2: Evaluating <italic>de novo</italic> methods of genome assembly in three vertebrate species</article-title>. <source>GigaScience</source>. <year>2013</year>;<volume>2</volume>:<fpage>10</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/2047-217X-2-10" xlink:type="simple">10.1186/2047-217X-2-10</ext-link></comment> <object-id pub-id-type="pmid">23870653</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref023">
<label>23</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Muller</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Pinel</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Gillece</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Schupp</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Price</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Engelthaler</surname> <given-names>D</given-names></name>, <etal>et al</etal>. <article-title>Genome sequence of “<italic>Candidatus Microthrix parvicella</italic>” Bio17-1, a long-chain-fatty-acid-accumulating filamentous actinobacterium from a biological wastewater treatment plant</article-title>. <source>J Bacteriol</source>. <year>2012</year>;<volume>194</volume>:<fpage>6670</fpage>–<lpage>6671</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1128/JB.01765-12" xlink:type="simple">10.1128/JB.01765-12</ext-link></comment> <object-id pub-id-type="pmid">23144412</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref024">
<label>24</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Meena</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Kumar</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Rao</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Dwivedi</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Shilpashree</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Rastogi</surname> <given-names>S</given-names></name>, <etal>et al</etal>. <article-title><italic>De novo</italic> sequencing and analysis of lemongrass transcriptome provide first insights into the essential oil biosynthesis of aromatic grasses</article-title>. <source>Front Plant Sci</source>. <year>2016</year>;<volume>7</volume>:<fpage>1129</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.3389/fpls.2016.01129" xlink:type="simple">10.3389/fpls.2016.01129</ext-link></comment> <object-id pub-id-type="pmid">27516768</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref025">
<label>25</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Greninger</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Messacar</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Dunnebacke</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Naccache</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Federman</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Bouquet</surname> <given-names>J</given-names></name>, <etal>et al</etal>. <article-title>Clinical metagenomic identification of <italic>Balamuthia mandrillaris encephalitis</italic> and assembly of the draft genome: The continuing case for reference genome sequencing</article-title>. <source>Genome Med</source>. <year>2015</year>;<volume>7</volume>:<fpage>113</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/s13073-015-0235-2" xlink:type="simple">10.1186/s13073-015-0235-2</ext-link></comment> <object-id pub-id-type="pmid">26620704</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref026">
<label>26</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pevzner</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Tang</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Tesler</surname> <given-names>G</given-names></name>. <article-title>De novo repeat classification and fragment assembly</article-title>. <source>Genome Res</source>. <year>2004</year>;<volume>14</volume>(<issue>9</issue>):<fpage>1786</fpage>–<lpage>96</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gr.2395204" xlink:type="simple">10.1101/gr.2395204</ext-link></comment> <object-id pub-id-type="pmid">15342561</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref027">
<label>27</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Medvedev</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Pham</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Chaisson</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Tesler</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Pevzner</surname> <given-names>P</given-names></name>. <article-title>Paired de Bruijn graphs: A novel approach for incorporating mate pair information into genome assemblers</article-title>. <source>J Comput Biol</source>. <year>2011</year>;<volume>18</volume>(<issue>11</issue>):<fpage>1625</fpage>–<lpage>1634</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1089/cmb.2011.0151" xlink:type="simple">10.1089/cmb.2011.0151</ext-link></comment> <object-id pub-id-type="pmid">21999285</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref028">
<label>28</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kremera</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Eslabãoa</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Provisora</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Woloskia</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Ramiresa</surname> <given-names>O</given-names></name>, <name name-style="western"><surname>Morenob</surname> <given-names>L</given-names></name>, <etal>et al</etal>. <article-title>Draft genome sequences of Leptospira santarosai strains U160, U164, and U233, isolated from asymptomatic cattle</article-title>. <source>Genome Announc</source>. <year>2015</year>;<volume>3</volume>(<issue>4</issue>):<fpage>e00910</fpage>–<lpage>15</lpage>.</mixed-citation>
</ref>
<ref id="pone.0202355.ref029">
<label>29</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Seim</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Jeffery</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Thomas</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Nelson</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Chopin</surname> <given-names>L</given-names></name>. <article-title>Whole-genome sequence of the metastatic PC3 and LNCaP human prostate cancer cell lines</article-title>. <source>G3:Genes Genom Genet</source>. <year>2017</year>;<volume>7</volume>(<issue>6</issue>):<fpage>1731</fpage>–<lpage>1741</lpage>.</mixed-citation>
</ref>
<ref id="pone.0202355.ref030">
<label>30</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gurevich</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Saveliev</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Vyahhi</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Tesler</surname> <given-names>G</given-names></name>. <article-title>QUAST: Quality assessment tool for genome assemblies</article-title>. <source>Bioinformatics</source>. <year>2013</year>;<volume>29</volume>:<fpage>1072</fpage>–<lpage>1075</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btt086" xlink:type="simple">10.1093/bioinformatics/btt086</ext-link></comment> <object-id pub-id-type="pmid">23422339</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref031">
<label>31</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hunt</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Newbold</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Berriman</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Otto</surname> <given-names>T</given-names></name>. <article-title>A comprehensive evaluation of assembly scaffolding tools</article-title>. <source>Genome Biol</source>. <year>2014</year>;<volume>15</volume>:<fpage>R42</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/gb-2014-15-3-r42" xlink:type="simple">10.1186/gb-2014-15-3-r42</ext-link></comment> <object-id pub-id-type="pmid">24581555</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref032">
<label>32</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Boetzer</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Henkel</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Jansen</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Butler</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Pirovano</surname> <given-names>W</given-names></name>. <article-title>Scaffolding pre-assembled contigs using SSPACE</article-title>. <source>Bioinformatics</source>. <year>2011</year>;<volume>27</volume>:<fpage>578</fpage>–<lpage>579</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btq683" xlink:type="simple">10.1093/bioinformatics/btq683</ext-link></comment> <object-id pub-id-type="pmid">21149342</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref033">
<label>33</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Frohmberg</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Kierzynka</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Blazewicz</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Gawron</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Wojciechowski</surname> <given-names>P</given-names></name>. <article-title>G-DNA—a highly efficient multi-GPU/MPI tool for aligning nucleotide reads</article-title>. <source>Bull Pol Acad Sci:Tech</source>. <year>2013</year>;<volume>61</volume>:<fpage>989</fpage>–<lpage>992</lpage>.</mixed-citation>
</ref>
<ref id="pone.0202355.ref034">
<label>34</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Burke</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Hyde</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Kendall</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Ochoa</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Özcan</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>J</surname> <given-names>W</given-names></name>. <chapter-title>A Classification of Hyper-heuristic Approaches</chapter-title>. In: <name name-style="western"><surname>Gendreau</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Potvin</surname> <given-names>J</given-names></name>, editors. <source>Handbook of Metaheuristics. International Series in Operations Research &amp; Management Science</source>. <volume>vol. 146</volume>. <publisher-loc>Boston, MA</publisher-loc>: <publisher-name>Springer</publisher-name>; <year>2010</year>. p. <fpage>449</fpage>–<lpage>468</lpage>.</mixed-citation>
</ref>
<ref id="pone.0202355.ref035">
<label>35</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Burke</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Gendreau</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Hyde</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Kendall</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Ochoa</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Ozcan</surname> <given-names>E</given-names></name>, <etal>et al</etal>. <article-title>Hyper-heuristics: A survey of the state of the art</article-title>. <source>J Oper Res Soc</source>. <year>2013</year>;<volume>64</volume>:<fpage>1695</fpage>–<lpage>1724</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1057/jors.2013.71" xlink:type="simple">10.1057/jors.2013.71</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0202355.ref036">
<label>36</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Swiercz</surname> <given-names>A</given-names></name>. <chapter-title>Hyper-heuristics and metaheuristics for selected bio-inspired combinatorial optimization problems</chapter-title>. In: <name name-style="western"><surname>Lorente</surname> <given-names>JDS</given-names></name>, editor. <source>Heuristics and Hyper-Heuristics—Principles and Applications</source>. <publisher-loc>Rijeka</publisher-loc>: <publisher-name>InTech</publisher-name>; <year>2017</year>. p. <fpage>3</fpage>–<lpage>20</lpage>.</mixed-citation>
</ref>
<ref id="pone.0202355.ref037">
<label>37</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Tabataba</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Mousavi</surname> <given-names>S</given-names></name>. <article-title>A hyper-heuristic for the longest common subsequence problem</article-title>. <source>Comput Biol Chem</source>. <year>2012</year>;<volume>36</volume>:<fpage>42</fpage>–<lpage>54</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.compbiolchem.2011.12.004" xlink:type="simple">10.1016/j.compbiolchem.2011.12.004</ext-link></comment> <object-id pub-id-type="pmid">22286085</object-id></mixed-citation>
</ref>
<ref id="pone.0202355.ref038">
<label>38</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Blazewicz</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Burke</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Kendall</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Mruczkiewicz</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Oguz</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Swiercz</surname> <given-names>A</given-names></name>. <article-title>A hyper-heuristic approach to sequencing by hybridization of DNA sequences</article-title>. <source>Ann Oper Res</source>. <year>2013</year>;<volume>207</volume>:<fpage>27</fpage>–<lpage>41</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s10479-011-0927-y" xlink:type="simple">10.1007/s10479-011-0927-y</ext-link></comment></mixed-citation>
</ref>
<ref id="pone.0202355.ref039">
<label>39</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Swiercz</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Burke</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Cichenski</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Pawlak</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Petrovic</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Zurkowski</surname> <given-names>T</given-names></name>, <etal>et al</etal>. <article-title>Unified encoding for hyper-heuristics with application to bioinformatics</article-title>. <source>Cent Eur J Oper Res</source>. <year>2014</year>;<volume>22</volume>:<fpage>567</fpage>–<lpage>589</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s10100-013-0321-8" xlink:type="simple">10.1007/s10100-013-0321-8</ext-link></comment></mixed-citation>
</ref>
</ref-list>
</back>
</article>