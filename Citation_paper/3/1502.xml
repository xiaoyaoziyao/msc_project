<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="3.0" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS ONE</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">plosone</journal-id><journal-title-group>
<journal-title>PLoS ONE</journal-title></journal-title-group>
<issn pub-type="epub">1932-6203</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, USA</publisher-loc></publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PONE-D-14-19397</article-id>
<article-id pub-id-type="doi">10.1371/journal.pone.0107014</article-id>
<article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Sequence assembly tools</subject></subj-group></subj-group><subj-group><subject>Comparative genomics</subject><subject>Epigenomics</subject><subject>Genome complexity</subject></subj-group></subj-group><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject></subj-group></subj-group><subj-group><subject>Molecular biology</subject><subj-group><subject>Molecular biology techniques</subject><subj-group><subject>Cloning</subject><subj-group><subject>DNA cloning</subject><subj-group><subject>Shotgun sequencing</subject></subj-group></subj-group></subj-group><subj-group><subject>Sequencing techniques</subject><subj-group><subject>Genome sequencing</subject><subject>High throughput sequencing</subject></subj-group></subj-group></subj-group></subj-group><subj-group><subject>Organisms</subject><subj-group><subject>Bacteria</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Research and analysis methods</subject></subj-group></article-categories>
<title-group>
<article-title>GABenchToB: A Genome Assembly Benchmark Tuned on Bacteria and Benchtop Sequencers</article-title>
<alt-title alt-title-type="running-head">GABenchToB</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Jünemann</surname><given-names>Sebastian</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Prior</surname><given-names>Karola</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Albersmeier</surname><given-names>Andreas</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Albaum</surname><given-names>Stefan</given-names></name><xref ref-type="aff" rid="aff4"><sup>4</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Kalinowski</surname><given-names>Jörn</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Goesmann</surname><given-names>Alexander</given-names></name><xref ref-type="aff" rid="aff5"><sup>5</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Stoye</surname><given-names>Jens</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff6"><sup>6</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Harmsen</surname><given-names>Dag</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
</contrib-group>
<aff id="aff1"><label>1</label><addr-line>Department for Periodontology, University of Münster, Münster, Germany</addr-line></aff>
<aff id="aff2"><label>2</label><addr-line>Institute for Bioinformatics, Center for Biotechnology, Bielefeld University, Bielefeld, Germany</addr-line></aff>
<aff id="aff3"><label>3</label><addr-line>Technology Platform Genomics, Center for Biotechnology, Bielefeld University, Bielefeld, Germany</addr-line></aff>
<aff id="aff4"><label>4</label><addr-line>Bioinformatics Resource Facility, Center for Biotechnology, Bielefeld University, Bielefeld, Germany</addr-line></aff>
<aff id="aff5"><label>5</label><addr-line>Bioinformatics and Systems Biology, Justus-Liebig-Univeristy Gießen, Gießen, Germany</addr-line></aff>
<aff id="aff6"><label>6</label><addr-line>Genome Informatics Group, Faculty of Technology, Bielefeld University, Bielefeld, Germany</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple"><name name-style="western"><surname>Antoniewski</surname><given-names>Christophe</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/></contrib>
</contrib-group>
<aff id="edit1"><addr-line>CNRS UMR7622 &amp; University Paris 6 Pierre-et-Marie-Curie, France</addr-line></aff>
<author-notes>
<corresp id="cor1">* E-mail: <email xlink:type="simple">jueneman@cebitec.uni-bielefeld.de</email></corresp>
<fn fn-type="conflict"><p>The authors have declared that no competing interests exist.</p></fn>
<fn fn-type="con"><p>Conceived and designed the experiments: SJ DH. Performed the experiments: SJ KP AA. Analyzed the data: SJ SA AG JS. Contributed reagents/materials/analysis tools: SJ JK DH. Wrote the paper: SJ KP DH.</p></fn>
</author-notes>
<pub-date pub-type="collection"><year>2014</year></pub-date>
<pub-date pub-type="epub"><day>8</day><month>9</month><year>2014</year></pub-date>
<volume>9</volume>
<issue>9</issue>
<elocation-id>e107014</elocation-id>
<history>
<date date-type="received"><day>30</day><month>4</month><year>2014</year></date>
<date date-type="accepted"><day>7</day><month>8</month><year>2014</year></date>
</history>
<permissions>
<copyright-year>2014</copyright-year>
<copyright-holder>Jünemann et al</copyright-holder><license xlink:type="simple"><license-p>This is an open-access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p></license></permissions>
<abstract>
<p><italic>De novo</italic> genome assembly is the process of reconstructing a complete genomic sequence from countless small sequencing reads. Due to the complexity of this task, numerous genome assemblers have been developed to cope with different requirements and the different kinds of data provided by sequencers within the fast evolving field of next-generation sequencing technologies. In particular, the recently introduced generation of benchtop sequencers, like Illumina's MiSeq and Ion Torrent's Personal Genome Machine (PGM), popularized the easy, fast, and cheap sequencing of bacterial organisms to a broad range of academic and clinical institutions. With a strong pragmatic focus, here, we give a novel insight into the line of assembly evaluation surveys as we benchmark popular <italic>de novo</italic> genome assemblers based on bacterial data generated by benchtop sequencers. Therefore, single-library assemblies were generated, assembled, and compared to each other by metrics describing assembly contiguity and accuracy, and also by practice-oriented criteria as for instance computing time. In addition, we extensively analyzed the effect of the depth of coverage on the genome assemblies within reasonable ranges and the k-mer optimization problem of de Bruijn Graph assemblers. Our results show that, although both MiSeq and PGM allow for good genome assemblies, they require different approaches. They not only pair with different assembler types, but also affect assemblies differently regarding the depth of coverage where oversampling can become problematic. Assemblies vary greatly with respect to contiguity and accuracy but also by the requirement on the computing power. Consequently, no assembler can be rated best for all preconditions. Instead, the given kind of data, the demands on assembly quality, and the available computing infrastructure determines which assembler suits best. The data sets, scripts and all additional information needed to replicate our results are freely available at <ext-link ext-link-type="uri" xlink:href="ftp://ftp.cebitec.uni-bielefeld.de/pub/GABenchToB" xlink:type="simple">ftp://ftp.cebitec.uni-bielefeld.de/pub/GABenchToB</ext-link>.</p>
</abstract>
<funding-group><funding-statement>This work was supported in parts by grants of the German Federal Ministry of Education and Research (BMBF) in the framework of the FBI-Zoo project (FKZ 01KI1012B), of the Technology Platform Bioinformatics (TPB) project (FKZ 031A190) and by the European Commission's Seventh Framework Programme (EU PathoNGenTrace project agreement no. 278864). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement></funding-group><counts><page-count count="12"/></counts><custom-meta-group><custom-meta id="data-availability" xlink:type="simple"><meta-name>Data Availability</meta-name><meta-value>The authors confirm that all data underlying the findings are fully available without restriction. Sequencing reads were deposited at the European Nucleotide Archive ENA and are available under the project accession number ERP006674. All data including the raw sequencing reads, the sub-sampled data sets, and all generated assemblies are unrestricted and anonymously available at <ext-link ext-link-type="uri" xlink:href="ftp://ftp.cebitec.uni-bielefeld.de/pub/GABenchToB" xlink:type="simple">ftp://ftp.cebitec.uni-bielefeld.de/pub/GABenchToB</ext-link> (for some web browsers or ftp clients a guest account without password must be chosen explicitly). In addition, all information required to reproduce the results, e.g. the full execution pipeline including all custom scripts, assembler installation configurations and run parameters, are also available at this site.</meta-value></custom-meta></custom-meta-group></article-meta>
</front>
<body><sec id="s1">
<title>Introduction</title>
<p>With the introduction of massively parallel high-throughput next generation sequencing (NGS) platforms, fast and cost-effective whole genome shotgun sequencing of the full variety of organisms has been enabled. The rapid advancement in this field is best represented by the recently introduced small scaled benchtop sequencers (BS), e.g., the MiSeq by Illumina (San Diego, California) and the Ion Torrent PGM by Life Technologies (Carlsbad, California). Albeit providing a lower throughput than their conventional non-benchtop counterparts (e.g., Illumina's HiSeq and Ion Torrent's Proton), they still provide sufficient genomic coverage and sequencing accuracy to be efficiently used for sequencing bacterial genomes <xref ref-type="bibr" rid="pone.0107014-Loman1">[1]</xref>–<xref ref-type="bibr" rid="pone.0107014-Jnemann1">[2]</xref>.</p>
<p>One crucial step in genome based analysis is the attempt to <italic>de novo</italic> assemble raw sequencing reads into a bacterial chromosome. <italic>De novo</italic> genome assembly is the process of reconstructing a whole genome sequence from short sequencing reads by finding common subsequences and assembling overlapping reads to longer continuous sequences, i.e. contigs, under the assumption that such reads originate from the same genomic location. If special pairs of reads with a known pairing distance are available, i.e. mate-pair (MP) or paired-end (PE) reads, this information can be used to arrange individual contigs in an ordered sequence consisting of contigs and gaps of known sizes (scaffolds). This is in particular useful to span gaps related to long repetitive elements which are hard to be resolved solely by overlapping reads of limited length. In general, most current assembly algorithms can be assigned to one of two classes based on their underlying data structure: de Bruijn graph (DBG) and overlap layout consensus (OLC) assemblers. Both approaches utilize a graph structure built upon the sequencing reads and algorithms for graph traversal in order to deduce overlapping sequences and to generate contigs. Very briefly, OLC assemblers build a graph by connecting nodes which represent the sequencing reads by edges representing the specific overlaps. For the DBG approach reads are initially partitioned into substrings of the reads of a fixed length (k-mers) and a graph is built by connecting nodes symbolizing sub-reads that share a specific prefix and suffix, respectively. See Compeau et al. 2011 <xref ref-type="bibr" rid="pone.0107014-Compeau1">[3]</xref>, Li et al. 2012 <xref ref-type="bibr" rid="pone.0107014-Li1">[4]</xref> and Nagarajan and Pop 2013 <xref ref-type="bibr" rid="pone.0107014-Nagarajan1">[5]</xref> for detailed descriptions on the principles of DBG and OLC assemblers.</p>
<p>The rapid progress in the field of NGS as well as diverse sequencing procedures and protocols had also impacts on genome assembly algorithms and assembly software solutions. The number of sequence assemblers steadily increased in recent years with currently several dozens of assemblers available (22 genome assemblers compared in 2008 <xref ref-type="bibr" rid="pone.0107014-ScheibyeAlsing1">[6]</xref>, additional 13 assemblers in 2010 <xref ref-type="bibr" rid="pone.0107014-Paszkiewicz1">[7]</xref>, further ten assemblers in 2011 <xref ref-type="bibr" rid="pone.0107014-Zhang1">[8]</xref>). Although this variety becomes somewhat more limited as some assemblers require a particular kind or set of sequencing data as an input, researchers are still confronted with a wide range of assembler candidates. The decision which <italic>de novo</italic> assembler to use is conditional to several aspects, notably the specification of the applied sequencing platform and protocol (e.g., single-end versus PE reads), characteristics of the sequencing results (read lengths and error profiles) and, if available, characteristics of the sequenced genome (e.g., number of repetitive genomic elements or the genomic %GC-content).</p>
<p>Therefore, systematic evaluations of assemblers are necessary to provide the research community with scientifically sound decision-making support. In the past, several efforts have been made to assess genome assembler efficiency on different scales and for different application scenarios <xref ref-type="bibr" rid="pone.0107014-Zhang1">[8]</xref>–<xref ref-type="bibr" rid="pone.0107014-Narzisi1">[11]</xref>. Most prominently, two comparative studies with recently introduced remakes contributed greatly to this field, i.e. Assemblathon and Genome Assembly Gold-Standard Evaluations (GAGE). For the first large scale assembler competition Assemblathon 1 <xref ref-type="bibr" rid="pone.0107014-Earl1">[12]</xref> and its recent successor Assemblathon 2 <xref ref-type="bibr" rid="pone.0107014-Bradnam1">[13]</xref> assemblies were performed and submitted by different institutions and thereafter evaluated. In the first study, 17 participants generated 41 assemblies based on simulated short Illumina HiSeq reads covering 16 different genome assemblers. In Assemblathon 2, 21 participants assembled 43 genomes of three vertebrate species sequenced on different instruments while using eight genome assemblers. In contrast, for the GAGE <xref ref-type="bibr" rid="pone.0107014-Salzberg1">[14]</xref> and GAGE-B <xref ref-type="bibr" rid="pone.0107014-Magoc1">[15]</xref> competitions all assemblies were generated under equal conditions. Whereas GAGE compared eight different genome assemblers using multiple Illumina libraries of four different pro- and eukaryotic data sets, GAGE-B concentrated on single library assemblies of nine Illumina sequenced bacterial strains using also eight different assemblers.</p>
<p>Albeit these studies give a very comprehensive picture of the efficiency and applicability of state-of-the-art assembler algorithms, several questions remain unanswered. First and foremost, NGS is evolving fast and consumables, protocols, and technical specifications of BS differ in comparison to conventional NGS instruments. For instance, the MiSeq offers an improved read length of 2×300 base pairs (bp) compared to the maximum 2×150 bp of the HiSeq system. The Ion Torrent PGM, although comparable to Roche's 454 in terms of the error profile, produces a different read length distribution (current maximum read length of about 400 bp for the PGM compared to the 1,000 bp at max. for the 454 GS−FLX+ system). Up to now, only the GAGE-B evaluation took into account MiSeq data sets while evaluations of assemblies originating from PGM instruments are missing. Therefore, methods need to be reconsidered for deciding how to assemble data originating from BS instruments. Secondly, bacterial genomes are underrepresented, particularly in the Assemblathon surveys. Even if bacterial genomes are lightweights regarding their assembly difficulty compared to e.g. vertebrates, they nevertheless have different requirements on sequencing procedures and the assembler algorithms. GAGE-B recently tried to close this gap, yet for the majority of the used data sets a high quality genome reference was not available. A third aspect of an assembler evaluation is more of a practice-oriented nature, e.g. the run time and memory usage of an assembly and the demands each assembler has on the compute infrastructure. An assembler recommendation would have little practical value if best performing assemblers cannot be operated due to impractical hardware requirements. However, this aspect was covered insufficiently in the past. Finally, a comparison study should be transparent in order to sustain reproducibility. This means that all steps beginning from the raw sequencing data to the final results should be sufficiently documented. Especially the Assemblathon competitions could not fully satisfy this requirement owed to the fact that the assemblies were performed at different institutions and documented at varying extent.</p>
<p>Here, we present a <italic>de novo</italic> assembler evaluation with a strong focus on practical aspects and which addresses the aforementioned unanswered questions. To this end, the main objectives of this Genome Assembly Benchmark Tuned On Bacteria and benchtop sequencers (GABenchToB) are:</p>
<list list-type="bullet"><list-item>
<p>to use real (no synthetic) data originating from benchtop sequencers,</p>
</list-item><list-item>
<p>to use single libraries only of bacterial genomes with an available high-quality reference,</p>
</list-item><list-item>
<p>to consider open licensed as well as commercial assemblers,</p>
</list-item><list-item>
<p>to select assemblers covering different assembly strategies,</p>
</list-item><list-item>
<p>to not perform extensive assembly fine tuning but to rest on default parameters for the different sequencing platforms where possible and to use unprocessed raw reads,</p>
</list-item><list-item>
<p>to include run time benchmark parameters, and</p>
</list-item><list-item>
<p>to ensure for equal executing conditions by using dedicated computing hosts and to deposit all information necessary for reproduction at an open repository.</p>
</list-item></list>
</sec><sec id="s2">
<title>Results</title>
<sec id="s2a">
<title>Evaluation data sets</title>
<p>We have chosen three different bacterial strains for our assembly evaluation: <italic>Escherichia coli O157:H7 Sakai</italic> (American Tissue Culture Collection [ATCC] accession no. BAA-460), <italic>Staphylococcus aureus COL</italic> (Network on Antimicrobial Resistance in <italic>Staphylococcus aureus</italic> [NARSA] accession no. NRS100), and <italic>Mycobacterium tuberculosis H37Rv</italic> (ATCC accession no. 25618). For all three bacteria full reference sequences are available: NCBI Reference Sequence (RefSeq) accession no. NC_002695.1, NC_002128.1 and NC_002127.1 with modifications as described previously <xref ref-type="bibr" rid="pone.0107014-Jnemann1">[2]</xref> were used as a reference for the <italic>E. coli</italic> genome and plasmids; NC_002951.2 and NC_006629.2 for the <italic>S. aureus</italic> genome and plasmid, and NC_000962.2 for the <italic>M. tuberculosis</italic> genome, respectively. The genomes cover a GC-content between 33 and 66% and have a genome size between 2.81 and 5.59 megabases (Mb). Samples of the three bacterial strains were sequenced on BS platforms Ion Torrent PGM (PGM) by Life Technologies and MiSeq (MIS) by Illumina. Both platforms are not only represented by all three organisms but also with different chemistries, i.e. 2×150 base pairs (bp) PE and 2×250 bp PE sequencing for the MiSeq as well as 200 bp and 400 bp sequencing for the PGM, resulting in a total of ten single library data sets (<xref ref-type="table" rid="pone-0107014-t001"><bold>Table 1</bold></xref>). Except for the four <italic>E. coli</italic> data sets, which were used and published previously <xref ref-type="bibr" rid="pone.0107014-Jnemann1">[2]</xref>, all other libraries were generated newly for the purpose of this study.</p>
<table-wrap id="pone-0107014-t001" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0107014.t001</object-id><label>Table 1</label><caption>
<title>Overview of the data sets used in this study and their sequencing yield.</title>
</caption><alternatives><graphic id="pone-0107014-t001-1" position="float" mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0107014.t001" xlink:type="simple"/>
<table><colgroup span="1"><col align="left" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/></colgroup>
<thead>
<tr>
<td align="left" rowspan="1" colspan="1">Platform</td>
<td align="left" rowspan="1" colspan="1">Library</td>
<td align="left" rowspan="1" colspan="1">Software version</td>
<td align="left" rowspan="1" colspan="1">Strain</td>
<td align="left" rowspan="1" colspan="1">Chip/Lane</td>
<td align="left" rowspan="1" colspan="1">Megabases</td>
<td align="left" rowspan="1" colspan="1">Coverage</td>
</tr>
</thead>
<tbody>
<tr>
<td align="left" rowspan="1" colspan="1">PGM</td>
<td align="left" rowspan="1" colspan="1">200 bp<xref ref-type="table-fn" rid="nt101">&amp;</xref> Ion Xpress Plus Fragment<xref ref-type="table-fn" rid="nt104">**</xref></td>
<td align="left" rowspan="1" colspan="1">TSS v3.0<xref ref-type="table-fn" rid="nt105">$</xref></td>
<td align="left" rowspan="1" colspan="1"><italic>E. coli</italic> (Sakai)</td>
<td align="left" rowspan="1" colspan="1">1×316 chip</td>
<td align="left" rowspan="1" colspan="1">733</td>
<td align="left" rowspan="1" colspan="1">133</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">PGM</td>
<td align="left" rowspan="1" colspan="1">400 bp Ion Xpress Plus Fragment<xref ref-type="table-fn" rid="nt104">**</xref></td>
<td align="left" rowspan="1" colspan="1">TSS v3.4<xref ref-type="table-fn" rid="nt105">$</xref></td>
<td align="left" rowspan="1" colspan="1"><italic>E. coli</italic> (Sakai)</td>
<td align="left" rowspan="1" colspan="1">1×318 chip</td>
<td align="left" rowspan="1" colspan="1">1,179</td>
<td align="left" rowspan="1" colspan="1">214</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">PGM</td>
<td align="left" rowspan="1" colspan="1">200 bp Ion Xpress Plus Fragment</td>
<td align="left" rowspan="1" colspan="1">TSS v3.0<xref ref-type="table-fn" rid="nt105">$</xref></td>
<td align="left" rowspan="1" colspan="1"><italic>S. aureus</italic> (COL)</td>
<td align="left" rowspan="1" colspan="1">1×316 chip</td>
<td align="left" rowspan="1" colspan="1">555</td>
<td align="left" rowspan="1" colspan="1">197</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">PGM</td>
<td align="left" rowspan="1" colspan="1">400 bp Ion Xpress Plus Fragment</td>
<td align="left" rowspan="1" colspan="1">TSS v3.2<xref ref-type="table-fn" rid="nt105">$</xref></td>
<td align="left" rowspan="1" colspan="1"><italic>S. aureus</italic> (COL)</td>
<td align="left" rowspan="1" colspan="1">1×318 chip</td>
<td align="left" rowspan="1" colspan="1">1,420</td>
<td align="left" rowspan="1" colspan="1">505</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">PGM</td>
<td align="left" rowspan="1" colspan="1">400 bp Ion Xpress Plus Fragment</td>
<td align="left" rowspan="1" colspan="1">TSS v3.6<xref ref-type="table-fn" rid="nt105">$</xref></td>
<td align="left" rowspan="1" colspan="1"><italic>M. tuberculosis</italic> (H37)</td>
<td align="left" rowspan="1" colspan="1">1/3 x318 chip</td>
<td align="left" rowspan="1" colspan="1">344</td>
<td align="left" rowspan="1" colspan="1">77</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">MiSeq</td>
<td align="left" rowspan="1" colspan="1">2×150 bp PE<xref ref-type="table-fn" rid="nt102">+</xref> Nextera<xref ref-type="table-fn" rid="nt103">*</xref></td>
<td align="left" rowspan="1" colspan="1">MCS v1.2.3</td>
<td align="left" rowspan="1" colspan="1"><italic>E. coli</italic> (Sakai)</td>
<td align="left" rowspan="1" colspan="1">¼ multiplexed lane</td>
<td align="left" rowspan="1" colspan="1">565</td>
<td align="left" rowspan="1" colspan="1">102</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">MiSeq</td>
<td align="left" rowspan="1" colspan="1">2×250 bp PE Nextera<xref ref-type="table-fn" rid="nt103">*</xref></td>
<td align="left" rowspan="1" colspan="1">MCS v2.0.5</td>
<td align="left" rowspan="1" colspan="1"><italic>E. coli</italic> (Sakai)</td>
<td align="left" rowspan="1" colspan="1">¼ multiplexed lane</td>
<td align="left" rowspan="1" colspan="1">776</td>
<td align="left" rowspan="1" colspan="1">141</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">MiSeq</td>
<td align="left" rowspan="1" colspan="1">2×150 bp PE Nextera</td>
<td align="left" rowspan="1" colspan="1">MCS v1.2.3</td>
<td align="left" rowspan="1" colspan="1"><italic>S. aureus</italic> (COL)</td>
<td align="left" rowspan="1" colspan="1">¼ multiplexed lane</td>
<td align="left" rowspan="1" colspan="1">445</td>
<td align="left" rowspan="1" colspan="1">158</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">MiSeq</td>
<td align="left" rowspan="1" colspan="1">2×250 bp PE Nextera</td>
<td align="left" rowspan="1" colspan="1">MCS v2.0.5</td>
<td align="left" rowspan="1" colspan="1"><italic>S. aureus</italic> (COL)</td>
<td align="left" rowspan="1" colspan="1">¼ multiplexed lane</td>
<td align="left" rowspan="1" colspan="1">509</td>
<td align="left" rowspan="1" colspan="1">181</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">MiSeq</td>
<td align="left" rowspan="1" colspan="1">2×250 bp PE Nextera</td>
<td align="left" rowspan="1" colspan="1">MCS v2.0.5</td>
<td align="left" rowspan="1" colspan="1"><italic>M. tuberculosis</italic> (H37)</td>
<td align="left" rowspan="1" colspan="1">15% multiplexed lane</td>
<td align="left" rowspan="1" colspan="1">340</td>
<td align="left" rowspan="1" colspan="1">77</td>
</tr>
</tbody>
</table>
</alternatives><table-wrap-foot><fn id="nt101"><label>&amp;</label><p>base pairs.</p></fn><fn id="nt102"><label>+</label><p>Paired-end sequencing.</p></fn><fn id="nt103"><label/><p>*Same raw data set as in Jünemann et al. <xref ref-type="bibr" rid="pone.0107014-Jnemann1">[2]</xref>.</p></fn><fn id="nt104"><label/><p>**Same raw data set as in Jünemann et al. <xref ref-type="bibr" rid="pone.0107014-Jnemann1">[2]</xref> but re-analyzed using a different sequencing software version. MiSeq, Illumina MiSeq; PGM, Ion Torrent Personal Genome Machine. MCS, MiSeq Control Software; TSS, PGM Torrent Suite Software.</p></fn><fn id="nt105"><label>$</label><p>More stringent filter enabled.</p></fn></table-wrap-foot></table-wrap></sec><sec id="s2b">
<title><italic>De novo</italic> assembler selection</title>
<p>To enable an assembler evaluation we aimed to select a set of <italic>de novo</italic> assemblers regarding the following criteria: assemblers which are (i) representing DBG or OLC approaches; (ii) free-to-use or open source as well as commercial products; (iii) unbiased in terms of the supported sequencing technology or the required sequencing library (processing single and paired-end reads, not relying on mate-pair libraries and no requirement on multiple libraries); (iv) up-to-date regarding to the date of their release or the latest software update; and (v) established and widely used either in recent <italic>de novo</italic> sequencing projects or in other assembler evaluations. Based on these criteria we selected nine representative assemblers: AbySS <xref ref-type="bibr" rid="pone.0107014-Simpson1">[16]</xref>, Celera <xref ref-type="bibr" rid="pone.0107014-Miller1">[17]</xref>, CLC Assembly Cell (CLC bio A/S, Aarhus, Denmark) <xref ref-type="bibr" rid="pone.0107014-CLC1">[18]</xref>, GS De Novo Assembler (454 Life Sciences, Branford, CT) <xref ref-type="bibr" rid="pone.0107014-Life1">[19]</xref>, MIRA <xref ref-type="bibr" rid="pone.0107014-Chevreux1">[20]</xref>, SeqMan Ngen (DNASTAR Inc., WI, USA) <xref ref-type="bibr" rid="pone.0107014-DNASTAR1">[21]</xref>, SOAPdenovo2 <xref ref-type="bibr" rid="pone.0107014-Luo1">[22]</xref>, SPAdes <xref ref-type="bibr" rid="pone.0107014-Bankevich1">[23]</xref>, and Velvet <xref ref-type="bibr" rid="pone.0107014-Zerbino1">[24]</xref> (<xref ref-type="table" rid="pone-0107014-t002"><bold>Table 2</bold></xref>). Some assemblers we did not include in our study, but which performed best in either one or several categories in previous evaluations <xref ref-type="bibr" rid="pone.0107014-Narzisi1">[11]</xref>–<xref ref-type="bibr" rid="pone.0107014-Magoc1">[15]</xref> are: Allpaths-LG <xref ref-type="bibr" rid="pone.0107014-Gnerre1">[25]</xref> because its algorithm requires input data consisting of at least two different libraries (one PE and one MP), ARACHNE <xref ref-type="bibr" rid="pone.0107014-Batzoglou1">[26]</xref> because it combines only long Sanger with MP reads, MaSuRCA <xref ref-type="bibr" rid="pone.0107014-Zimin1">[27]</xref> and SGA <xref ref-type="bibr" rid="pone.0107014-Simpson2">[28]</xref> because both can not handle single-end data, and Phusion <xref ref-type="bibr" rid="pone.0107014-Mullikin1">[29]</xref> because it builds solely upon MP reads.</p>
<table-wrap id="pone-0107014-t002" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0107014.t002</object-id><label>Table 2</label><caption>
<title><italic>De novo</italic> assemblers used for comparison.</title>
</caption><alternatives><graphic id="pone-0107014-t002-2" position="float" mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0107014.t002" xlink:type="simple"/>
<table><colgroup span="1"><col align="left" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/></colgroup>
<thead>
<tr>
<td align="left" rowspan="1" colspan="1">Assembler (acronym)</td>
<td align="left" rowspan="1" colspan="1">Software version</td>
<td align="left" rowspan="1" colspan="1">Type</td>
<td align="left" rowspan="1" colspan="1">Supports scaffolding</td>
<td align="left" rowspan="1" colspan="1">License</td>
<td align="left" rowspan="1" colspan="1">Supported operating systems</td>
</tr>
</thead>
<tbody>
<tr>
<td align="left" rowspan="1" colspan="1">AbySS (ABYSS)</td>
<td align="left" rowspan="1" colspan="1">1.3.5</td>
<td align="left" rowspan="1" colspan="1">DBG<xref ref-type="table-fn" rid="nt106">$</xref></td>
<td align="left" rowspan="1" colspan="1">yes</td>
<td align="left" rowspan="1" colspan="1">commercial<xref ref-type="table-fn" rid="nt109">*</xref></td>
<td align="left" rowspan="1" colspan="1">Windows, Linux</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">Celera (CELERA)</td>
<td align="left" rowspan="1" colspan="1">7.0</td>
<td align="left" rowspan="1" colspan="1">OLC<xref ref-type="table-fn" rid="nt107">&amp;</xref></td>
<td align="left" rowspan="1" colspan="1">yes</td>
<td align="left" rowspan="1" colspan="1">open source</td>
<td align="left" rowspan="1" colspan="1">Windows, Linux</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">CLC Assembly Cell (CLC)</td>
<td align="left" rowspan="1" colspan="1">4.0.10</td>
<td align="left" rowspan="1" colspan="1">DBG</td>
<td align="left" rowspan="1" colspan="1">yes</td>
<td align="left" rowspan="1" colspan="1">commercial</td>
<td align="left" rowspan="1" colspan="1">Windows, Linux, Mac OS</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">GS De Novo Assembler (NEWBLER)</td>
<td align="left" rowspan="1" colspan="1">2.8</td>
<td align="left" rowspan="1" colspan="1">OLC</td>
<td align="left" rowspan="1" colspan="1">yes</td>
<td align="left" rowspan="1" colspan="1">commercial<xref ref-type="table-fn" rid="nt110">**</xref></td>
<td align="left" rowspan="1" colspan="1">Linux</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">MIRA (MIRA)</td>
<td align="left" rowspan="1" colspan="1">3.9.9</td>
<td align="left" rowspan="1" colspan="1">OLC<xref ref-type="table-fn" rid="nt108">#</xref></td>
<td align="left" rowspan="1" colspan="1">no</td>
<td align="left" rowspan="1" colspan="1">open source</td>
<td align="left" rowspan="1" colspan="1">Linux</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">SeqMan Ngen (SEQMAN)</td>
<td align="left" rowspan="1" colspan="1">11.0.0.172</td>
<td align="left" rowspan="1" colspan="1">OLC</td>
<td align="left" rowspan="1" colspan="1">no</td>
<td align="left" rowspan="1" colspan="1">commercial</td>
<td align="left" rowspan="1" colspan="1">Windows, Linux, Mac OS</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">SOAPdenovo2 (SOAP2)</td>
<td align="left" rowspan="1" colspan="1">2.04</td>
<td align="left" rowspan="1" colspan="1">DBG</td>
<td align="left" rowspan="1" colspan="1">yes</td>
<td align="left" rowspan="1" colspan="1">open source</td>
<td align="left" rowspan="1" colspan="1">Linux</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">SPAdes (SPADES)</td>
<td align="left" rowspan="1" colspan="1">2.5.0</td>
<td align="left" rowspan="1" colspan="1">DBG</td>
<td align="left" rowspan="1" colspan="1">yes</td>
<td align="left" rowspan="1" colspan="1">open source</td>
<td align="left" rowspan="1" colspan="1">Linux, Mac OS</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">Velvet (VELVET)</td>
<td align="left" rowspan="1" colspan="1">1.2.08</td>
<td align="left" rowspan="1" colspan="1">DBG</td>
<td align="left" rowspan="1" colspan="1">yes</td>
<td align="left" rowspan="1" colspan="1">open source</td>
<td align="left" rowspan="1" colspan="1">Linux, Mac OS</td>
</tr>
</tbody>
</table>
</alternatives><table-wrap-foot><fn id="nt106"><label>$</label><p>de Bruijn Graph assembler,</p></fn><fn id="nt107"><label>&amp;</label><p>Overlap Layout Consensus assembler,</p></fn><fn id="nt108"><label>#</label><p>MIRA is not a pure OLC assembler but uses also greedy assembler techniques.</p></fn><fn id="nt109"><label/><p><sup>*</sup>Free for non-commercial and academic applications.</p></fn><fn id="nt110"><label/><p><sup>**</sup>Freely available upon request.</p></fn></table-wrap-foot></table-wrap></sec><sec id="s2c">
<title>Assembly evaluation metrics</title>
<p>The evaluation of genome assemblers is a complex problem and single metric based evaluations using e.g., the N50 or NG50 value for comparisons examine only specific aspects of an assembly <xref ref-type="bibr" rid="pone.0107014-Haiminen1">[9]</xref>. On the other hand, Haiminen et al. <xref ref-type="bibr" rid="pone.0107014-Haiminen1">[9]</xref> criticize that providing tables full of different assembly metrics complicate the understanding and interpretation of an evaluation effort and limit their usability in practice. A single metric capturing the trade-off between contig contiguity and accuracy are feature response curves (FRC) as proposed by Narzisi and Mishra <xref ref-type="bibr" rid="pone.0107014-Narzisi1">[11]</xref>. However, one limitation of FRC is their requirement of read based contig layouts, which are naturally not available for DBG assemblers. To overcome this limitation, Haiminen et al. <xref ref-type="bibr" rid="pone.0107014-Haiminen1">[9]</xref> introduced FRCbam, which allows generating a read layout by aligning the sequencing reads to the assembled contigs by incorporating paired-end and mate-pair information. However, this is also a strong limitation for the evaluation of assemblies based on BS data, as no paired-end libraries are available (PGM) or are of limited use due to their small insert-size (MiSeq). Another single metric is the Log Average probability proposed by Ghodsi et al. <xref ref-type="bibr" rid="pone.0107014-Ghodsi1">[30]</xref> but it was designed to measure assemblies without knowledge of the true reference. Here, we assessed assembly accuracy using the recently published assembly evaluation software QUAST <xref ref-type="bibr" rid="pone.0107014-Gurevich1">[31]</xref> following in essence the GAGE-B evaluation <xref ref-type="bibr" rid="pone.0107014-Magoc1">[15]</xref>. For that matter, assembly contiguity and accuracy are measured by two metrics introduced by QUAST and another two metrics are used to measure system workload: i.e. the NGA50 length, the number of mis-assemblies, the total run time (wall clock time), and the average system utilization (see the <xref ref-type="sec" rid="s4">Methods</xref> section for a detailed definition of the metrics).</p>
<p>It is to be noted that we did not compare assemblies and platforms separately for contigs and scaffolds in order to preserve a focused evaluation. From a pragmatic point of view it is contradictory to use contigs for an evaluation even though scaffolds of the same assembly are available. Additionally, scaffolding requires PE or MP reads. As no PE-libraries have been available for the PGM platform scaffolding of PGM data was not possible but disabling scaffolding would unnecessarily disfavor the MiSeq data sets. Therefore, the term contig is used, with appropriate remarks, ambiguously for both contigs and scaffolds (see <xref ref-type="table" rid="pone-0107014-t001"><bold>Table 1</bold></xref> for an overview which data sets are based on PE data and <xref ref-type="table" rid="pone-0107014-t002"><bold>Table 2</bold></xref> which assembler supports scaffolding).</p>
</sec><sec id="s2d">
<title>Genome coverage</title>
<p>One major parameter that influences the result of a genome assembly is the amount of available data to cover the whole genome, i.e. the depth of coverage. Insufficient coverage may lead to an inferior assembly result either due to uncovered genomic regions or due to the impossibility to overrule randomly distributed sequencing errors. In contrast, each increase of the target coverage involves a higher load of the sequencing platform capacity, which comes at the price of an increased sequencing cost per library as well as of a growing computational effort due to the increased data volume. Also, non-randomly distributed sequencing errors (e.g., systematic errors related to homopolymer regions) can not be ruled out by redundant sequencing and accumulate with increasing coverage which can trick assemblers to handle them as true biological events <xref ref-type="bibr" rid="pone.0107014-Hubisz1">[32]</xref>. Therefore, finding a balance between sequencing effort, cost, assembly turn-around time and assembly quality is crucial in advance to the sequencing itself. The observation that an ad infinitum increased depth of coverage does not necessarily improve assembly results was already reported by Lin et al. <xref ref-type="bibr" rid="pone.0107014-Lin1">[10]</xref>. They found that for seven assemblers operated on six simulated data sets based on a eukaryotic chromosome the depth of coverage at which the N50 length plateau was reached never exceeded values of 50. Consequentially, an upper coverage threshold of 70x was used to compare the assembly results. Similar examinations in further studies yielded comparable results <xref ref-type="bibr" rid="pone.0107014-Haiminen1">[9]</xref>, <xref ref-type="bibr" rid="pone.0107014-Magoc1">[15]</xref>, <xref ref-type="bibr" rid="pone.0107014-Illumina1">[33]</xref>. However, common to all these studies were shortcomings regarding the resolution, the range of assemblers, the amount of data at which this effect was studied, and most of all only Illumina reads were used. To address the question to what extent depth of coverage affects assembly results we have randomly sub-sampled all PGM and MiSeq data sets into a fix range of subsets. All subsets were subsequently assembled using three DBG (CLC, ABYSS, and SPADES) and three OLC assemblers (NEWBLER, CELRA, and MIRA). This reduced assembler set was chosen to cope with the high computational effort while maintaining meaningful results with regard to our assembler selection criteria.</p>
<p>Independent of the data set and the assembler, we found out that for each assembler and data set a window of reasonable coverage can be identified which is confined by a lower and upper bound, which mark the areas of inappropriate coverage (<xref ref-type="fig" rid="pone-0107014-g001"><bold>Figure 1</bold></xref>). Given the <italic>E. coli</italic> Sakai data sets, too low coverages result in inferior NGA50 lengths progressively improving with increasing coverage, whereas above the upper bound a further increase in the depth of coverage does not necessarily effects superior assemblies. For the PGM platform oversampling, i.e. too high coverage, can even have a negative impact on the assembly especially if combined with OLC assemblers. Here, NGA50 lengths are constantly falling after reaching a specific maximum. This effect is apparent for both the PGM 200 bp and PGM 400 bp data, albeit the global coverage maxima are higher for the 400 bp (between 40- and 100-fold coverage) than for the 200 bp data sets (between 40- and 50-fold coverage). The MiSeq platform is not susceptible to oversampling. After reaching sufficient coverage, NGA50 lengths are mostly saturated and show only moderate improvement or degradation, marking the upper bound of appropriate coverage for the MiSeq data sets. These findings are in good accordance with the other data sets and with other metrics, as e.g. the number of mis-assemblies (local and non-local mis-assemblies) or the number of assembly errors (insertions, deletions and substitutions) and is further supported by another sub-sampling approach (see Supporting Information <bold><xref ref-type="supplementary-material" rid="pone.0107014.s013">Text S1</xref></bold> and <bold><xref ref-type="supplementary-material" rid="pone.0107014.s001">Figures S1</xref>–<xref ref-type="supplementary-material" rid="pone.0107014.s005">S5</xref></bold>). In order to achieve comparability between the data sets and the assemblers, we have selected two different cutoffs, reflecting the described upper coverage bounds, at which we sub-sample our data sets prior to any consecutive analysis. The 40-fold coverage limit was chosen for the PGM 200 bp data, whereas all MiSeq and the remaining PGM 400 bp data sets were sub-sampled at 75-fold depth of coverage. Even though these thresholds do not always represent individual global optima, they are not in favor or disfavor of any particular assembler or sequencing platform and in good accordance with previous findings <xref ref-type="bibr" rid="pone.0107014-Haiminen1">[9]</xref>, <xref ref-type="bibr" rid="pone.0107014-Magoc1">[15]</xref>, <xref ref-type="bibr" rid="pone.0107014-Illumina1">[33]</xref>.</p>
<fig id="pone-0107014-g001" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0107014.g001</object-id><label>Figure 1</label><caption>
<title>Effect of the depth of coverage on the assembly efficiency measured by NGA50 sizes based on randomly sub-sampled <italic>E. coli</italic> Sakai data sets.</title>
<p>The coverage is referring to the average depth each genomic position is covered by the sequencing reads and not to the average depth of coverage the assemblies are actually reaching. The fitted average is, for each data set, the mean of all NGA50 lengths at each coverage fitted to a nonlinear local regression model. Sub-sampling was done in steps as a percentage of the original full sample size; hence, the x-axis ranges of the four sub-plots differ. The dotted vertical lines mark the finally used 40-fold (PGM 200 bp) and 75-fold coverage limits (PGM 400 bp, MiSeq 2×150 bp and MiSeq 2×250 bp).</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0107014.g001" position="float" xlink:type="simple"/></fig></sec><sec id="s2e">
<title>K-mer parametrization of de Bruijn Graph assemblers</title>
<p>Generally stated, DBG assemblers break raw sequencing reads into a set of k-mers and construct a graph by connecting the suffix and prefix nodes of overlapping k-mers by edges. By that, the size of the DBG depends only on the length of the k-mer and not on the initial read length distribution. Albeit this has a beneficial effect on the memory footprint and graph traversing time, it comes at the price for another parameter optimization step. Surprisingly, we are not aware of any study that tried to analyze this optimization problem extensively, nor were it a topic in previous assembly evaluation surveys, even though its existence is common knowledge in the assembly community. To meet this shortcoming, we have examined the effect of the k-mer parameter <italic>k</italic> on all data sets and all DBG assemblers for which a <italic>k</italic> needs to be specified (ABYSS, SOAP2 and VELVET) by iteratively running these assemblers at all supported values of <italic>k</italic>. Two main effects can be seen. First, the choice of an optimal <italic>k</italic> is depending on the underlying data set. Assemblages of different data sets using the same assembler provided different best performing values of <italic>k</italic>. Second, the optimal <italic>k</italic> also depends on the assembler and strongly varies even though the same data set was assembled. An approximation of an optimal <italic>k</italic> is further complicated by the fact that already the results based on one assembler and one data set show more than one local optima along the full spectrum of <italic>k</italic>. Hence, best performing k-mer parameters for the consecutive assemblies were determined by optimizing over the whole possible k-mer spectrum. For PGM data sets a k-mer optimization is less reasonable. Even though comparable pattern as for the MiSeq data were observed, overall unsatisfactory results were obtained independent of <italic>k</italic>. For an in depth description on the K-mer parametrization of de Bruijn Graph assemblers see the Supporting Information (<bold><xref ref-type="supplementary-material" rid="pone.0107014.s013">Text S1</xref></bold> and <bold><xref ref-type="supplementary-material" rid="pone.0107014.s006">Figures S6</xref></bold> and <bold><xref ref-type="supplementary-material" rid="pone.0107014.s007">S7</xref></bold>).</p>
</sec><sec id="s2f">
<title>Evaluation of <italic>de novo</italic> assemblies</title>
<p>Combining ten data sets and nine assemblers we have generated 90 <italic>de novo</italic> assemblies. For every single assembly, the assembly effort was measured using QUAST <xref ref-type="bibr" rid="pone.0107014-Gurevich1">[31]</xref>. Results were transformed into a spread-sheet readable tabulator separated file format and stored in addition to the complete assembly output, log files, and run time benchmarking results. In <xref ref-type="fig" rid="pone-0107014-g002"><bold>Figure 2</bold></xref> we present the results of each assembly using the following two key metrics: the NGA50 length and the number of mis-assemblies. As mentioned before, these figures show either scaffolds or contigs according to the data, i.e. scaffolds for all MiSeq assemblies except for MIRA and SEQMAN and contigs for all others including the PGM assemblies. Similarly, <xref ref-type="fig" rid="pone-0107014-g003"><bold>Figure 3</bold></xref> shows the central aspect of the running time benchmark, i.e. the wall clock time and the average system utilization. Details about specific assembly parameters and the full execution pipeline are given in the Supporting Information (<bold><xref ref-type="supplementary-material" rid="pone.0107014.s013">Text S1</xref></bold>) or can be looked up at the following project site: <ext-link ext-link-type="uri" xlink:href="ftp://ftp.cebitec.uni-bielefeld.de/pub/GABenchToB" xlink:type="simple">ftp://ftp.cebitec.uni-bielefeld.de/pub/GABenchToB</ext-link>.</p>
<fig id="pone-0107014-g002" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0107014.g002</object-id><label>Figure 2</label><caption>
<title>Comparison between the <italic>de novo</italic> genome assemblies based on the NGA50 length and the number of mis-assemblies.</title>
<p>The NGA50 length (<bold>A</bold>, in kilobases) and the number of mis-assemblies (<bold>B</bold>, combining local and non-local mis-assemblies) on the y-axis are either contig or scaffold based, respectively. Scaffolds for MiSeq 2×150 bp and MiSeq 2×250 bp assemblies obtained by ABYSS, CELERA, CLC, NEWBLER, SOAP2, SPADES, and VELVET; contigs for MiSeq assemblies obtained by MIRA and SEQMAN as well as for all PGM assemblies. The second plot (<bold>B</bold>) is further divided into two plot rows where the upper row has an altered y-axis scale only showing high rates of mis-assemblies ranging from two hundred up to thousand.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0107014.g002" position="float" xlink:type="simple"/></fig><fig id="pone-0107014-g003" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0107014.g003</object-id><label>Figure 3</label><caption>
<title>Computing time of <italic>de novo</italic> genome assemblies.</title>
<p>Based on the elapsed wall clock time (<bold>A</bold>, in hours) and the total CPU utilization (<bold>B</bold>, in percent and relative to the 48 available CPU cores of the executing compute host). With regard to the CPU utilization, all assemblies have been instructed via proper parameterization to make maximal use of the 48 available CPU cores. The only exceptions to this were SEQMAN, which does not support parallelization, and CELERA, which due to configuration constraints has altering concurrency and multi-threading parameters for different internal processes. For DBG assemblers only run time and CPU utilization of the single assemblies with the best performing k-mer parameter are shown and not the summation of the full k-mer optimization procedure (for SPADES and CLC this is equivalent).</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0107014.g003" position="float" xlink:type="simple"/></fig>
<p>At this repository, also the 90 assembly results together with all computed assembly metrics can be accessed. In addition to this core set, each of the more than two thousand assemblies used for the coverage and k-mer parameter optimization are deposited here, with the limitation that not for all of those assembly and run time metrics are available.</p>
</sec></sec><sec id="s3">
<title>Discussion</title>
<p>One of our main goals was to provide the research community with a practice-oriented <italic>de novo</italic> assembly evaluation of bacterial genomes sequenced by benchtop instruments. In this spirit, our study is intended to be more than a pure assembler comparison following the question which assembler performs best. Also, it is not a sequencing platform comparison trying to answer which platform allows for the best assemblies. Instead, given a diverse set of sequencing data, we identified those assemblers, which are best suited to handle individually different data sets and meet specific requirements such as the least amount of mis-assemblies or the fastest compute time.</p>
<p>Consequently, given the assembly results in <xref ref-type="fig" rid="pone-0107014-g002"><bold>Figure 2</bold></xref> and <xref ref-type="fig" rid="pone-0107014-g003"><bold>Figure 3</bold></xref>, none of the assemblers emerges as the overall winner. The individual assembler performance as given by the NGA50 length strongly depends on the nature of the data (<xref ref-type="fig" rid="pone-0107014-g002"><bold>Figure 2A</bold></xref>). For MiSeq reads the assembler selection is less restricted than it is for PGM reads. Both, DBG and OLC assemblers are generally applicable on the MiSeq data sets. The <italic>E. coli</italic> MiSeq 2×150 bp and 2×250 bp assemblies, for example, yield NGA50 values of the same magnitude (about 155 kb) for both approaches. The highest MiSeq 2×150 bp <italic>S. aureus</italic> NGA50 lengths originate from DBG assemblers, whereas OLC assemblers performed better on the MiSeq 2×250 bp <italic>S. aureus</italic> and <italic>M. tuberculosis</italic> data. In contrast, assembled PGM data yielded better results more often when using OLC than DBG assemblers. Comparing the sum of all NGA50 lengths of the DBG assembled PGM 200 bp and 400 bp data sets with those using OLC, a more than 2-fold increase can be observed (719 megabases (Mb) compared to 1518 Mb). The only exception to this is the DBG SPADES assembler, which achieves NGA50 lengths on a par with the OLC assemblers. Omitting SPADES from this comparison, the proportion changes from a 2-fold increase to an over 6-fold increase (220 Mb compared to 1518 Mb), clearly showing the difficulties DBG assemblers have while dealing with PGM data. Considering the NGA50 length, we want to highlight the DBG assembler SPADES and the OLC assemblers NEWBLER and MIRA, as they repeatedly perform above average in their category and are more robust with respect to the kind of sequencing data.</p>
<p>Laying focus on the number of mis-assemblies, a different picture arises (<xref ref-type="fig" rid="pone-0107014-g002"><bold>Figure 2B</bold></xref>). The NGA50 is the NG50 length after contigs have been split at each observed mis-assembly position. Resting on this relation, the naïve assumption would be that lots of mis-assemblies are directly reflected by a low NGA50 and vice versa. However, here a high and low mis-assembly rates could be observed independent of the NGA50 length for both assembler approaches across all data sets. The highest rate of mis-assemblies originates from an assembly that can be, measured against the NGA50, declared as failed (<italic>S. aureus</italic> PGM200 bp SEQMAN with NGA50 of 2292 bp). In contrast, some assemblies with also a very low NGA50 show very few mis-assemblies (e.g., all PGM ABYSS assemblies). However, discussing rates of mis-assemblies for assemblies with extremely low NGA50 values has little meaning. Assemblies with a reasonable NGA50 length again show both, i.e. a high (e.g., the SOAP2 and VELVET MiSeq <italic>E. coli</italic> and <italic>M. tuberculosis</italic> assemblies) and low (e.g., the SPADES MiSeq <italic>E. coli</italic> assemblies) rate of mis-assemblies. Of those, three assemblers show the most consistent pattern of mis-assemblies. While SPADES produced the least mis-assemblies in total across all data sets and sequencing platforms, NEWBLER produced high rates of mis-assemblies only when dealing with MiSeq data, and MIRA had one of the most miss-assembled contigs across all platforms. For all other assemblers, the number of mis-assemblies depended on the processed data and varies from very high to very low. Moreover, the NGA50 metric shows no significant correlation with the mis-assembly rates (data not shown). This implies, that a low NGA50 value is not necessarily equivalent to many mis-assemblies. Instead, it simply indicates a comparably inferior assembly, either due to many mis-assemblies or low assembly contiguity. These findings are also consistent with other metrics, e.g. the amount of fully covered genes and the number of assembly errors (insertions, deletions, and substitutions; <bold><xref ref-type="supplementary-material" rid="pone.0107014.s008">Figure S8</xref></bold>).</p>
<p>Genomes of extreme GC-rich or GC-poor bacteria are known to be challenging for genome assemblers as amplification biases of GC-poor or GC-rich regions can result in uneven genome coverage. Here, a weak relationship between the genomic GC-content and assembly contiguity could be found. Assemblages of the GC-poor <italic>S. aureus</italic> genome (33% GC) tend to reach higher NGA50 lengths than the <italic>E. coli</italic> (51% GC) and the GC-rich <italic>M. tuberculosis</italic> (66% GC) genome, for which on average the lowest NGA50 lengths were achieved. Likewise, the <italic>S. aureus</italic> assemblies exhibited fewer mis-assemblies than those of the other two genomes. However, the relatively inferior <italic>M. tuberculosis</italic> assemblies cannot be entirely explained by increased mis-assemblies, as they are comparable to the ones based on the <italic>E. coli</italic> genome. Instead, this discrepancy might be explained by the finding that extreme GC-rich regions are especially difficult to amplify <xref ref-type="bibr" rid="pone.0107014-Arezi1">[34]</xref>, possibly lowering the assembly completeness and by that the contiguity. Despite these findings, a general conclusion on the effect of the GC-content on genome assemblies cannot be drawn, as this would require a broader range of differing genomes to be analyzed. In addition, the differences shown here are not clear enough and for all genomes a successful assembly could be generated. This is also supported by a previous study, which reports that the degree of a GC bias, the factor most influencing the assembly contiguity, correlates neither with the mean GC content nor with the standard deviation of GC content of a genome <xref ref-type="bibr" rid="pone.0107014-Chen1">[35]</xref>. In the same study it could also be shown that a sufficient depth of coverage can compensate for a GC bias, which may explain the comparatively low differences observed here with regard to the sub-sampling optimized approach used in our study.</p>
<p>One neglected aspect in preceding assembler evaluation studies has been the computational cost of an assembly. By measuring the wall clock time of all assembly processes we observed a great discrepancy between DBG and OLC assemblers (<xref ref-type="fig" rid="pone-0107014-g003"><bold>Figure 3A</bold></xref>). With the exception of SPADES, all DBG assemblers finished within less than 20 minutes, the majority even within less than five minutes, whereas OLC assemblers took from eight minutes up to 20 hours. NEWBLER is to be highlighted positively by showing consistently the shortest run time of the OLC assemblers. CELERA and MIRA, on the contrary, repeatedly exceeded run times of three hours. However, for all DBG assemblers only the run time of a single assembly effort is shown, i.e. of the single assembly call resulting in the highest N50 length (<bold><xref ref-type="supplementary-material" rid="pone.0107014.s011">Table S1</xref></bold>). So the total wall clock time for an entire assembly project needs to be adjusted with respect to the chosen k-mer optimization strategy and may markedly reduce the outstanding performance of the DBG assemblers. Exceptions to this are the assemblers CLC and SPADES as both do not rely on an external k-mer optimization step. Thus, their run times are equivalent to the overall needed run times. In this sense, CLC outperforms all other assemblers many times over. SPADES prolonged execution times, in contrast, can be explained by its operating procedures, as in the case of MiSeq PE data six and for PGM data five consecutive assemblies were performed internally.</p>
<p>A good indicator showing to which extent an assembler benefits from a parallelized computing environment is the average CPU utilization (<xref ref-type="fig" rid="pone-0107014-g003"><bold>Figure 3B</bold></xref>). Surprisingly, only ABYSS is nearly full parallelized. All other assemblers have an average CPU utilization below 50%, which means that of the 48 available and requested CPUs, on average, only half of them were used during the full assembly procedure. Next to ABYSS, CLC and SOAP2 show the second and third best CPU utilizations, respectively. Also CLC and SOAP2 have a higher utilization if operating on MiSeq data than on PGM, showing that they are obviously optimized for Illumina data. All other assemblers have a total CPU utilization below 20%. This implies that the running time of those assemblers cannot be increased considerably by assigning more CPU cores. However, a low CPU utilization does not necessarily result in long running times, as demonstrated by VELVET, which always finished in less than four minutes but never exceeded a comparably low workload of 13.3%. One aspect negatively influencing the CPU utilization are input and output (I/O) operations, causing processes to enter a waiting state. Here, most critical are I/O operations caused by swapping when system memory is insufficient. The memory usage of our assemblies was very different but system memory was always sufficient and no assembly process was waiting because of swapping (<bold><xref ref-type="supplementary-material" rid="pone.0107014.s009">Figure S9</xref></bold>). However, some assemblers (e.g., MIRA, SPADES and CELERA) utilize or demand considerably more memory than others, which should be considered before an assembly attempt in order to circumvent swapping. One possible solution, besides the extension of the system memory, is to make use of specific memory constraining parameters that memory intensive assemblers usually offer. With regard to the average system utilization, we want to clarify that the assemblers are different in terms of the implemented parallelization and the internal assembly pipeline. Thus, a low CPU utilization does not mean that the entire assembly is inadequately parallelized, but that, for instance, parts of the assembly are constrained to system I/O (e.g., because of data pre- and post-processing), resulting in wait times of the depending processes. Therefore, this metric should not be considered as a fixed upper limit of the parallelization capabilities of each assembler. Instead, it reflects to what extent an assembler scales, in terms of run time, with the provided computing power, and helps to find a suitable combination between assemblers and the available hardware infrastructure.</p>
<p>One central aspect of this study was to compare the assemblies from a practical point of view. By that, we omitted additional data processing steps like, for instance, error correction methods. However, to respond to the question whether upstream error correction is reasonable and which assembler would profit from such methods we have exemplary used two different read correction methods on our data sets (BayesHammer from SPAdes <xref ref-type="bibr" rid="pone.0107014-Bankevich1">[23]</xref> for MiSeq data and Coral version 1.4 <xref ref-type="bibr" rid="pone.0107014-Salmela1">[36]</xref> for PGM data) and compared the consecutive assemblies with those using uncorrected data (<bold><xref ref-type="supplementary-material" rid="pone.0107014.s010">Figure S10</xref></bold>). In essence, the observed differences are marginal. Even for those assemblers that do not include an error correcting pre-processing step (e.g., SOAP2, VELVET and NEWBLER) the beneficial effects are, albeit partially present, not altering their individual performance.</p>
<p>In this evaluation, we did not perform extensive parameter optimization, i.e. whenever possible we used default parameters. For mandatory or data specific parameters without default values we have chosen appropriate values (details given in <bold><xref ref-type="supplementary-material" rid="pone.0107014.s013">Text S1</xref></bold>). The only exception to this was the k-mer parameter optimization. We have shown that an optimal k-mer highly depends on both the assembler as well as the given data set. This implies that unless the assembler itself offers a suitable k-mer parameter estimation (as e.g., CLC) or default values (as e.g., SPADES), currently the best solution is to pursue a trial-and-error approach. Of course, this problem is not described for the first time and algorithms have been developed to predict optimal k-mer parameters <italic>a priori</italic>. KmerGenie, for instance, uses a heuristic to generate k-mer abundance histograms in order to estimate the best possible k-mer value <xref ref-type="bibr" rid="pone.0107014-Chikhi1">[37]</xref>. However, for our data sets the optimal k-mer as predicted by KmerGenie did not matched the k-mer length at which the best assembly was achieved (data not shown). This may be caused by parameter estimations inferred only from the input data, which cannot take into account assembler peculiarities. Still, k-mer estimation may prove useful for other data sets and, especially due to quick heuristics, it is to be preferred over randomly chosen or alleged established k-mer lengths. Parameters proven successful in the past may not be adequate for new assembly problems. The downsides of the trial-and-error approach, in turn, are drastically increased running times countering the speed advantage of DBG assemblers. Besides the k-mer parameter, testing and comparing various parameter settings for each assembler is possible beyond the scope of every evaluation effort simply due to the high computational cost. Moreover, results of comparisons in which assemblies were highly optimized are hard to transfer to other application scenarios, weakening the overall conclusions of such a comparison. Therefore, good default parameters and standardized recipes are needed to support unbiased and useful comparisons. Every evaluation is affected by the applied evaluation procedure and the used metrics. Therefore, the results of this study cannot be interpreted as final principles to rule in or out individual assemblers, but to give a general advice which assemblers to shortlist in consideration of an upcoming bacterial genome assembly. Nevertheless, given the scope of our evaluation we want to highlight some promising combinations between assemblers and bacterial BS data. The most obvious recommendation is to pair different BS platforms with specific assembler approaches, i.e. PGM data is better combined with OLC assemblers whereas MiSeq data shows stronger preferences towards DBG assemblers. The only exception here is the CELERA assembler, which consistently performs better on MiSeq than on PGM data. For MiSeq data, promising DBG assemblers to begin with are SPADES and CLC. Both assemblers offer good performing default k-mer parameters, are generally easy to execute and show one of the highest NGA50 and lowest mis-assembly rates among the DBG assemblers. In addition, SPADES also performed best on PGM data among DBG assemblers. The CLC assembler shows the least memory footprint and the notably fastest running time of all assemblers, which qualifies it for quick and reasonable draft assemblies. Given MiSeq data and a highly parallelized computing infrastructure, the ABYSS assembler might also be an option, as it generates good assembly results while offering the best CPU utilization. For PGM data, researchers should consider to sub-sample their data to a coverage between 40 and 80-fold prior to an assembly in order to prevent negative oversampling effects. The two OLC assemblers that are a good entry point for PGM data sets are MIRA and NEWBLER. MIRA is able to achieve very high NGA50 values particular at higher coverages but comes at the price of more mis-assemblies and a longer running time. NEWBLER, in contrast, convinces with the shortest running time of all OLC assemblers and a low rate of mis-assemblies. Finally, it is to be noted that there is still a great discrepancy between researchers who are developing or evaluating genome assemblers and researchers who simply want to use them. The former ones take great care to avoid exaggerated generalizations, like to conclude that a particular assembler provides the best assemblies. The latter ones, on the other hand, are confronted with concrete application scenarios and therefore require decision-making support without needing to perform extensive evaluations personally. Therefore, evaluations should consider realistic assembly scenarios and include assembly metrics that summarize several assembly features into easy to communicate metrics.</p>
</sec><sec id="s4" sec-type="methods">
<title>Methods</title>
<sec id="s4a">
<title>Library preparation and sequencing</title>
<p>Growing and DNA extraction of the entero-haemorrhagic <italic>Escherichia coli</italic> (EHEC) O157:H7 Sakai Japanese 1996 outbreak strain was done as previously described <xref ref-type="bibr" rid="pone.0107014-Mellmann1">[38]</xref>. For <italic>Staphylococcus aureus</italic> COL, an early methicillin-resistant strain originally isolated in a hospital in Colindale (United Kingdom) <xref ref-type="bibr" rid="pone.0107014-Jevons1">[39]</xref>, growing conditions were the same as for <italic>E. coli Sakai</italic>. For effective cell lysis of <italic>S. aureus</italic> an additional step to the before mentioned DNA isolation protocol was essential. It was performed with Lysostaphin (Sigma-Aldrich, Taufkirchen, Germany, final concentration100 µg/ml), for 30 min at 37°C. Isolated DNA from <italic>Mycobacterium tuberculosis H37Rv</italic> was kindly provided by the group of Stefan Niemann (Forschungszentrum Borstel, Borstel, Germany). Growing and isolation of <italic>M. tuberculosis</italic> high molecular genomic DNA was performed as described earlier <xref ref-type="bibr" rid="pone.0107014-vanEmbden1">[40]</xref>.</p>
<p>As described previously, sequencing of the <italic>S. aureus</italic> and <italic>M. tuberculosis</italic> strains was carried out for both the MiSeq 2×150 bp and 2×250 bp sequencing runs, respectively <xref ref-type="bibr" rid="pone.0107014-Jnemann1">[2]</xref>. A minor modification was applied to the <italic>M. tuberculosis</italic> library, which was pooled after gel-extraction with other lane samples according to their molarity such that a 15 percent ratio was reached. Sequencing on the Ion Torrent PGM was also done as described before for the <italic>E. coli</italic> 200 bp and 400 bp sequencing libraries <xref ref-type="bibr" rid="pone.0107014-Jnemann1">[2]</xref>. The two PGM <italic>E. coli</italic> 200 bp and 400 bp data sets were re-analyzed using the Torrent Sequencing Software (TSS) v3.0 and v3.4, respectively. PGM sequencing of <italic>S. aureus</italic> COL was performed in the same manner as it was described for <italic>E. coli</italic> Sakai with one minor modification, i.e. for the 400 bp sequencing run the TSS version was v3.2. Sequencing of <italic>M. tuberculosis</italic> was performed with the Ion PGM Template OT2 Kit (Life Technologies, Darmstadt, Germany) and the Ion PGM Sequencing 400 kit (Life Technologies) according to the manufacturer's instructions. Library preparation and quality controls were performed just as described for the <italic>E. coli</italic> Sakai 400 bp library. The TSS version was v3.6 for <italic>M. tuberculosis</italic> sequencing. Independent of the applied TSS version, the software parameters and quality filter criteria remained the same, i.e. the more stringent filter was enabled and the base recalibration was disabled.</p>
</sec><sec id="s4b">
<title><italic>De novo</italic> genome assemblies</title>
<p>According to the findings on the genome coverage analysis, all data sets were sub-sampled prior to the <italic>de novo</italic> genome assembly. For the PGM 200 bp data a 40-fold coverage threshold was chosen, whereas PGM 400 bp and all MiSeq data were sub-sampled to 75-fold coverage. For each MiSeq data set insert size distribution was determined by mapping the PE reads to their corresponding reference using the <italic>aln</italic> and <italic>sampe</italic> module of BWA v0.5.10 <xref ref-type="bibr" rid="pone.0107014-Li2">[41]</xref>. Thereafter, the low and high boundaries of the insert sizes, as well as mean and standard deviation were calculated using the same method as implemented in BWA (<bold><xref ref-type="supplementary-material" rid="pone.0107014.s012">Table S2</xref></bold>). MiSeq FASTQ files were additionally edited to cope with special file format prerequisites of individual assemblers having different standards for the pairing information of PE reads.</p>
<p>All assemblies were independently computed on ten identical compute hosts, i.e. A+ Server 2024G-TRF (Super Micro Computer Inc., San Jones, CA, USA) equipped with four AMD Opteron 6168 processors, each with 1.90 GHz and 12 cores and in total 128 GB system memory. These machines were chosen as they provide reasonable computing power and a high degree of parallelization for asset costs below 10,000 Euros. Custom shell scripts were used to submit assembly bulk jobs to a Sun Grid Engine instance and the scheduler was utilized to consecutively distribute individual jobs among the ten compute hosts. Custom wrapper scripts for each assembler were used to prepare and initiate the actual assembly. To prevent network file system influences on the benchmarking results all necessary input data was copied to local storage prior to the assemblies. To guarantee that per compute host only one individual assembly job was executed at a time, each job was configured in such a way that it consumed the entire system resources regardless of the actual workload.</p>
<p>For recording run time statistics, each plain assembly process was wrapped once again using the ‘<italic>/usr/bin/time -v</italic> ’ system call. Additionally, at an interval of five seconds a ‘<italic>ps -o ’‘%cpu =  %mem =  cputime =  etime =  nlwp =  size =  vsize =  sz =  rss =  lstart =  psr =  comm = </italic>’ system call was invoked to monitor detailed processor and memory utilization of all assembly threads while the programs were executed. Details about used assembler versions are given in <xref ref-type="table" rid="pone-0107014-t002"><bold>Table 2</bold></xref>. After the assemblies were finished, QUAST v2.1 <xref ref-type="bibr" rid="pone.0107014-Gurevich1">[31]</xref> was executed on the resulting contig or scaffold FASTA files with the minimum contig length filter ‘<italic>–min-contig</italic>’ set to 200 and the parameters ‘<italic>–gage –genes –gene-finding</italic> ’ enabled. QUAST utilizes MUMmer <xref ref-type="bibr" rid="pone.0107014-Kurtz1">[42]</xref> to align contigs to a given reference and infer various assembly metrics. Regarding the measurement of the assembly accuracy, our evaluation effort follows in essence the GAGE-B evaluation <xref ref-type="bibr" rid="pone.0107014-Magoc1">[15]</xref>. In the following, the metrics used for our main comparison are explained briefly:</p>
<list list-type="bullet"><list-item>
<p>NGA50 describes the length of the last contig that is taken from all assembled contigs sorted in descending order by contig length in such a way that the summarized length of this and all previously selected contigs have at least 50% of the size of the corresponding genome. Contigs were split at all mis-assembly positions prior to this calculation.</p>
</list-item><list-item>
<p>The number of mis-assemblies, i.e. the combined number of relocations, translocations and inversions independent of the affected genomic area.</p>
</list-item><list-item>
<p>Wall clock time refers to the time a plain assembly process takes in total from the very beginning to the very end. This measurement does not include any pre- or post-processing procedure and is not corrected for the system load, degree of parallelization or any software dependent idle time.</p>
</list-item><list-item>
<p>The average system utilization <italic>U</italic> describes the degree of parallelization of an assembly process in percent and is defined as follows:<disp-formula id="pone.0107014.e001"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pone.0107014.e001" xlink:type="simple"/></disp-formula></p>
</list-item></list>
<p>Where <italic>t<sub>u</sub></italic> refers to the accumulated user time for which all CPUs were busy executing the assembly, <italic>t<sub>sys</sub></italic> to the amount of time the CPUs spent on system calls on behalf of the assembly process, <italic>t<sub>wc</sub></italic> to the wall clock time of the entire assembly and <italic>n<sub>cpu</sub></italic> to the number of available CPUs.</p>
<p>An average system load of 100% corresponds to 100% work load of all 48 available CPU cores for the entire execution, illustrating maximum possible parallelization of all parts of an assembly. In contrast, a system load of 2.08% means that for the entire execution only one of the 48 available cores was occupied, which is synonymous to no parallelization. Finally, assembly and run time metrics were collected and processed using custom Perl and shell scripts. Plots were generated using the statistical software suite R v 2.9.10 <xref ref-type="bibr" rid="pone.0107014-Team1">[43]</xref> and the lattice R-package <xref ref-type="bibr" rid="pone.0107014-Sarkar1">[44]</xref>. For an in-detail description of the complete bioinformatic analysis it is referred to the Supporting Information (<bold><xref ref-type="supplementary-material" rid="pone.0107014.s013">Text S1</xref></bold>).</p>
</sec></sec><sec id="s5">
<title>Supporting Information</title>
<supplementary-material id="pone.0107014.s001" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s001" position="float" xlink:type="simple"><label>Figure S1</label><caption>
<p><bold>Effect of the depth of coverage on NGA50 lengths using random sub-sampling.</bold> Shown are in rows the results of randomly sub-sampled <italic>S. aureus</italic>, <italic>E. coli</italic>, and <italic>M. tuberculosis</italic> data sets, respectively. The coverage is referring to the average depth each genomic position is covered by the sequencing reads and not on the average depth of coverage the assemblies are actually reaching. The dotted vertical lines mark the finally used 40-fold (PGM 200 bp) and 75-fold coverage limits (PGM 400 bp, MiSeq 2×150 bp and MiSeq 2×250 bp).</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s002" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s002" position="float" xlink:type="simple"><label>Figure S2</label><caption>
<p><bold>Effect of the depth of coverage on mis-assemblies using random sub-sampling.</bold> Shown are in rows the results of randomly sub-sampled <italic>S. aureus</italic>, <italic>E. coli</italic>, and <italic>M. tuberculosis</italic> data sets, respectively. Mis-assembly combines local and non-local mis-assemblies. The coverage is referring to the average depth each genomic position is covered by the sequencing reads and not on the average depth of coverage the assemblies are actually reaching. The dotted vertical lines mark the finally used 40-fold (PGM 200 bp) and 75-fold coverage limits (PGM 400 bp, MiSeq 2×150 bp and MiSeq 2×250 bp).</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s003" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s003" position="float" xlink:type="simple"><label>Figure S3</label><caption>
<p><bold>Effect of the depth of coverage on assembly errors using random sub-sampling.</bold> Shown are in rows the results of randomly sub-sampled <italic>S. aureus</italic>, <italic>E. coli</italic>, and <italic>M. tuberculosis</italic> data sets, respectively. Assembly error is summarizing substitutions, insertions, and deletions errors. The coverage is referring to the average depth each genomic position is covered by the sequencing reads and not on the average depth of coverage the assemblies are actually reaching. The dotted vertical lines mark the finally used 40-fold (PGM 200 bp) and 75-fold coverage limits (PGM 400 bp, MiSeq 2×150 bp and MiSeq 2×250 bp).</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s004" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s004" position="float" xlink:type="simple"><label>Figure S4</label><caption>
<p><bold>Effect of the depth of coverage on NGA50 lengths using progressive sub-sampling.</bold> Shown are in rows the results of progressively sub-sampled <italic>E. coli</italic> and <italic>S. aureus</italic> data sets, respectively. The coverage is referring to the average depth each genomic position is covered by the sequencing reads and not on the average depth of coverage the assemblies are actually reaching. The dotted vertical lines mark the finally used 40-fold (PGM 200 bp) and 75-fold coverage limits (PGM 400 bp, MiSeq 2×150 bp and MiSeq 2×250 bp).</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s005" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s005" position="float" xlink:type="simple"><label>Figure S5</label><caption>
<p><bold>Effect of the depth of coverage on mis-assemblies using progressive sub-sampling.</bold> Shown are in rows the results of progressively sub-sampled <italic>E. coli</italic> and <italic>S. aureus</italic> data sets, respectively. Mis-assembly combines local and non-local mis-assemblies. The coverage is referring to the average depth each genomic position is covered by the sequencing reads and not on the average depth of coverage the assemblies are actually reaching. The dotted vertical lines mark the finally used 40-fold (PGM 200 bp) and 75-fold coverage limits (PGM 400 bp, MiSeq 2×150 bp and MiSeq 2×250 bp).</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s006" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s006" position="float" xlink:type="simple"><label>Figure S6</label><caption>
<p><bold>Effect of the k-mer size parameter on the NGA50 length.</bold> Shown are values for the three de Bruijn Graph assembler ABYSS (<bold>A</bold>, <bold>D</bold>), SOAP2 (<bold>B</bold>, <bold>E</bold>), and VELVET (<bold>C</bold>, <bold>F</bold>). On the left side (<bold>A</bold>, <bold>B</bold>, <bold>C</bold>) using MiSeq 2×150 bp (dotted lines) and MiSeq 2×250 bp (solid lines); on the right side (<bold>D</bold>, <bold>E</bold>, <bold>F</bold>) using PGM 200 bp (dotted lines) and PGM 400 bp (solid lines) data sets of the <italic>E. coli</italic> (red), <italic>M. tuberculosis</italic> (blue), and <italic>S. aureus</italic> (green) genomes, respectively. For each line, the highest reached NGA50 length is indicated by a vertical arrow and the corresponding x- and y-values are given in the upper left legend.</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s007" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s007" position="float" xlink:type="simple"><label>Figure S7</label><caption>
<p><bold>Effect of the k-mer size parameter on the NGA50 length of the SPADES assembler.</bold> The assemblies were generated in two ways: using an increasing set of k-mer parameters where for each assembly process the NGA50 length of the last and final k-mer cycle is drawn (<bold>A</bold>); using the default set of k-mer parameters where the NGA50 length of all intermediate and the final k-mer cycle is drawn (<bold>B</bold>). MiSeq 2×150 bp (dark-red), MiSeq 2×250 bp (red), PGM 200 bp (green), and PGM 400 bp (dark-green) data sets of the <italic>E. coli</italic> (solid lines), <italic>M. tuberculosis</italic> (dot-dashed lines), and <italic>S. aureus</italic> (dashed lines) genomes are used, respectively. For each line, the highest reached NGA50 length is indicated by a vertical arrow and the corresponding x- and y-values are given in the upper left legend.</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s008" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s008" position="float" xlink:type="simple"><label>Figure S8</label><caption>
<p><bold>Gene coverage and assembly error rates of </bold><bold><italic>de novo</italic></bold><bold> genome assemblies.</bold> Based on the percentage of full covered genes (<bold>A</bold>) and the number of assembly errors (<bold>B</bold>, combining substitutions, insertions, and deletions). Full covered genes are completely covered positions in the reference genome where a gene annotation was provided (based on all chromosomal and plasmid genes). The numbers of assembly errors are either contig or scaffold based, respectively. Scaffolds for MiSeq 2×150 bp and MiSeq 2×250 bp assemblies obtained by ABYSS, CELERA, CLC, NEWBLER, SOAP2, SPADES, and VELVET; contigs for MiSeq assemblies obtained by MIRA and SEQMAN as well as for all PGM assemblies.</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s009" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s009" position="float" xlink:type="simple"><label>Figure S9</label><caption>
<p><bold>Memory usage of </bold><bold><italic>de novo</italic></bold><bold> genome assemblies.</bold> Shown is the maximum non-swapped physical memory, i.e. the peak resident size that an assembly process has used over the entire time. For assemblies running several processes or threads in parallel this value is calculated from the maximum summation of all concurrent processes at a specific time point. For the DBG assemblers ABYSS, SOAP2, and VELVET only the peak resident size of the best resulting k-mer parameter are shown and not the summation of all assemblies using different k-mer parameters.</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s010" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s010" position="float" xlink:type="simple"><label>Figure S10</label><caption>
<p><bold>Effect of upstream error correction on </bold><bold><italic>de novo</italic></bold><bold> genome assemblies.</bold> Compared are NGA50 lengths (in kilobase pairs) of assemblies without an upstream read based error correction (left side) with those based on error corrected reads (using BayesHammer on MiSeq data and Coral on PGM data; right side). The NGA50 length is either contig or scaffold based, respectively. Scaffolds for MiSeq 2×150 bp and MiSeq 2×250 bp assemblies obtained by ABYSS, CELERA, CLC, NEWBLER, SOAP2, SPADES, and VELVET; contigs for MiSeq assemblies obtained by MIRA and all PGM assemblies.</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s011" mimetype="application/msword" xlink:href="info:doi/10.1371/journal.pone.0107014.s011" position="float" xlink:type="simple"><label>Table S1</label><caption>
<p><bold>Determined optimal k-mer sizes for DBG assemblies with mandatory k-mer parameterization.</bold></p>
<p>(DOC)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s012" mimetype="application/msword" xlink:href="info:doi/10.1371/journal.pone.0107014.s012" position="float" xlink:type="simple"><label>Table S2</label><caption>
<p><bold>Calculated insert-sizes of MiSeq sequencing libraries.</bold></p>
<p>(DOC)</p>
</caption></supplementary-material><supplementary-material id="pone.0107014.s013" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pone.0107014.s013" position="float" xlink:type="simple"><label>Text S1</label><caption>
<p><bold>Supporting Information to GABenchToB: A Genome Assembly Benchmark Tuned on Bacteria and Benchtop Sequencers.</bold></p>
<p>(PDF)</p>
</caption></supplementary-material></sec></body>
<back>
<ack>
<p>The authors gratefully thank the system administrators of the Bioinformatics Resource Facility at the CeBiTec for general technical support and in particular for providing the dedicated computing infrastructure. Furthermore, the authors thank DNASTAR Inc. (Madison, Wisconsin, USA), CLC bio A/S (Katrinebjerg, Aarhus, Denmark) and 454 Life Sciences (Branford, CT, USA) for providing extended trail or free licenses of their assembly software products.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pone.0107014-Loman1"><label>1</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Loman</surname><given-names>NJ</given-names></name>, <name name-style="western"><surname>Misra</surname><given-names>RV</given-names></name>, <name name-style="western"><surname>Dallman</surname><given-names>TJ</given-names></name>, <name name-style="western"><surname>Constantinidou</surname><given-names>C</given-names></name>, <name name-style="western"><surname>Gharbia</surname><given-names>SE</given-names></name>, <etal>et al</etal>. (<year>2012</year>) <article-title>Performance comparison of benchtop high-throughput sequencing platforms</article-title>. <source>Nat Biotechnol</source> <volume>30</volume>: <fpage>434</fpage>–<lpage>439</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Jnemann1"><label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Jünemann</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Sedlazeck</surname><given-names>FJ</given-names></name>, <name name-style="western"><surname>Prior</surname><given-names>K</given-names></name>, <name name-style="western"><surname>Albersmeier</surname><given-names>A</given-names></name>, <name name-style="western"><surname>John</surname><given-names>U</given-names></name>, <etal>et al</etal>. (<year>2013</year>) <article-title>Updating benchtop sequencing performance comparison</article-title>. <source>Nat Biotechnol</source> <volume>31</volume>: <fpage>294</fpage>–<lpage>296</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Compeau1"><label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Compeau</surname><given-names>PE</given-names></name>, <name name-style="western"><surname>Pevzner</surname><given-names>PA</given-names></name>, <name name-style="western"><surname>Tesler</surname><given-names>G</given-names></name> (<year>2011</year>) <article-title>How to apply de Bruijn graphs to genome assembly</article-title>. <source>Nature biotechnology</source> <volume>29</volume>: <fpage>987</fpage>–<lpage>991</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Li1"><label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Li</surname><given-names>Z</given-names></name>, <name name-style="western"><surname>Chen</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Mu</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Yuan</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Shi</surname><given-names>Y</given-names></name>, <etal>et al</etal>. (<year>2012</year>) <article-title>Comparison of the two major classes of assembly algorithms: overlap-layout-consensus and de-bruijn-graph</article-title>. <source>Brief Funct Genomics</source> <volume>11</volume>: <fpage>25</fpage>–<lpage>37</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Nagarajan1"><label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Nagarajan</surname><given-names>N</given-names></name>, <name name-style="western"><surname>Pop</surname><given-names>M</given-names></name> (<year>2013</year>) <article-title>Sequence assembly demystified</article-title>. <source>Nat Rev Genet</source> <volume>14</volume>: <fpage>157</fpage>–<lpage>167</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-ScheibyeAlsing1"><label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Scheibye-Alsing</surname><given-names>K</given-names></name>, <name name-style="western"><surname>Hoffmann</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Frankel</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Jensen</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Stadler</surname><given-names>PF</given-names></name>, <etal>et al</etal>. (<year>2009</year>) <article-title>Sequence assembly Computational biology and chemistry</article-title>. <volume>33</volume>: <fpage>121</fpage>–<lpage>136</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Paszkiewicz1"><label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Paszkiewicz</surname><given-names>K</given-names></name>, <name name-style="western"><surname>Studholme</surname><given-names>DJ</given-names></name> (<year>2010</year>) <article-title><italic>De novo</italic> assembly of short sequence reads</article-title>. <source>Brief Bioinform</source> <volume>11</volume>: <fpage>457</fpage>–<lpage>472</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Zhang1"><label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Zhang</surname><given-names>W</given-names></name>, <name name-style="western"><surname>Chen</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Yang</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Tang</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Shang</surname><given-names>J</given-names></name>, <etal>et al</etal>. (<year>2011</year>) <article-title>A practical comparison of <italic>de novo</italic> genome assembly software tools for next-generation sequencing technologies</article-title>. <source>PLoS One</source> <volume>6</volume>: <fpage>e17915</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Haiminen1"><label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Haiminen</surname><given-names>N</given-names></name>, <name name-style="western"><surname>Kuhn</surname><given-names>DN</given-names></name>, <name name-style="western"><surname>Parida</surname><given-names>L</given-names></name>, <name name-style="western"><surname>Rigoutsos</surname><given-names>I</given-names></name> (<year>2011</year>) <article-title>Evaluation of methods for <italic>de novo</italic> genome assembly from high-throughput sequencing reads reveals dependencies that affect the quality of the results</article-title>. <source>PLoS One</source> <volume>6</volume>: <fpage>e24182</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Lin1"><label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Lin</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Li</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Shen</surname><given-names>H</given-names></name>, <name name-style="western"><surname>Zhang</surname><given-names>L</given-names></name>, <name name-style="western"><surname>Papasian</surname><given-names>CJ</given-names></name>, <etal>et al</etal>. (<year>2011</year>) <article-title>Comparative studies of <italic>de novo</italic> assembly tools for next-generation sequencing technologies</article-title>. <source>Bioinformatics</source> <volume>27</volume>: <fpage>2031</fpage>–<lpage>2037</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Narzisi1"><label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Narzisi</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Mishra</surname><given-names>B</given-names></name> (<year>2011</year>) <article-title>Comparing <italic>de novo</italic> genome assembly: the long and short of it</article-title>. <source>PLoS One</source> <volume>6</volume>: <fpage>e19175</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Earl1"><label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Earl</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Bradnam</surname><given-names>K</given-names></name>, <name name-style="western"><surname>St John</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Darling</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Lin</surname><given-names>D</given-names></name>, <etal>et al</etal>. (<year>2011</year>) <article-title>Assemblathon 1: a competitive assessment of <italic>de novo</italic> short read assembly methods</article-title>. <source>Genome Res</source> <volume>21</volume>: <fpage>2224</fpage>–<lpage>2241</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Bradnam1"><label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Bradnam</surname><given-names>KR</given-names></name>, <name name-style="western"><surname>Fass</surname><given-names>JN</given-names></name>, <name name-style="western"><surname>Alexandrov</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Baranay</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Bechner</surname><given-names>M</given-names></name>, <etal>et al</etal>. (<year>2013</year>) <article-title>Assemblathon 2: evaluating <italic>de novo</italic> methods of genome assembly in three vertebrate species</article-title>. <source>Gigascience</source> <volume>2</volume>: <fpage>10</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Salzberg1"><label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Salzberg</surname><given-names>SL</given-names></name>, <name name-style="western"><surname>Phillippy</surname><given-names>AM</given-names></name>, <name name-style="western"><surname>Zimin</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Puiu</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Magoc</surname><given-names>T</given-names></name>, <etal>et al</etal>. (<year>2012</year>) <article-title>GAGE: A critical evaluation of genome assemblies and assembly algorithms</article-title>. <source>Genome Res</source> <volume>22</volume>: <fpage>557</fpage>–<lpage>567</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Magoc1"><label>15</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Magoc</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Pabinger</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Canzar</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Liu</surname><given-names>X</given-names></name>, <name name-style="western"><surname>Su</surname><given-names>Q</given-names></name>, <etal>et al</etal>. (<year>2013</year>) <article-title>GAGE-B: an evaluation of genome assemblers for bacterial organisms</article-title>. <source>Bioinformatics</source> <volume>29</volume>: <fpage>1718</fpage>–<lpage>1725</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Simpson1"><label>16</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Simpson</surname><given-names>JT</given-names></name>, <name name-style="western"><surname>Wong</surname><given-names>K</given-names></name>, <name name-style="western"><surname>Jackman</surname><given-names>SD</given-names></name>, <name name-style="western"><surname>Schein</surname><given-names>JE</given-names></name>, <name name-style="western"><surname>Jones</surname><given-names>SJM</given-names></name>, <etal>et al</etal>. (<year>2009</year>) <article-title>ABySS: a parallel assembler for short read sequence data</article-title>. <source>Genome Res</source> <volume>19</volume>: <fpage>1117</fpage>–<lpage>1123</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Miller1"><label>17</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Miller</surname><given-names>JR</given-names></name>, <name name-style="western"><surname>Delcher</surname><given-names>AL</given-names></name>, <name name-style="western"><surname>Koren</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Venter</surname><given-names>E</given-names></name>, <name name-style="western"><surname>Walenz</surname><given-names>BP</given-names></name>, <etal>et al</etal>. (<year>2008</year>) <article-title>Aggressive assembly of pyrosequencing reads with mates</article-title>. <source>Bioinformatics</source> <volume>24</volume>: <fpage>2818</fpage>–<lpage>2824</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-CLC1"><label>18</label>
<mixed-citation publication-type="other" xlink:type="simple">CLC bio (2014) CLC Assembly Cell. Available: <ext-link ext-link-type="uri" xlink:href="http://clcbio.com" xlink:type="simple">http://clcbio.com</ext-link>. Accessed 23 April 2014.</mixed-citation>
</ref>
<ref id="pone.0107014-Life1"><label>19</label>
<mixed-citation publication-type="other" xlink:type="simple">Life Sciences (2014) GS De Novo Assembler. Available: <ext-link ext-link-type="uri" xlink:href="http://www.454.com/products/analysis-software/" xlink:type="simple">http://www.454.com/products/analysis-software/</ext-link>. Accessed 2014 Apr 23.</mixed-citation>
</ref>
<ref id="pone.0107014-Chevreux1"><label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Chevreux</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Pfisterer</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Drescher</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Driesel</surname><given-names>AJ</given-names></name>, <name name-style="western"><surname>Müller</surname><given-names>WEG</given-names></name>, <etal>et al</etal>. (<year>2004</year>) <article-title>Using the miraEST assembler for reliable and automated mRNA transcript assembly and SNP detection in sequenced ESTs</article-title>. <source>Genome Res</source> <volume>14</volume>: <fpage>1147</fpage>–<lpage>1159</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-DNASTAR1"><label>21</label>
<mixed-citation publication-type="other" xlink:type="simple">DNASTAR (2014) SeqMan Ngen. Available: <ext-link ext-link-type="uri" xlink:href="http://www.dnastar.com/t-nextgen-seqman-ngen.aspx" xlink:type="simple">http://www.dnastar.com/t-nextgen-seqman-ngen.aspx</ext-link>. Accessed 2014 Apr 23.</mixed-citation>
</ref>
<ref id="pone.0107014-Luo1"><label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Luo</surname><given-names>R</given-names></name>, <name name-style="western"><surname>Liu</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Xie</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Li</surname><given-names>Z</given-names></name>, <name name-style="western"><surname>Huang</surname><given-names>W</given-names></name>, <etal>et al</etal>. (<year>2012</year>) <article-title>SOAPdenovo2: an empirically improved memory-efficient short-read <italic>de novo</italic> assembler</article-title>. <source>Gigascience</source> <volume>1</volume>: <fpage>18</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Bankevich1"><label>23</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Bankevich</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Nurk</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Antipov</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Gurevich</surname><given-names>AA</given-names></name>, <name name-style="western"><surname>Dvorkin</surname><given-names>M</given-names></name>, <etal>et al</etal>. (<year>2012</year>) <article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title>. <source>J Comput Biol</source> <volume>19</volume>: <fpage>455</fpage>–<lpage>477</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Zerbino1"><label>24</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Zerbino</surname><given-names>DR</given-names></name>, <name name-style="western"><surname>Birney</surname><given-names>E</given-names></name> (<year>2008</year>) <article-title>Velvet: algorithms for <italic>de novo</italic> short read assembly using de Bruijn graphs</article-title>. <source>Genome Res</source> <volume>18</volume>: <fpage>821</fpage>–<lpage>829</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Gnerre1"><label>25</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Gnerre</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Maccallum</surname><given-names>I</given-names></name>, <name name-style="western"><surname>Przybylski</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Ribeiro</surname><given-names>FJ</given-names></name>, <name name-style="western"><surname>Burton</surname><given-names>JN</given-names></name>, <etal>et al</etal>. (<year>2011</year>) <article-title>High-quality draft assemblies of mammalian genomes from massively parallel sequence data</article-title>. <source>Proc Natl Acad Sci U S A</source> <volume>108</volume>: <fpage>1513</fpage>–<lpage>1518</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Batzoglou1"><label>26</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Batzoglou</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Jaffe</surname><given-names>DB</given-names></name>, <name name-style="western"><surname>Stanley</surname><given-names>K</given-names></name>, <name name-style="western"><surname>Butler</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Gnerre</surname><given-names>S</given-names></name>, <etal>et al</etal>. (<year>2002</year>) <article-title>ARACHNE: a whole-genome shotgun assembler</article-title>. <source>Genome Res</source> <volume>12</volume>: <fpage>177</fpage>–<lpage>189</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Zimin1"><label>27</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Zimin</surname><given-names>AV</given-names></name>, <name name-style="western"><surname>Marçais</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Puiu</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Roberts</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Salzberg</surname><given-names>SL</given-names></name>, <etal>et al</etal>. (<year>2013</year>) <article-title>The MaSuRCA genome assembler</article-title>. <source>Bioinformatics</source> <volume>29</volume>: <fpage>2669</fpage>–<lpage>2677</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Simpson2"><label>28</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Simpson</surname><given-names>JT</given-names></name>, <name name-style="western"><surname>Durbin</surname><given-names>R</given-names></name> (<year>2012</year>) <article-title>Efficient <italic>de novo</italic> assembly of large genomes using compressed data structures</article-title>. <source>Genome Res</source> <volume>22</volume>: <fpage>549</fpage>–<lpage>556</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Mullikin1"><label>29</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Mullikin</surname><given-names>JC</given-names></name>, <name name-style="western"><surname>Ning</surname><given-names>Z</given-names></name> (<year>2003</year>) <article-title>The phusion assembler</article-title>. <source>Genome Res</source> <volume>13</volume>: <fpage>81</fpage>–<lpage>90</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Ghodsi1"><label>30</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Ghodsi</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Hill</surname><given-names>CM</given-names></name>, <name name-style="western"><surname>Astrovskaya</surname><given-names>I</given-names></name>, <name name-style="western"><surname>Lin</surname><given-names>H</given-names></name>, <name name-style="western"><surname>Sommer</surname><given-names>DD</given-names></name>, <etal>et al</etal>. (<year>2013</year>) <article-title><italic>De novo</italic> likelihood-based measures for comparing genome assemblies</article-title>. <source>BMC Res Notes</source> <volume>6</volume>: <fpage>334</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Gurevich1"><label>31</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Gurevich</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Saveliev</surname><given-names>V</given-names></name>, <name name-style="western"><surname>Vyahhi</surname><given-names>N</given-names></name>, <name name-style="western"><surname>Tesler</surname><given-names>G</given-names></name> (<year>2013</year>) <article-title>QUAST: quality assessment tool for genome assemblies</article-title>. <source>Bioinformatics</source> <volume>29</volume>: <fpage>1072</fpage>–<lpage>1075</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Hubisz1"><label>32</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Hubisz</surname><given-names>MJ</given-names></name>, <name name-style="western"><surname>Lin</surname><given-names>MF</given-names></name>, <name name-style="western"><surname>Kellis</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Siepel</surname><given-names>A</given-names></name> (<year>2011</year>) <article-title>Error and error mitigation in low-coverage genome assemblies</article-title>. <source>PLoS One</source> <volume>6</volume>: <fpage>e17034</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Illumina1"><label>33</label>
<mixed-citation publication-type="other" xlink:type="simple">Illumina (2009) <italic>De novo</italic> assembly using Illumina reads. Available: <ext-link ext-link-type="uri" xlink:href="http://www.illumina.com/Documents/products/technotes/technote_denovo_assembly_ecoli.pdf" xlink:type="simple">http://www.illumina.com/Documents/products/technotes/technote_denovo_assembly_ecoli.pdf</ext-link>. Accessed 2014 Apr 23.</mixed-citation>
</ref>
<ref id="pone.0107014-Arezi1"><label>34</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Arezi</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Xing</surname><given-names>W</given-names></name>, <name name-style="western"><surname>Sorge</surname><given-names>JA</given-names></name>, <name name-style="western"><surname>Hogrefe</surname><given-names>HH</given-names></name> (<year>2003</year>) <article-title>Amplification efficiency of thermostable DNA polymerases</article-title>. <source>Anal Biochem</source> <volume>321</volume>: <fpage>226</fpage>–<lpage>235</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Chen1"><label>35</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Chen</surname><given-names>Y-C</given-names></name>, <name name-style="western"><surname>Liu</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Yu</surname><given-names>C-H</given-names></name>, <name name-style="western"><surname>Chiang</surname><given-names>T-Y</given-names></name>, <name name-style="western"><surname>Hwang</surname><given-names>C-C</given-names></name> (<year>2013</year>) <article-title>Effects of GC bias in next-generation-sequencing data on <italic>de novo</italic> genome assembly</article-title>. <source>PLoS One</source> <volume>8</volume>: <fpage>e62856</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Salmela1"><label>36</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Salmela</surname><given-names>L</given-names></name>, <name name-style="western"><surname>Schröder</surname><given-names>J</given-names></name> (<year>2011</year>) <article-title>Correcting errors in short reads by multiple alignments</article-title>. <source><italic>Bioinformatics</italic></source> <volume>27</volume>: <fpage>1455</fpage>–<lpage>1461</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Chikhi1"><label>37</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Chikhi</surname><given-names>R</given-names></name>, <name name-style="western"><surname>Medvedev</surname><given-names>P</given-names></name> (<year>2014</year>) <article-title>Informed and automated k-mer size selection for genome assembly</article-title>. <source><italic>Bioinformatics</italic></source> <volume>30</volume>: <fpage>31</fpage>–<lpage>37</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Mellmann1"><label>38</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Mellmann</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Harmsen</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Cummings</surname><given-names>CA</given-names></name>, <name name-style="western"><surname>Zentz</surname><given-names>EB</given-names></name>, <name name-style="western"><surname>Leopold</surname><given-names>SR</given-names></name>, <etal>et al</etal>. (<year>2011</year>) <article-title>Prospective genomic characterization of the German enterohemorrhagic <italic>Escherichia coli</italic> O104:H4 outbreak by rapid next generation sequencing technology</article-title>. <source>PLoS One</source> <volume>6</volume>: <fpage>e22751</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Jevons1"><label>39</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Jevons</surname><given-names>PM</given-names></name> (<year>1961</year>) <article-title>“Celbenin” - resistant Staphylococci</article-title>. <source>Br Med J</source> <volume>1</volume>: <fpage>124</fpage>–<lpage>125</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-vanEmbden1"><label>40</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>van Embden</surname><given-names>JD</given-names></name>, <name name-style="western"><surname>Cave</surname><given-names>MD</given-names></name>, <name name-style="western"><surname>Crawford</surname><given-names>JT</given-names></name>, <name name-style="western"><surname>Dale</surname><given-names>JW</given-names></name>, <name name-style="western"><surname>Eisenach</surname><given-names>KD</given-names></name>, <etal>et al</etal>. (<year>1993</year>) <article-title>Strain identification of <italic>Mycobacterium tuberculosis</italic> by DNA fingerprinting: recommendations for a standardized methodology</article-title>. <source>J Clin Microbiol</source> <volume>31</volume>: <fpage>406</fpage>–<lpage>409</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Li2"><label>41</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Li</surname><given-names>H</given-names></name>, <name name-style="western"><surname>Durbin</surname><given-names>R</given-names></name> (<year>2010</year>) <article-title>Fast and accurate long-read alignment with Burrows-Wheeler transform</article-title>. <source>Bioinformatics</source> <volume>26</volume>: <fpage>589</fpage>–<lpage>595</lpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Kurtz1"><label>42</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Kurtz</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Phillippy</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Delcher</surname><given-names>AL</given-names></name>, <name name-style="western"><surname>Smoot</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Shumway</surname><given-names>M</given-names></name>, <etal>et al</etal>. (<year>2004</year>) <article-title>Versatile and open software for comparing large genomes</article-title>. <source>Genome Biol</source> <volume>5</volume>: <fpage>R12</fpage>.</mixed-citation>
</ref>
<ref id="pone.0107014-Team1"><label>43</label>
<mixed-citation publication-type="other" xlink:type="simple">Team RDC (2011) R: a language and environment for statistical computing. Available: <ext-link ext-link-type="uri" xlink:href="http://www.R-project.org" xlink:type="simple">http://www.R-project.org</ext-link>. Accessed 23 April 2014.</mixed-citation>
</ref>
<ref id="pone.0107014-Sarkar1"><label>44</label>
<mixed-citation publication-type="book" xlink:type="simple">Sarkar D (2008) Lattice: multivariate data visualization with R. New York: Springer.</mixed-citation>
</ref>
</ref-list></back>
</article>