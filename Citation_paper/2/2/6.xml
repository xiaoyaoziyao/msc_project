<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article article-type="research-article" dtd-version="1.1d3" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS ONE</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">plosone</journal-id>
<journal-title-group>
<journal-title>PLOS ONE</journal-title>
</journal-title-group>
<issn pub-type="epub">1932-6203</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1371/journal.pone.0190279</article-id>
<article-id pub-id-type="publisher-id">PONE-D-17-27481</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Bioinformatics</subject><subj-group><subject>Sequence analysis</subject><subj-group><subject>Sequence alignment</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Bioinformatics</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Programming languages</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive science</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Language</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Language</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Language</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer architecture</subject><subj-group><subject>Computer hardware</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer software</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive science</subject><subj-group><subject>Cognition</subject><subj-group><subject>Memory</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Learning and memory</subject><subj-group><subject>Memory</subject></subj-group></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>pyPaSWAS: Python-based multi-core CPU and GPU sequence alignment</article-title>
<alt-title alt-title-type="running-head">Multi-core CPU and GPU sequence alignment</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-9408-9151</contrib-id>
<name name-style="western">
<surname>Warris</surname>
<given-names>Sven</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Formal analysis</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Investigation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Resources</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Timal</surname>
<given-names>N. Roshan N.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Kempenaar</surname>
<given-names>Marcel</given-names>
</name>
<role content-type="http://credit.casrai.org/">Investigation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Poortinga</surname>
<given-names>Arne M.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Software</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>van de Geest</surname>
<given-names>Henri</given-names>
</name>
<role content-type="http://credit.casrai.org/">Software</role>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Varbanescu</surname>
<given-names>Ana L.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Investigation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Resources</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Nap</surname>
<given-names>Jan-Peter</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Resources</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
</contrib-group>
<aff id="aff001"><label>1</label> <addr-line>Expertise Centre ALIFE, Institute for Life Science &amp; Technology, Hanze University of Applied Sciences Groningen, Groningen, the Netherlands</addr-line></aff>
<aff id="aff002"><label>2</label> <addr-line>Applied Bioinformatics, Wageningen University and Research, Wageningen, the Netherlands</addr-line></aff>
<aff id="aff003"><label>3</label> <addr-line>Parallel and Distributed Systems, Delft University of Technology, Delft, the Netherlands</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>de Brevern</surname>
<given-names>Alexandre G.</given-names>
</name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1"><addr-line>UMR-S1134, INSERM, Université Paris Diderot, INTS, FRANCE</addr-line></aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">sven.warris@wur.nl</email></corresp>
</author-notes>
<pub-date pub-type="epub">
<day>2</day>
<month>1</month>
<year>2018</year>
</pub-date>
<pub-date pub-type="collection">
<year>2018</year>
</pub-date>
<volume>13</volume>
<issue>1</issue>
<elocation-id>e0190279</elocation-id>
<history>
<date date-type="received">
<day>22</day>
<month>7</month>
<year>2017</year>
</date>
<date date-type="accepted">
<day>11</day>
<month>12</month>
<year>2017</year>
</date>
</history>
<permissions>
<copyright-year>2018</copyright-year>
<copyright-holder>Warris et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pone.0190279"/>
<abstract>
<sec id="sec001">
<title>Background</title>
<p>Our previously published CUDA-only application PaSWAS for Smith-Waterman (SW) sequence alignment of any type of sequence on NVIDIA-based GPUs is platform-specific and therefore adopted less than could be. The OpenCL language is supported more widely and allows use on a variety of hardware platforms. Moreover, there is a need to promote the adoption of parallel computing in bioinformatics by making its use and extension more simple through more and better application of high-level languages commonly used in bioinformatics, such as Python.</p>
</sec>
<sec id="sec002">
<title>Results</title>
<p>The novel application pyPaSWAS presents the parallel SW sequence alignment code fully packed in Python. It is a generic SW implementation running on several hardware platforms with multi-core systems and/or GPUs that provides accurate sequence alignments that also can be inspected for alignment details. Additionally, pyPaSWAS support the affine gap penalty. Python libraries are used for automated system configuration, I/O and logging. This way, the Python environment will stimulate further extension and use of pyPaSWAS.</p>
</sec>
<sec id="sec003">
<title>Conclusions</title>
<p>pyPaSWAS presents an easy Python-based environment for accurate and retrievable parallel SW sequence alignments on GPUs and multi-core systems. The strategy of integrating Python with high-performance parallel compute languages to create a developer- and user-friendly environment should be considered for other computationally intensive bioinformatics algorithms.</p>
</sec>
</abstract>
<funding-group>
<funding-statement>This work was financed by the SIA Raak-PRO (<ext-link ext-link-type="uri" xlink:href="http://www.regieorgaan-sia.nl/content/RAAK-regeling/raak-pro" xlink:type="simple">http://www.regieorgaan-sia.nl/content/RAAK-regeling/raak-pro</ext-link>) grant BioCOMP, a Hanze University of Applied Sciences Groningen PhD grant and contributions from Wageningen University and Research, University Medical Center Groningen and the former Netherlands Bioinformatics Centre. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="1"/>
<table-count count="2"/>
<page-count count="9"/>
</counts>
<custom-meta-group>
<custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>The source code and data are available at the Github repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/swarris/pyPaSWAS/" xlink:type="simple">https://github.com/swarris/pyPaSWAS/</ext-link> (DOI 10.5281/zenodo.1042166: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.1042166" xlink:type="simple">https://doi.org/10.5281/zenodo.1042166</ext-link>). The wiki provides a complete description of command line arguments and examples: <ext-link ext-link-type="uri" xlink:href="https://github.com/swarris/pyPaSWAS/wiki" xlink:type="simple">https://github.com/swarris/pyPaSWAS/wiki</ext-link>.</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<sec id="sec004" sec-type="intro">
<title>Background</title>
<p>A major challenge in applied bioinformatics is the adoption of advanced high-performance tools and algorithms by end-users with possibly low-to-moderate software engineering skills in the context of their biological research questions. Earlier, we presented the CUDA-only application PaSWAS [<xref ref-type="bibr" rid="pone.0190279.ref001">1</xref>] that performs Smith-Waterman (SW) sequence alignment for any type of sequence on NVIDIA-based GPUs. PaSWAS is relatively fast and combined the accuracy of SW alignment with the possibility to retrieve alignment information relevant for biologists, in contrast to most other parallel SW implementations. Yet, adoption of PaSWAS can be improved: it may be too complex to install and use. In addition, use of the application was limited to NVIDIA-based hardware. Also in other cases, the adoption of highly promising tools and approaches is slower than expected. For example, the <italic>de novo</italic> assembly tool CloudBrush [<xref ref-type="bibr" rid="pone.0190279.ref002">2</xref>] uses MapReduce on Hadoop [<xref ref-type="bibr" rid="pone.0190279.ref003">3</xref>,<xref ref-type="bibr" rid="pone.0190279.ref004">4</xref>], but has seen no biological applications yet. The three versions of the NVIDIA CUDA-based sequence alignment tool CUDASW++ [<xref ref-type="bibr" rid="pone.0190279.ref005">5</xref>–<xref ref-type="bibr" rid="pone.0190279.ref007">7</xref>] are cited often, but citations deal in the larger majority with novel software implementations. The latest version CUDASW++ 3 [<xref ref-type="bibr" rid="pone.0190279.ref007">7</xref>], for example, has been cited 116 times (as of July 2017) but none of these citations deal with a direct biological question. The lack of adoption of promising new developments in algorithms and hardware may indicate that we as developers underestimated the complexity of setting up and running such a new application, especially when it is limited to a certain platform.</p>
<p>Another important limiting factor in the use of PaSWAS is the absence of the affine gap penalty. This scoring method produces biologically more relevant alignments than using only a gap open penalty [<xref ref-type="bibr" rid="pone.0190279.ref008">8</xref>]. It is therefore an important feature missing from the Smith-Waterman implementation in PaSWAS.</p>
<p>To improve the accessibility and use of PaSWAS, we have developed an entirely new software package, pyPaSWAS, based on OpenCL and CUDA integrated with Python. Python is a platform-independent programming language, with many libraries appropriate for bioinformatics, such as BioPython [<xref ref-type="bibr" rid="pone.0190279.ref009">9</xref>] and SciPy [<xref ref-type="bibr" rid="pone.0190279.ref010">10</xref>]. The open compute language OpenCL [<xref ref-type="bibr" rid="pone.0190279.ref011">11</xref>] is the current standard for clusters and/or multi-core CPU/GPU’s to speed-up analyses up to several orders of magnitude compared to single core CPU versions. OpenCL is similar to CUDA, but is supported by a growing number of manufacturers, including Intel, NVIDIA, Apple and IBM. By supporting both CUDA and OpenCL, pyPaSWAS runs on many platforms, including CPUs, GPUs other than NVIDIA-based GPUs and so-called accelerator cards. We integrated the PaSWAS CUDA [<xref ref-type="bibr" rid="pone.0190279.ref001">1</xref>] and OpenCL codebases with Python through pyCUDA [<xref ref-type="bibr" rid="pone.0190279.ref012">12</xref>] and pyOpenCL [<xref ref-type="bibr" rid="pone.0190279.ref012">12</xref>]. The original PaSWAS code was extended to add support for the affine gap penalty scoring method [<xref ref-type="bibr" rid="pone.0190279.ref008">8</xref>]. The result is a versatile Python-based user-friendly application for SW sequence alignment on a variety of multi-core systems. We propose this strategy as showcase for the integration of new software based on these compute languages with common programming tools such as Python to promote the adoption of advanced tools and applications in applied bioinformatics.</p>
</sec>
<sec id="sec005">
<title>Implementation</title>
<p>The new software package pyPaSWAS is implemented in Python (2.7 and up) and is run from the command line. It uses the libraries pyOpenCL [<xref ref-type="bibr" rid="pone.0190279.ref012">12</xref>] and pyCUDA [<xref ref-type="bibr" rid="pone.0190279.ref012">12</xref>] for device handling, memory allocation and kernel invocations to run the core PaSWAS Smith-Waterman code on the parallel device. pyPaSWAS depends on OpenCL 1.2+ [<xref ref-type="bibr" rid="pone.0190279.ref011">11</xref>] or Cuda 2.0+ [<xref ref-type="bibr" rid="pone.0190279.ref013">13</xref>], numpy[<xref ref-type="bibr" rid="pone.0190279.ref014">14</xref>] and biopython [<xref ref-type="bibr" rid="pone.0190279.ref009">9</xref>]. All other processing, such as Input / Output handling, logging and exception handling, are done in standard Python. The SeqIO class from bioPython [<xref ref-type="bibr" rid="pone.0190279.ref009">9</xref>] is used for file input. Its reference manual [<xref ref-type="bibr" rid="pone.0190279.ref015">15</xref>] lists all formats supported, including multi-fasta, genbank and fastq. Input file formats not supported by bioPython can be implemented by extending the Core.Reader class. Output can be formatted in a custom format by extending the Core.DefaultFormatter class. The Core.SAMFormatter class generates SAM output and can also be used as template for other custom output. The SAM descriptors (<xref ref-type="table" rid="pone.0190279.t001">Table 1</xref>) are particularly useful for further processing output data. File-based configurations allow for storing settings and consistent reruns of the application. The user can supply appropriate scoring values for alignment, for example substitution matrices, to adjust the analyses to the desired specifications. The Core.Score module can be adjusted to support any 255 by 255 scoring matrix. The accompanying wiki [<xref ref-type="bibr" rid="pone.0190279.ref016">16</xref>] provides a complete description of the command line arguments as well as examples of how to run pyPaSWAS.</p>
<table-wrap id="pone.0190279.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0190279.t001</object-id>
<label>Table 1</label> <caption><title>Options in PyPaSWAS for selecting and filtering the alignments.</title></caption>
<alternatives>
<graphic id="pone.0190279.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0190279.t001" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Filter name<xref ref-type="table-fn" rid="t001fn001">*</xref></th>
<th align="left">Value range<xref ref-type="table-fn" rid="t001fn002">**</xref></th>
<th align="left">Default</th>
<th align="left">SAM descriptor</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">lower_limit_score</td>
<td align="left">0.0 &lt; x &lt; = 1.0</td>
<td align="left">1.0</td>
<td align="left"/>
<td align="left">Allows for more hits per alignment. All hits with a score within this fraction of the maximum score found are reported. Used during the backtracing procedure for reducing the number of alignments to be processed.</td>
</tr>
<tr>
<td align="left">minimum_score</td>
<td align="left">0 &lt; x</td>
<td align="left">30</td>
<td align="left">AS:i:</td>
<td align="left">Minimum score of an alignment. Used during the backtracing procedure for reducing the number alignments to be processed..</td>
</tr>
<tr>
<td align="left">filter_factor</td>
<td align="left">0.0 &lt; x &lt; = 1.0</td>
<td align="left">0.2</td>
<td align="left">AS:i:</td>
<td align="left">For each alignment the theoretical maximum score is calculated: length of the shortest sequence times the maximum score for a match (eg. the score for a perfect alignment). Only alignments with a score above filter_factor times this theoretical maximum score are returned.</td>
</tr>
<tr>
<td align="left">query_coverage</td>
<td align="left">0.0 &lt; = x &lt; = 1.0</td>
<td align="left">0.2</td>
<td align="left">QC:f:</td>
<td align="left">Minimum fraction of the query covered in the alignment</td>
</tr>
<tr>
<td align="left">query_identity</td>
<td align="left">0.0 &lt; = x &lt; = 1.0</td>
<td align="left">0.2</td>
<td align="left">QI:f:</td>
<td align="left">Minimum fraction of matches relative to the query</td>
</tr>
<tr>
<td align="left">relative_score</td>
<td align="left">0.0 &lt; x &lt; = score match</td>
<td align="left">2.0</td>
<td align="left">RS:f:</td>
<td align="left">Minimum score relative to the shortest sequence. A full match will give a relative score of the match score, for DNA/RNA sequences the default is 5.0</td>
</tr>
<tr>
<td align="left">base_score</td>
<td align="left">0.0 &lt; x &lt; = score match</td>
<td align="left">2.0</td>
<td align="left">BS:f:</td>
<td align="left">Score of the alignment divided by the length of the alignment.</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t001fn001"><p>*Filter name: all parameters available for filtering;</p></fn>
<fn id="t001fn002"><p>** value range: the boundaries for the settings of the corresponding parameter.</p></fn>
</table-wrap-foot>
</table-wrap>
<p>The structure of CPU hardware differs from GPU hardware and running OpenCL code designed for GPUs is not optimal [<xref ref-type="bibr" rid="pone.0190279.ref017">17</xref>]. Therefore, two OpenCL versions based on the CUDA-based implementation in PaSWAS were developed, one for GPUs and one for CPUs [<xref ref-type="bibr" rid="pone.0190279.ref018">18</xref>]. The latter makes better use of CPU hardware for faster sequence alignments. The two OpenCL implementations differ from the previous CUDA implementation only in the use of specific OpenCL calls; no changes have been made to the underlying algorithms.</p>
<p>The OpenCL implementation runs on multi-core hardware supporting OpenCL 1.2, such as Intel/AMD CPUs and accelerator cards (GPUs and Xeon Phi). With the CUDA implementation, pyPaSWAS runs on all NVIDIA GPUs with compute capability 1.2 and above, which includes support for all recent NVIDIA GPUs, including laptop versions, Teslas and the GTX-based cores. By default pyPaSWAS runs on the CPU using the CPU-optimized OpenCL code. To use other parallel devices than the CPU, the user changes the configuration or selects the appropriate device through command line options.</p>
<p>pyPaSWAS opens the platform selected, sets the appropriate memory usage and other parameters relevant for the parallel device automatically, based on settings and data to be analyzed. pyPaSWAS allows for fine grained control over the use of the parallel device, such as memory usage and number of compute cores to be used. CPU hardware allows for limiting the number of cores used by an application. This enables using the computer for other tasks and is necessary when pyPaSWAS runs in a cluster environment. This fine-grained control level presents a major improvement over the earlier PaSWAS [<xref ref-type="bibr" rid="pone.0190279.ref001">1</xref>] in addition to the integration with Python. All options are listed on the wiki-page [<xref ref-type="bibr" rid="pone.0190279.ref016">16</xref>] and are accessible through the command line (‘-h’).</p>
<p>As its predecessor [<xref ref-type="bibr" rid="pone.0190279.ref001">1</xref>], pyPaSWAS documents all alignment details and allows for filtering of the resulting alignments. Parameters for filtering are listed in <xref ref-type="table" rid="pone.0190279.t001">Table 1</xref>. Parameters can be set through the configuration file or through command line options. This gives the ability to select which hits are relevant and will be sent to the output file. The scoring value and all related values, such as query coverage, are present in the output and can also be used to filter the results further afterwards (<xref ref-type="table" rid="pone.0190279.t001">Table 1</xref>).</p>
<sec id="sec006">
<title>Affine gap penalty</title>
<p>For biologically more relevant alignments, the affine gap penalty method [<xref ref-type="bibr" rid="pone.0190279.ref008">8</xref>] scores the opening of a gap differently than for extending a gap. The original PaSWAS code only supported the gap penalty scoring method, which means that each gap has the same score, no matter how many gaps are in front of it. The affine gap penalty implementation requires a scoring matrix M, to keep track of the match scores and scoring matrices <italic>I</italic> and <italic>J</italic> to keep track of the scores for gaps in the target (<italic>I</italic>) and query (<italic>J</italic>) sequences. The PaSWAS implementation of the direction matrix has been extended to record which of the three matrices resulted in the highest score. The downside of using an affine gap method is that it requires creating two additional matrices (<italic>I</italic>, <italic>J</italic>) of the same size as the already existing scorings matrix (<italic>M</italic>). This means that a 100x100 sequence alignment using the affine gap requires not 10,000 scoring values, but 30,000 scorings values. Next to an increase in memory usage, additional calculations compared to the original SW implementation are needed, making the affine gap method slower (see <xref ref-type="supplementary-material" rid="pone.0190279.s003">S3 Report</xref>). The affine gap penalty method is not required in all cases, for example when the gaps originated from technical (NGS) issues and do not have any biological meaning. In such cases, the PaSWAS code is used to perform a SW-alignment without a gap extension penalty. The user controls the use of the affine gap penalties by setting a value other than zero for the gap extension penalty (the ‘-g’ option).</p>
</sec>
</sec>
<sec id="sec007" sec-type="conclusions">
<title>Results and discussion</title>
<p>The performance of pyPaSWAS is expressed as the time required for the number of SW alignments processed. Six different configurations were tested for performance (<xref ref-type="table" rid="pone.0190279.t002">Table 2</xref>), with variations in hardware (Intel or NVIDIA), parallel device (CPU or GPU), code usage (optimized for CPU or GPU), number of cores used and the language involved (OpenCL or CUDA).</p>
<table-wrap id="pone.0190279.t002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0190279.t002</object-id>
<label>Table 2</label> <caption><title>Configurations for testing the performance of pyPaSWAS.</title></caption>
<alternatives>
<graphic id="pone.0190279.t002g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0190279.t002" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Configu-ration</th>
<th align="left">Hardware</th>
<th align="left">Parallel device</th>
<th align="left">Code optimized for</th>
<th align="left">Nr. of cores</th>
<th align="left">Language</th>
<th align="left">Time for 2720 alignments (s)</th>
<th align="left">GCUPS<xref ref-type="table-fn" rid="t002fn002">**</xref></th>
<th align="left">Speedup compared to F</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><bold>A</bold></td>
<td align="center" rowspan="4">Intel i7</td>
<td align="center" rowspan="4">CPU</td>
<td align="center" rowspan="2">CPU</td>
<td align="right">1</td>
<td align="center" rowspan="4">OpenCL</td>
<td align="char" char=".">119.2</td>
<td align="char" char=".">0.70</td>
<td align="char" char=".">0.21</td>
</tr>
<tr>
<td align="center"><bold>B</bold></td>
<td align="right">8</td>
<td align="char" char=".">106.4</td>
<td align="char" char=".">0.82</td>
<td align="char" char=".">0.21</td>
</tr>
<tr>
<td align="center"><bold>C</bold></td>
<td align="center" rowspan="2">GPU</td>
<td align="right">1</td>
<td align="char" char=".">812.6</td>
<td align="char" char=".">0.10</td>
<td align="char" char=".">0.03</td>
</tr>
<tr>
<td align="center"><bold>D</bold></td>
<td align="right">8</td>
<td align="char" char=".">192.3</td>
<td align="char" char=".">0.44</td>
<td align="char" char=".">0.12</td>
</tr>
<tr>
<td align="center"><bold>E</bold></td>
<td align="center" rowspan="2">NVIDIA GTX 1070</td>
<td align="center" rowspan="2">GPU</td>
<td align="center" rowspan="2">GPU</td>
<td align="right" rowspan="2">1920</td>
<td align="center">OpenCL</td>
<td align="char" char=".">57.8</td>
<td align="char" char=".">1.48</td>
<td align="char" char=".">0.36</td>
</tr>
<tr>
<td align="center"><bold>F</bold><xref ref-type="table-fn" rid="t002fn001">*</xref></td>
<td align="center">CUDA</td>
<td align="char" char=".">17.6</td>
<td align="char" char=".">4.64</td>
<td align="char" char=".">1.00</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t002fn001"><p>*Configuration (F) is equivalent to the earlier PaSWAS [<xref ref-type="bibr" rid="pone.0190279.ref001">1</xref>], and is therefore used as reference here. The last two columns give the amount of time spent on the largest set of alignments in the performance analysis and the speedup compared to the configuration (F).</p></fn>
<fn id="t002fn002"><p>**GCUPS: giga cell updates per second.</p></fn>
</table-wrap-foot>
</table-wrap>
<p>In all cases, pyPaSWAS was run on a standard desktop (Intel i7 -2600K) running Ubuntu 16.02 and holding an NVIDIA GeForce GTX 1070 GPU. Timing of alignments was done by determining the run time of the application between first and last API calls to the Python libraries (either pyOpenCL or pyCUDA), so overhead such as file I/O is not taken into account. The full report is in <xref ref-type="supplementary-material" rid="pone.0190279.s001">S1 Report</xref>. Performance analysis with the same data set on a standard laptop is in <xref ref-type="supplementary-material" rid="pone.0190279.s002">S2 Report</xref>.</p>
<p>As test set for the performance analysis of pyPaSWAS on the different hardware configurations, the Ankyrin repeat protein set from the domestic dog (<italic>Canis lupus familiaris</italic>; CanFAM 3.1, GCA_000002285.2), consisting of 348 proteins was used. For the performance analysis, the eight proteins not labeled ‘PRED’ were selected and aligned to an increasing number of proteins from the total data set. The time required to calculate the increasing number of SW alignments by the six configurations is shown in <xref ref-type="fig" rid="pone.0190279.g001">Fig 1</xref>. The time for performing the maximum of 2720 sequence alignments is also given in <xref ref-type="table" rid="pone.0190279.t002">Table 2</xref>. As these protein sequences differ in length, it is common to indicate the speed of the SW computations in giga cell updates per second (GCUPS) to create an performance indicator independent of sequence length. The alignment output itself and the biological context were not considered. In this example data set the CUDA implementation running on the GPU (F) is the fastest configuration and is 2.8 times faster than the OpenCL version optimized for the GPU (E). The data also shows that the fastest configuration (F) is 33.3 times faster than the for GPU optimized OpenCL version on single CPU core, showing the advantages of parallel processing of SW alignments on a GPU. The for CPUs optimized OpenCL version (B) is 1.8 times faster than the for GPUs optimized version (D) on the same CPU. This shows that creating an OpenCL version of an application optimized for a particular hardware platform can speed up the application further.</p>
<fig id="pone.0190279.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pone.0190279.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Performance of six different configurations for pyPaSWAS in Smith Waterman (SW) alignments.</title>
<p>The time required (Y-axis) for processing an incremental number of alignments (X-axis) is plotted. For details of the different configurations A-F see <xref ref-type="table" rid="pone.0190279.t002">Table 2</xref>.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pone.0190279.g001" xlink:type="simple"/>
</fig>
<p>The performance tests using only a single core demonstrate the ability of pyPaSWAS to scale-down the number of cores used for the sequence alignments.</p>
<p>The CUDA version (configuration F) is faster than the OpenCL version on a GPU (configuration E), showing the added value of having a CUDA version in this case. There are several other reasons for having CUDA support in pyPaSWAS. In general, CUDA is faster than OpenCL [<xref ref-type="bibr" rid="pone.0190279.ref017">17</xref>]. Also, on some systems we tested, notably Apple Macs, OpenCL is not fully supported on NVIDIA GPUs, so CUDA is the only option available. Furthermore, several NVIDIA GPU products support only 32 bits memory allocation for OpenCL, which limits the amount of usable memory to 2 GB, but allow 64 bits memory for CUDA.</p>
<p>Analyses of the impact of the affine gap penalty on overall performance when the using the same data sets show that, on a desktop PC, all configurations are slower: from 1.14 times to 2.0 times slower (<xref ref-type="supplementary-material" rid="pone.0190279.s003">S3 Report</xref>). Combined with the fact that memory requirement is also three times higher, it is therefore opportune to make sure that the affine gap is relevant for the task at hand.</p>
<p>A major advantage of PaSWAS for biological analyses is that it documents all alignment details necessary for further analysis, in marked contrast to other parallel SW implementations that focus on computational speed of the best alignment[<xref ref-type="bibr" rid="pone.0190279.ref001">1</xref>]. When for example compared to CUDASW++ version 3.0 getting the alignment profile comes with a performance penalty of about 25x (119.0 GCUPS [<xref ref-type="bibr" rid="pone.0190279.ref007">7</xref>] compared to 4.64 GCUPS) on similar hardware. The novel implementation pyPaSWAS here presented is more versatile for biological analysis then the original PaSWAS code-base: not only full alignment details are stored and available for inspection, it also allows for gap extension penalties in scoring the alignment. In addition, the output can now also be formatted as a SAM file. Also, pyPaSWAS has more command line options and the output contains more relevant information, such as query coverage and query identity scores. The Python codebase enables bioinformatics researchers to add other output formats, store the alignments directly in a database or connect the application with workflow systems such as Galaxy [<xref ref-type="bibr" rid="pone.0190279.ref019">19</xref>]. In addition, the source repository holds configuration files to build Docker containers, including one Docker container with CUDA and OpenCL support, to allow for easy installation of pyPaSWAS and the required drivers and libraries.</p>
<p>As data volumes continue to grow and analyses tend to become more complex in every branch of bioinformatics, the added value of advanced high-performance IT solutions such as multicore CPUs and GPUs is transforming into a need for such solutions. Multicore CPUs for Blast [<xref ref-type="bibr" rid="pone.0190279.ref020">20</xref>] and BWA [<xref ref-type="bibr" rid="pone.0190279.ref021">21</xref>], cluster computing for Interproscan [<xref ref-type="bibr" rid="pone.0190279.ref022">22</xref>] and cloud infrastructure for a wide range of biomedical / bioinformatics applications are available [<xref ref-type="bibr" rid="pone.0190279.ref023">23</xref>]. High performance technology used in mathematics [<xref ref-type="bibr" rid="pone.0190279.ref024">24</xref>,<xref ref-type="bibr" rid="pone.0190279.ref025">25</xref>] and audio/video processing [<xref ref-type="bibr" rid="pone.0190279.ref026">26</xref>] rely on GPUs and OpenCL. Wider acceptance of OpenCL -based GPU applications in bioinformatics is likely to be promoted by packaging the C++ code for parallelization in a much more common used language such as Python as demonstrated here. The pyPaSWAS integration of Python with OpenCL should promote further use of advanced algorithms in bioinformatics. Given this successful showcase for the integration of OpenCL with new or existing software in Python, it could be considered to port bioinformatics algorithms that make use of advanced high performance technology to Python, R [<xref ref-type="bibr" rid="pone.0190279.ref027">27</xref>], Matlab [<xref ref-type="bibr" rid="pone.0190279.ref028">28</xref>] or Java [<xref ref-type="bibr" rid="pone.0190279.ref029">29</xref>] in a way similar to pyPaSWAS. This will promote use, maintenance and development of high performance implementations of bioinformatics applications further. Such an approach could benefit for example algorithms for genome wide association studies [<xref ref-type="bibr" rid="pone.0190279.ref030">30</xref>], eQTL analyses [<xref ref-type="bibr" rid="pone.0190279.ref031">31</xref>] or phylogenetics [<xref ref-type="bibr" rid="pone.0190279.ref032">32</xref>].</p>
</sec>
<sec id="sec008" sec-type="conclusions">
<title>Conclusion</title>
<p>pyPaSWAS is the implementation in Python of a general-purpose Smith-Waterman alignment supporting both the basic gap penalty method as well as the affine gap penalty method. The application runs fast on many multi-core systems, including GPUs and Xeon Phis, while still offering the desired flexibility to inspect any given alignment and all its parameters. The Python-based application will increase the use and utility of the parallel SW approach of PaSWAS. The smooth integration of Python with the much more complex languages OpenCL and CUDA for parallel execution of the SW algorithm makes pyPaSWAS easier to develop and maintain than its predecessor. The relative ease of Python, as well as the much larger community of programmers in Python, is likely to promote adoption and use, as well as facilitate addition of novel features to pyPaSWAS.</p>
</sec>
<sec id="sec009">
<title>Supporting information</title>
<supplementary-material id="pone.0190279.s001" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pone.0190279.s001" xlink:type="simple">
<label>S1 Report</label>
<caption>
<title>pyOpenCL and pyCUDA performance data (Desktop system).</title>
<p>Full report on the timing measurement of the protein alignment analyses, run on a standard desktop PC.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pone.0190279.s002" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pone.0190279.s002" xlink:type="simple">
<label>S2 Report</label>
<caption>
<title>pyOpenCL and pyCUDA performance data (Laptop).</title>
<p>Full report on the timing measurement of the protein alignment analyses, run on a high-performance laptop.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pone.0190279.s003" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pone.0190279.s003" xlink:type="simple">
<label>S3 Report</label>
<caption>
<title>Analyses of the impact of the affine gap penalty on overall performance (Desktop system).</title>
<p>(PDF)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>We thank Tim te Beek (former Netherlands Bioinformatics Centre) and Shruti Srivastava (Wageningen University &amp; Research) for support during the development process, as well as Piet Plomp (Hanze University of Applied Sciences) for developing and maintaining the IT infrastructure. This work was partly carried out on the Dutch national e-infrastructure with the support of SURF Cooperative. Dick de Ridder (Wageningen University &amp; Research) was helpful in suggesting the performance experiments and discussing the results.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pone.0190279.ref001"><label>1</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Warris</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Yalcin</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Jackson</surname> <given-names>KJL</given-names></name>, <name name-style="western"><surname>Nap</surname> <given-names>JP</given-names></name>. <article-title>Flexible, Fast and Accurate Sequence Alignment Profiling on GPGPU with PaSWAS</article-title>. <name name-style="western"><surname>Zhang</surname> <given-names>M</given-names></name>, editor. <source>PLoS One</source>. <year>2015</year>;<volume>10</volume>: <fpage>e0122524</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pone.0122524" xlink:type="simple">10.1371/journal.pone.0122524</ext-link></comment> <object-id pub-id-type="pmid">25830241</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref002"><label>2</label><mixed-citation publication-type="other" xlink:type="simple">Chang Y-J, Chen C-C, Ho J-M, Chen C-L. De Novo Assembly of High-Throughput Sequencing Data with Cloud Computing and New Operations on String Graphs. 2012 IEEE Fifth International Conference on Cloud Computing. IEEE; 2012. pp. 155–161. 10.1109/CLOUD.2012.123</mixed-citation></ref>
<ref id="pone.0190279.ref003"><label>3</label><mixed-citation publication-type="other" xlink:type="simple">Hadoop—Apache Software Foundation project home page [Internet]. <ext-link ext-link-type="uri" xlink:href="http://hadoop.apache.org/" xlink:type="simple">http://hadoop.apache.org/</ext-link></mixed-citation></ref>
<ref id="pone.0190279.ref004"><label>4</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Taylor</surname> <given-names>RC</given-names></name>. <article-title>An overview of the Hadoop/MapReduce/HBase framework and its current applications in bioinformatics</article-title>. <source>BMC Bioinformatics</source>. <year>2010</year>;<volume>11</volume> <issue>Suppl 1</issue>: <fpage>S1</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/1471-2105-11-S12-S1" xlink:type="simple">10.1186/1471-2105-11-S12-S1</ext-link></comment> <object-id pub-id-type="pmid">21210976</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref005"><label>5</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Liu</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Maskell</surname> <given-names>DL</given-names></name>, <name name-style="western"><surname>Schmidt</surname> <given-names>B</given-names></name>. <article-title>CUDASW++: optimizing Smith-Waterman sequence database searches for CUDA-enabled graphics processing units</article-title>. <source>BMC Res Notes. BioMed Central</source>; <year>2009</year>;<volume>2</volume>: <fpage>73</fpage>.</mixed-citation></ref>
<ref id="pone.0190279.ref006"><label>6</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Liu</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Schmidt</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Maskell</surname> <given-names>DL</given-names></name>. <article-title>CUDASW++2.0: enhanced Smith-Waterman protein database search on CUDA-enabled GPUs based on SIMT and virtualized SIMD abstractions</article-title>. <source>BMC Res Notes. BioMed Central</source>; <year>2010</year>;<volume>3</volume>: <fpage>93</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/1756-0500-3-93" xlink:type="simple">10.1186/1756-0500-3-93</ext-link></comment> <object-id pub-id-type="pmid">20370891</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref007"><label>7</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Liu</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Wirawan</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Schmidt</surname> <given-names>B</given-names></name>. <article-title>CUDASW++ 3.0: accelerating Smith-Waterman protein database search by coupling CPU and GPU SIMD instructions</article-title>. <source>BMC Bioinformatics</source>. <year>2013</year>;<volume>14</volume>: <fpage>117</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/1471-2105-14-117" xlink:type="simple">10.1186/1471-2105-14-117</ext-link></comment> <object-id pub-id-type="pmid">23557111</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref008"><label>8</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Gotoh</surname> <given-names>O</given-names></name>. <article-title>An improved algorithm for matching biological sequences</article-title>. <source>J Mol Biol</source>. <year>1982</year>;<volume>162</volume>: <fpage>705</fpage>–<lpage>708</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/0022-2836(82)90398-9" xlink:type="simple">10.1016/0022-2836(82)90398-9</ext-link></comment> <object-id pub-id-type="pmid">7166760</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref009"><label>9</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Cock</surname> <given-names>PJA</given-names></name>, <name name-style="western"><surname>Antao</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Chang</surname> <given-names>JT</given-names></name>, <name name-style="western"><surname>Chapman</surname> <given-names>BA</given-names></name>, <name name-style="western"><surname>Cox</surname> <given-names>CJ</given-names></name>, <name name-style="western"><surname>Dalke</surname> <given-names>A</given-names></name>, <etal>et al</etal>. <article-title>Biopython: freely available Python tools for computational molecular biology and bioinformatics</article-title>. <source>Bioinformatics</source>. <year>2009</year>;<volume>25</volume>: <fpage>1422</fpage>–<lpage>3</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btp163" xlink:type="simple">10.1093/bioinformatics/btp163</ext-link></comment> <object-id pub-id-type="pmid">19304878</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref010"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Jones E, Oliphant T, Peterson P. SciPy: Open source scientific tools for Python [Internet]. 2001. <ext-link ext-link-type="uri" xlink:href="http://www.scipy.org" xlink:type="simple">http://www.scipy.org</ext-link></mixed-citation></ref>
<ref id="pone.0190279.ref011"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Munshi A, others. The opencl specification. Khronos OpenCL Work Gr. p. l1—15; 2009;1: l1—15.</mixed-citation></ref>
<ref id="pone.0190279.ref012"><label>12</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Klöckner</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Pinto</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Lee</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Catanzaro</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Ivanov</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Fasih</surname> <given-names>A</given-names></name>. <article-title>PyCUDA and PyOpenCL: A scripting-based approach to GPU run-time code generation</article-title>. <source>Parallel Comput</source>. <year>2012</year>;<volume>38</volume>: <fpage>157</fpage>–<lpage>174</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.parco.2011.09.001" xlink:type="simple">10.1016/j.parco.2011.09.001</ext-link></comment></mixed-citation></ref>
<ref id="pone.0190279.ref013"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">NVIDIA. CUDA Download. In: <ext-link ext-link-type="uri" xlink:href="http://developer.nvidia.com/cuda-downloads" xlink:type="simple">http://developer.nvidia.com/cuda-downloads</ext-link> [Internet]. [cited 1 Sep 2016].</mixed-citation></ref>
<ref id="pone.0190279.ref014"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">NumPy. In: <ext-link ext-link-type="uri" xlink:href="http://numpy.scipy.org/" xlink:type="simple">http://numpy.scipy.org/</ext-link> [Internet]. 2001.</mixed-citation></ref>
<ref id="pone.0190279.ref015"><label>15</label><mixed-citation publication-type="other" xlink:type="simple">bioPython. In: <ext-link ext-link-type="uri" xlink:href="http://biopython.org/wiki/Biopython" xlink:type="simple">http://biopython.org/wiki/Biopython</ext-link> [Internet].</mixed-citation></ref>
<ref id="pone.0190279.ref016"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Warris S. pyPaSWAS Wiki [Internet]. [cited 1 Sep 2016]. <ext-link ext-link-type="uri" xlink:href="https://github.com/swarris/pyPaSWAS/wiki" xlink:type="simple">https://github.com/swarris/pyPaSWAS/wiki</ext-link></mixed-citation></ref>
<ref id="pone.0190279.ref017"><label>17</label><mixed-citation publication-type="other" xlink:type="simple">Fang J, Varbanescu AL, Sips H. A Comprehensive Performance Comparison of CUDA and OpenCL. 2011 International Conference on Parallel Processing. IEEE; 2011. pp. 216–225. 10.1109/ICPP.2011.45</mixed-citation></ref>
<ref id="pone.0190279.ref018"><label>18</label><mixed-citation publication-type="other" xlink:type="simple">Timal NRN. Accelerating Protein Sequence Alignment with Different Parallel Hardware Platforms (MSc Thesis). TU Delft, Delft University of Technology. 2015.</mixed-citation></ref>
<ref id="pone.0190279.ref019"><label>19</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Goecks</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Nekrutenko</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Taylor</surname> <given-names>J</given-names></name>. <article-title>Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences</article-title>. <source>Genome Biol</source>. <year>2010</year>;<volume>11</volume>: <fpage>R86</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/gb-2010-11-8-r86" xlink:type="simple">10.1186/gb-2010-11-8-r86</ext-link></comment> <object-id pub-id-type="pmid">20738864</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref020"><label>20</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Altschul</surname> <given-names>SF</given-names></name>, <name name-style="western"><surname>Gish</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Miller</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Myers</surname> <given-names>EW</given-names></name>, <name name-style="western"><surname>Lipman</surname> <given-names>DJ</given-names></name>. <article-title>Basic local alignment search tool</article-title>. <source>J Mol Biol. Elsevier</source>; <year>1990</year>;<volume>215</volume>: <fpage>403</fpage>–<lpage>410</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1006/jmbi.1990.9999" xlink:type="simple">10.1006/jmbi.1990.9999</ext-link></comment></mixed-citation></ref>
<ref id="pone.0190279.ref021"><label>21</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Li</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Durbin</surname> <given-names>R</given-names></name>. <article-title>Fast and accurate long-read alignment with Burrows-Wheeler transform</article-title>. <source>Bioinformatics</source>. <year>2010</year>;<volume>26</volume>: <fpage>589</fpage>–<lpage>95</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btp698" xlink:type="simple">10.1093/bioinformatics/btp698</ext-link></comment> <object-id pub-id-type="pmid">20080505</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref022"><label>22</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Zdobnov</surname> <given-names>EM</given-names></name>, <name name-style="western"><surname>Apweiler</surname> <given-names>R</given-names></name>. <article-title>InterProScan—an integration platform for the signature-recognition methods in InterPro</article-title>. <source>Bioinformatics</source>. <year>2001</year>;<volume>17</volume>: <fpage>847</fpage>–<lpage>848</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/17.9.847" xlink:type="simple">10.1093/bioinformatics/17.9.847</ext-link></comment> <object-id pub-id-type="pmid">11590104</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref023"><label>23</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Luo</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Wu</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Gopukumar</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Zhao</surname> <given-names>Y</given-names></name>. <article-title>Big Data Application in Biomedical Research and Health Care: A Literature Review</article-title>. <source>Biomed Inform Insights</source>. <year>2016</year>;<volume>8</volume>: <fpage>1</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.4137/BII.S31559" xlink:type="simple">10.4137/BII.S31559</ext-link></comment> <object-id pub-id-type="pmid">26843812</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref024"><label>24</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Demidov</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Ahnert</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Rupp</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Gottschling</surname> <given-names>P</given-names></name>. <article-title>Programming CUDA and OpenCL: A Case Study Using Modern C++ Libraries</article-title>. <source>SIAM J Sci Comput. Society for Industrial and Applied Mathematics</source>; <year>2013</year>;<volume>35</volume>: <fpage>C453</fpage>–<lpage>C472</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1137/120903683" xlink:type="simple">10.1137/120903683</ext-link></comment></mixed-citation></ref>
<ref id="pone.0190279.ref025"><label>25</label><mixed-citation publication-type="other" xlink:type="simple">OpenCL Libraries and toolkits [Internet]. <ext-link ext-link-type="uri" xlink:href="http://www.iwocl.org/resources/opencl-libraries-and-toolkits/" xlink:type="simple">http://www.iwocl.org/resources/opencl-libraries-and-toolkits/</ext-link></mixed-citation></ref>
<ref id="pone.0190279.ref026"><label>26</label><mixed-citation publication-type="other" xlink:type="simple">Kola G, Kosar T, Livny M. A Fully Automated Fault-tolerant System for Distributed Video Processing and Off-site Replication. Proceedings of the 14th International Workshop on Network and Operating Systems Support for Digital Audio and Video. Kinsale, Ireland; 2004.</mixed-citation></ref>
<ref id="pone.0190279.ref027"><label>27</label><mixed-citation publication-type="other" xlink:type="simple">Urbanek S. R OpenCL [Internet]. [cited 1 Sep 2016]. <ext-link ext-link-type="uri" xlink:href="https://cran.r-project.org/web/packages/OpenCL/index.html" xlink:type="simple">https://cran.r-project.org/web/packages/OpenCL/index.html</ext-link></mixed-citation></ref>
<ref id="pone.0190279.ref028"><label>28</label><mixed-citation publication-type="other" xlink:type="simple">MathWorks. MathWorks GPU Computing [Internet]. [cited 1 Sep 2016]. <ext-link ext-link-type="uri" xlink:href="http://nl.mathworks.com/discovery/matlab-gpu.html" xlink:type="simple">http://nl.mathworks.com/discovery/matlab-gpu.html</ext-link></mixed-citation></ref>
<ref id="pone.0190279.ref029"><label>29</label><mixed-citation publication-type="other" xlink:type="simple">Jocl.org. JOCL [Internet]. [cited 1 Sep 2016]. <ext-link ext-link-type="uri" xlink:href="http://www.jocl.org/" xlink:type="simple">http://www.jocl.org/</ext-link></mixed-citation></ref>
<ref id="pone.0190279.ref030"><label>30</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Standish</surname> <given-names>KA</given-names></name>, <name name-style="western"><surname>Carland</surname> <given-names>TM</given-names></name>, <name name-style="western"><surname>Lockwood</surname> <given-names>GK</given-names></name>, <name name-style="western"><surname>Pfeiffer</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Tatineni</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Huang</surname> <given-names>CC</given-names></name>, <etal>et al</etal>. <article-title>Group-based variant calling leveraging next-generation supercomputing for large-scale whole-genome sequencing studies</article-title>. <source>BMC Bioinformatics. BioMed Central</source>; <year>2015</year>;<volume>16</volume>: <fpage>304</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/s12859-015-0736-4" xlink:type="simple">10.1186/s12859-015-0736-4</ext-link></comment> <object-id pub-id-type="pmid">26395405</object-id></mixed-citation></ref>
<ref id="pone.0190279.ref031"><label>31</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Jansen</surname> <given-names>RC</given-names></name>, <name name-style="western"><surname>Nap</surname> <given-names>JP</given-names></name>. <article-title>Genetical genomics: the added value from segregation</article-title>. <source>Trends Genet. Elsevier</source>; <year>2001</year>;<volume>17</volume>: <fpage>388</fpage>–<lpage>91</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/s0168-9525(01)02310-1" xlink:type="simple">10.1016/s0168-9525(01)02310-1</ext-link></comment></mixed-citation></ref>
<ref id="pone.0190279.ref032"><label>32</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Stivala</surname> <given-names>AD</given-names></name>, <name name-style="western"><surname>Stuckey</surname> <given-names>PJ</given-names></name>, <name name-style="western"><surname>Wirth</surname> <given-names>AI</given-names></name>. <article-title>Fast and accurate protein substructure searching with simulated annealing and GPUs</article-title>. <source>BMC Bioinformatics. BioMed Central</source>; <year>2010</year>;<volume>11</volume>: <fpage>446</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/1471-2105-11-446" xlink:type="simple">10.1186/1471-2105-11-446</ext-link></comment> <object-id pub-id-type="pmid">20813068</object-id></mixed-citation></ref>
</ref-list>
</back>
</article>