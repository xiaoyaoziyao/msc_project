<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="3.0" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS ONE</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">plosone</journal-id><journal-title-group>
<journal-title>PLoS ONE</journal-title></journal-title-group>
<issn pub-type="epub">1932-6203</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, USA</publisher-loc></publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PONE-D-14-14458</article-id>
<article-id pub-id-type="doi">10.1371/journal.pone.0111970</article-id>
<article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Computer and information sciences</subject><subj-group><subject>Computerized simulations</subject></subj-group><subj-group><subject>Systems science</subject><subj-group><subject>Control systems</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Engineering and technology</subject><subj-group><subject>Control engineering</subject><subj-group><subject>Automation</subject></subj-group></subj-group><subj-group><subject>Mechanical engineering</subject><subj-group><subject>Robotics</subject><subj-group><subject>Robotic behavior</subject><subject>Robotics systems</subject><subject>Robots</subject></subj-group></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>A Hybrid Search Algorithm for Swarm Robots Searching in an Unknown Environment</article-title>
<alt-title alt-title-type="running-head">Swarm Robots Searching</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Li</surname><given-names>Shoutao</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Li</surname><given-names>Lina</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Lee</surname><given-names>Gordon</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Zhang</surname><given-names>Hao</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib>
</contrib-group>
<aff id="aff1"><label>1</label><addr-line>College of Communication Engineering, Jilin University, Changchun, Jilin Province, China</addr-line></aff>
<aff id="aff2"><label>2</label><addr-line>Department of Electrical &amp; Computer Engineering, San Diego State University, San Diego, California, United States of America</addr-line></aff>
<aff id="aff3"><label>3</label><addr-line>Symbol Computation and Knowledge Engineering of Ministry of Education, College of Computer Science and Technology, Jilin University, Changchun, China</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple"><name name-style="western"><surname>Wang</surname><given-names>Long</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/></contrib>
</contrib-group>
<aff id="edit1"><addr-line>Peking University, China</addr-line></aff>
<author-notes>
<corresp id="cor1">* E-mail: <email xlink:type="simple">zhangh@jlu.edu.cn</email></corresp>
<fn fn-type="conflict"><p>The authors have declared that no competing interests exist.</p></fn>
<fn fn-type="con"><p>Conceived and designed the experiments: STL HZ. Performed the experiments: STL LNL HZ GL. Analyzed the data: STL GL HZ. Contributed reagents/materials/analysis tools: LNL HZ. Wrote the paper: STL HZ.</p></fn>
</author-notes>
<pub-date pub-type="collection"><year>2014</year></pub-date>
<pub-date pub-type="epub"><day>11</day><month>11</month><year>2014</year></pub-date>
<volume>9</volume>
<issue>11</issue>
<elocation-id>e111970</elocation-id>
<history>
<date date-type="received"><day>15</day><month>4</month><year>2014</year></date>
<date date-type="accepted"><day>10</day><month>10</month><year>2014</year></date>
</history>
<permissions>
<copyright-year>2014</copyright-year>
<license xlink:type="simple"><license-p>This is an open-access article, free of all copyright, and may be freely reproduced, distributed, transmitted, modified, built upon, or otherwise used by anyone for any lawful purpose. The work is made available under the Creative Commons CC0 public domain dedication.</license-p></license></permissions>
<abstract>
<p>This paper proposes a novel method to improve the efficiency of a swarm of robots searching in an unknown environment. The approach focuses on the process of feeding and individual coordination characteristics inspired by the foraging behavior in nature. A predatory strategy was used for searching; hence, this hybrid approach integrated a random search technique with a dynamic particle swarm optimization (DPSO) search algorithm. If a search robot could not find any target information, it used a random search algorithm for a global search. If the robot found any target information in a region, the DPSO search algorithm was used for a local search. This particle swarm optimization search algorithm is dynamic as all the parameters in the algorithm are refreshed synchronously through a communication mechanism until the robots find the target position, after which, the robots fall back to a random searching mode. Thus, in this searching strategy, the robots alternated between two searching algorithms until the whole area was covered. During the searching process, the robots used a local communication mechanism to share map information and DPSO parameters to reduce the communication burden and overcome hardware limitations. If the search area is very large, search efficiency may be greatly reduced if only one robot searches an entire region given the limited resources available and time constraints. In this research we divided the entire search area into several subregions, selected a target utility function to determine which subregion should be initially searched and thereby reduced the residence time of the target to improve search efficiency.</p>
</abstract>
<funding-group><funding-statement>The authors have no funding or support to report.</funding-statement></funding-group><counts><page-count count="10"/></counts><custom-meta-group><custom-meta id="data-availability" xlink:type="simple"><meta-name>Data Availability</meta-name><meta-value>The authors confirm that all data underlying the findings are fully available without restriction. Relevant data are available as a zipped Supporting Information file. There are 16 files in this package. The file named “fitness.m” is the fitness function of dpso algorithm, and the other 15 files are simulation programs of this experiment.</meta-value></custom-meta></custom-meta-group></article-meta>
</front>
<body><sec id="s1">
<title>Introduction</title>
<p>Robotic urban search and rescue operations are a challenging yet promising research area <xref ref-type="bibr" rid="pone.0111970-Sheh1">[1]</xref>–<xref ref-type="bibr" rid="pone.0111970-Wang1">[4]</xref>, which has significant application potential, as has been seen during rescue and recovery operations of disaster events, i.e., the Japan Earthquake in March 2011 <xref ref-type="bibr" rid="pone.0111970-Guizzo1">[5]</xref>. The searching problem is an integral part of many robotic applications ranging from planetary exploration, examination of hazardous environments, rescue operations and warfare, to domestic applications. Robots provide a means to minimize human exposure to harmful situations while providing a mechanism to perform potentially life-saving operations.</p>
<p>The usage of robotic platforms in treacherous environments, in fact, has become a necessity in present day society. There are many researchers investigating this area such as <xref ref-type="bibr" rid="pone.0111970-Nanjanath1">[6]</xref>–<xref ref-type="bibr" rid="pone.0111970-BO1">[9]</xref>. Perc and Szolnoki <xref ref-type="bibr" rid="pone.0111970-Perc1">[10]</xref> reviewed research in coevolutionary games and also gave a didactic description of potential pitfalls and misconceptions associated with the subject. Hoff et al. <xref ref-type="bibr" rid="pone.0111970-Hoff1">[11]</xref> suggested a dual agent system requiring two algorithms for searching robots serving as scouts or harvesters during the search. The scouts are designed to be sensor-orientated multiple robots that can perform a more efficient search and collection in a larger area than a singular robot could accomplish. Darvishzadeh in <xref ref-type="bibr" rid="pone.0111970-Darvishzadah1">[12]</xref> proposes an improved distance-based POS algorithm, which has produced better results than others, but only for a single target; furthermore, the robot requirements for his experiments are relatively high. Sisso et al. in <xref ref-type="bibr" rid="pone.0111970-Sisso1">[13]</xref> proposes an info-gap approach to the multi-agent search problem under severe uncertainty. The strategy uses a decision making architecture and may be useful in various scenarios; however, it assumes that a database for the search exists. When prior data is known to be very reliable, one might rightfully choose to maximize the expected utility. Caiand Yang <xref ref-type="bibr" rid="pone.0111970-Cai1">[14]</xref> put forward an improved particle swarm optimization (PSO) based approach whereby a team of mobile robots cooperate in the search for targets in complex unknown environments. The authors apply improved cooperation rules for a multi-robot system using a potential field function, which acts as the fitness function for the PSO. The main improvements are the district-difference degree and dynamic parameter tuning. Darvishzadeh in <xref ref-type="bibr" rid="pone.0111970-Darvishzadeh1">[15]</xref> presents a framework for a modified PSO algorithm (MPSO) in a multi-robot system for searching tasks in real-world environments. In this paper, we modify this algorithm to optimize the total path traveled by robots. Tang and Eberhardin <xref ref-type="bibr" rid="pone.0111970-Tang1">[16]</xref> designed a new approach, Extremum Seeking (ES) which takes into account the mechanical properties that the robot utilizes when conduction a target search. In order to avoid robot localization as well as compensate for noise due to feedback and measurement errors, ES aids the mechanical Particle Swarm Optimization (PSO). As stated by Tang and Eberhard: “The ES based method is capable of driving robots to the purposed states generated by the mechanical PSO without the necessity of robot localization.” This allows the whole robot swarm to approach their target together as a coordinated team. Zhang et al. in <xref ref-type="bibr" rid="pone.0111970-Zhang1">[17]</xref> investigates the evolution of cooperation among selfish individuals in the stochastic strategy spatial prisoner's dilemma game. The concept of particle swarm optimization was originally introduced within a simple model of social dynamics that can describe the formation of a swarm. Essentially, particle swarm optimization foresees changes in the velocity profile of each player, such that the best locations are targeted and eventually occupied.</p>
<p>In disaster-related situations, finding the targets (humans) is the most important task. Based on the research methods just discussed in the introductory literature survey, we investigated a new hybrid search algorithm inspired by the foraging behavior of creatures searching for food in the natural world, and focused on the process of feeding and defining individual coordination characteristics. Our new hybrid algorithm was tested using by a swarm of robots in an unknown environment and has proved capable of speeding up the search process for targets that are both within and outside a sensible region. This hybrid algorithm also guarantees finding all the targets. Compared to existing work in this area, our approach reduces the complexity, which in turn makes it easier to implement and more efficient. This hybrid search algorithm can be applied to a variety of places such as searching for survivors in case of fire or mine disaster, and it could even be used for outer space exploration. In addition, our proposed target utility function requires less resource from the robots for computation tasks, which makes our algorithm applicable to a wide range of robots in practice.</p>
<p>The rest of this paper is organized as follows: In the Materials and Methods section, we present our hybrid search algorithm based on both random search and the DPSO search. We then define our robotic control structure, communication mechanism, and map storage strategy. In the Results and Discussion section, we propose a target utility function and introduce the simulation platform followed by experimental results. The Conclusion summarizes the benefits of our new hybrid search algorithm compared with other algorithms and recommends future research.</p>
</sec><sec id="s2" sec-type="materials|methods">
<title>Materials and Methods</title>
<sec id="s2a">
<title>The hybrid search algorithm based on a random search algorithm and DPSO search algorithm</title>
<p>While investigating how zoologists model predatory behavior of animals, we found that in spite of the different animal species with vastly different body structures, their predatory behavior is surprisingly similar. When animals prey, in the absence of a food source or when prey signs are found indicating possible food sources, the predators search the entire space following a certain direction. Once a sign of a prey is found, they slow down their pace and concentrate on a smaller region for a more intensified regional search. If, after a period of time, the prey is not found, a predator will abandon the concentrated area, and continue searching the remaining open space.</p>
<p>Inspired by this predation strategy, we proposed a hybrid search algorithm, based on a random search algorithm and DPSO search algorithm. From the beginning of the search until the target is identified, the robot's velocity is a constant. If a robot can't find a target or targets, it will use a random search algorithm for a global search. When a robot finds a target or targets, it will stop using the random search algorithm and start using the DPSO search algorithm, employing the concentration value of the target to change its velocity, and at the same time, it will work with other robots within the communication range to determine the target's position. A hybrid search algorithm flow chart is shown in <xref ref-type="fig" rid="pone-0111970-g001">Figure 1</xref>.</p>
<fig id="pone-0111970-g001" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g001</object-id><label>Figure 1</label><caption>
<title>Hybrid search algorithm flow chart.</title>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g001" position="float" xlink:type="simple"/></fig>
<p>In this paper, the velocity and position update of the random search algorithm are defined as follows:<disp-formula id="pone.0111970.e001"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pone.0111970.e001" xlink:type="simple"/><label>(1)</label></disp-formula></p>
<p>Here <italic>v(t)</italic> represents the velocity of a robot, <italic>θ</italic> represents the angle between the velocity vector and the <italic>x</italic>-axis; and Δ<italic>t</italic> is the time interval. In (1), we have selected Δ<italic>t</italic> = 1.</p>
<p>The velocity and position update of DPSO is shown in (2). Here, the initial value of the velocity, <italic>v</italic>(<italic>t</italic>), is set to <italic>a</italic>, and then changes with time. Further, <italic>θ∈ (0, π)</italic> because Δ<italic>t</italic> = 1. Also, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e002" xlink:type="simple"/></inline-formula> represents the best position of a robot alone the <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e003" xlink:type="simple"/></inline-formula>-axis in the search process, and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e004" xlink:type="simple"/></inline-formula> represents the best position of all robots within the communication range along the <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e005" xlink:type="simple"/></inline-formula>-axis in the search process. Finally, <italic>ω</italic>, <italic>c<sub>1</sub></italic> and <italic>c<sub>2</sub></italic> are time-varying weights, tuned according to the particular scenarios, where 0&lt;ω&lt;2, 0&lt;c<sub>1</sub>&lt;1, and 0&lt;c<sub>2</sub>&lt;1.<disp-formula id="pone.0111970.e006"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pone.0111970.e006" xlink:type="simple"/><label>(2)</label></disp-formula></p>
<p>The DPSO algorithm is called dynamic for two reasons: 1) the numbers of the population, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e007" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e008" xlink:type="simple"/></inline-formula> are determined by the communication mechanism which establishes a priority, and 2) the random search algorithm and DPSO search algorithm continuously transition during the search process.</p>
<p>In (3), we define a signal concentration function as the DPSO fitness function. The maximum measurable distance of the target signal is D. Targets can be measured when the distance is less than or equal to D. Furthermore, Q is a constant of the target energy, d<sub>i</sub> is the distance between robot i and the target, and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e009" xlink:type="simple"/></inline-formula> is a function of growth, which increases with time as shown in (4).<disp-formula id="pone.0111970.e010"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pone.0111970.e010" xlink:type="simple"/><label>(3)</label></disp-formula><disp-formula id="pone.0111970.e011"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pone.0111970.e011" xlink:type="simple"/><label>(4)</label></disp-formula></p>
<p>In order to verify the effect of the hybrid search algorithm proposed here, we used particles to simulate a search. The simulation results are shown in <xref ref-type="fig" rid="pone-0111970-g002">Figure 2</xref> and discussed later in Section 4. The initial state of every search is same: There are five particles to search: The blue dots are searching particles; the red dots represent the target. From <xref ref-type="fig" rid="pone-0111970-g002">Figure 2</xref> we see that no matter where the target is and no matter what the distance is of particles from the target, a number of particles will always reside around the target, and the rest of the particles will be nearby. Hence, one can easily carry out the next step of processing, such as transportation, and so on.</p>
<fig id="pone-0111970-g002" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g002</object-id><label>Figure 2</label><caption>
<title>Algorithm Verification (one single target point existing in the different searching subregion).</title>
<p>The red pentacle indicates the position of the target set beforehand that needs to be found by the robots in the subregion. The blue asterisks represent the robots. (A) Target being set in the upper right side; (B) Target being set in the lower left side; (C) Target being set in the lower right side; (D) Target being set in the upper left side.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g002" position="float" xlink:type="simple"/></fig>
<p>When there are multiple targets, our proposed algorithm is equally effective. The simulation results shown in <xref ref-type="fig" rid="pone-0111970-g003">Figure 3(A)</xref> represent the initial state of each particle. The blue dots represent searching particles, and the red dots represent the target point. From <xref ref-type="fig" rid="pone-0111970-g003">Figure 3(B)</xref>, one can see that each target has been found by several particles.</p>
<fig id="pone-0111970-g003" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g003</object-id><label>Figure 3</label><caption>
<title>Algorithm Verification (multiple targets existing in the searching subregion).</title>
<p>The red pentacles indicate the position of the target set beforehand that need to be found by the robots in the subregion. The blue asterisks represent the robots. (A) Original state of the robots; (B) Search Results of the Robots.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g003" position="float" xlink:type="simple"/></fig></sec><sec id="s2b">
<title>Robot control structure</title>
<p>The robot control structure is shown in <xref ref-type="fig" rid="pone-0111970-g004">Figure 4</xref>. The control structure is divided into three levels: organization layer, cooperation layer and execution layer. The organization layer determines the goals for moving (walking or rolling) and the necessary actions for mobility while information fusion and cooperation during the search process are in the cooperation layer. Finally, in the execution layer, the robots perform operations such as wall-following, obstacle avoidance, and goal trending. Here the organization layer and cooperation layer are very important as they determine whether the search can be accomplished efficiently.</p>
<fig id="pone-0111970-g004" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g004</object-id><label>Figure 4</label><caption>
<title>Robot control structure.</title>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g004" position="float" xlink:type="simple"/></fig>
<p>In this paper, robots use local communication for delivering information. This can effectively reduce the burden of communication and is easier to apply. The robot communication packet structure is shown in <xref ref-type="fig" rid="pone-0111970-g005">Figure 5</xref>. Communication consists of three parts: 1) the <italic>state</italic> which denotes the communication method (note that because map information is always delivered, there is not a state 01); 2) <italic>map information</italic> (This information includes data about the grid associated with the subregions and whether or not a subregion has been searched); and 3) <italic>related-DPSO parameters,</italic> which include the parameters for the DPSO algorithm.</p>
<fig id="pone-0111970-g005" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g005</object-id><label>Figure 5</label><caption>
<title>Communication Packet Structure.</title>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g005" position="float" xlink:type="simple"/></fig>
<p>During the entire search process, the robot exhibits three types of behavior: (1) a random search behavior, i.e., a robot in the search space uses the random search algorithm during the initial search; this type of behavior was denoted as <italic>liberty</italic>; (2) an organizational behavior, i.e., when a robot detects a target, it will inform other robots within its communication range to help determine the target position, and it will inform others about its position (denoted as <italic>organizer</italic>), and (3) a cooperative behavior where another robot helps the organizer find the targets (denoted as <italic>collaborator</italic>). These three types of robot behavior act continuously during the search procedure.</p>
<p>We can analyze robot behavior conversion during the search process. For example, suppose robots are designated by R1, R2, R3, R4, and R5 as shown in <xref ref-type="fig" rid="pone-0111970-g002">Figure 2</xref>. We used <italic>0</italic> to represent <italic>liberty</italic>, <italic>1</italic> to represent <italic>organizer</italic>, <italic>2</italic> to represent <italic>collaborator</italic>. In this example, the target is located at the top of <xref ref-type="fig" rid="pone-0111970-g002">Figure 2</xref>; so, at the beginning of the search, all robots are in state <italic>0</italic>. We then select a few key points in time during the search process to analyze the state of each robot. <italic>T1</italic> is the time in which a robot discovers a target. <italic>T2</italic> is the time after the communication and <italic>T3</italic> refers to the state when every robot is in the search process at some moment. <italic>T4</italic> refers to the state after the robots find the target position. From Table1, we can see that, at T1, R1 found a target, after which its state changed from <italic>0</italic> to <italic>1</italic>, while the other robots' state remains at <italic>0</italic> at T2 since they did not discover the target. Since, in this example, R2, R3, R4, and R5 are all in the communication range of R1, their states change to <italic>2</italic>. As the search progresses, the concentration value of the target signal of R2 is larger than R1; so the state for R2 change from<italic>2</italic> to <italic>1</italic>; the state of R1 switches from <italic>1</italic> to <italic>2</italic> at T3, and, at T4, after the robots determine the position of the target, and all states of the robots convert to <italic>0</italic>.</p>
<table-wrap id="pone-0111970-t001" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.t001</object-id><label>Table 1</label><caption>
<title>The State of Each Robot.</title>
</caption><alternatives><graphic id="pone-0111970-t001-1" position="float" mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.t001" xlink:type="simple"/>
<table><colgroup span="1"><col align="left" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/></colgroup>
<thead>
<tr>
<td align="left" rowspan="1" colspan="1"/>
<td align="left" rowspan="1" colspan="1">T1</td>
<td align="left" rowspan="1" colspan="1">T2</td>
<td align="left" rowspan="1" colspan="1">T3</td>
<td align="left" rowspan="1" colspan="1">T4</td>
</tr>
</thead>
<tbody>
<tr>
<td align="left" rowspan="1" colspan="1">R1</td>
<td align="left" rowspan="1" colspan="1">0→1</td>
<td align="left" rowspan="1" colspan="1">1</td>
<td align="left" rowspan="1" colspan="1">1→2</td>
<td align="left" rowspan="1" colspan="1">2→0</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">R2</td>
<td align="left" rowspan="1" colspan="1">0</td>
<td align="left" rowspan="1" colspan="1">0→2</td>
<td align="left" rowspan="1" colspan="1">2→1</td>
<td align="left" rowspan="1" colspan="1">1→0</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">R3</td>
<td align="left" rowspan="1" colspan="1">0</td>
<td align="left" rowspan="1" colspan="1">0→2</td>
<td align="left" rowspan="1" colspan="1">2</td>
<td align="left" rowspan="1" colspan="1">2→0</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">R4</td>
<td align="left" rowspan="1" colspan="1">0</td>
<td align="left" rowspan="1" colspan="1">0→2</td>
<td align="left" rowspan="1" colspan="1">2</td>
<td align="left" rowspan="1" colspan="1">2→0</td>
</tr>
<tr>
<td align="left" rowspan="1" colspan="1">R5</td>
<td align="left" rowspan="1" colspan="1">0</td>
<td align="left" rowspan="1" colspan="1">0→2</td>
<td align="left" rowspan="1" colspan="1">2</td>
<td align="left" rowspan="1" colspan="1">2→0</td>
</tr>
</tbody>
</table>
</alternatives><table-wrap-foot><fn id="nt101"><label/><p>In <xref ref-type="table" rid="pone-0111970-t001">Table 1</xref>, “T” refers to Time, “R” refers to Robot and the Arabic numerals refer to the state of each robot.</p></fn></table-wrap-foot></table-wrap>
<p>Each robot has two types of memory: one is permanent memory, which records the status of each subregion search and one is erasable memory. If the current subregional search is completed, the robot's state is recorded as <italic>1</italic>; otherwise, it is <italic>0</italic>. The robot's erasable memory records the state of subregional grids. If one is searched, the subgrid's state changes to <italic>1</italic>; otherwise, it is <italic>0</italic>. When the subregional search is completed, we inform memory A, which automatically clears the memory. We can then go to the next subregion to start recording again, which greatly reduces the storage burden.</p>
</sec></sec><sec id="s3">
<title>Results and Discussion</title>
<p>This section presents some results of applying the hybrid search algorithm to a set of robots searching a region. The scenarios include the cases of no targets, one target, one target and multiple targets and a comparison is also performed between the proposed hybrid method developed here and a pure random search.</p>
<sec id="s3a">
<title>A target utility function</title>
<p>Because of the large search area, if one searches the entire region all at once, the search efficiency may be greatly reduced, given the limited resources available and time constraints. In this paper, in order to improve search efficiency, we used a grid method for environmental modeling. That is, the entire search area was divided into several subregions. Employing the Principle of Priority Discovery for targets, to reduce the residence time of the target, consider a target utility function (5), to select which subregion should be initially searched. <disp-formula id="pone.0111970.e012"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pone.0111970.e012" xlink:type="simple"/><label>(5)</label></disp-formula></p>
<p>In (5) <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e013" xlink:type="simple"/></inline-formula> denotes the concentration of the target signal detected in subregion <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e014" xlink:type="simple"/></inline-formula>, and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e015" xlink:type="simple"/></inline-formula> is the distance between the center of subregion <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e016" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e017" xlink:type="simple"/></inline-formula>. The coefficients <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e018" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e019" xlink:type="simple"/></inline-formula> are weights. When <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e020" xlink:type="simple"/></inline-formula>, there is no target within the subregion. Note that <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e021" xlink:type="simple"/></inline-formula> means that the target utility value of subregion <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e022" xlink:type="simple"/></inline-formula> can be detected within subregion <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e023" xlink:type="simple"/></inline-formula>. Each robot has its own identification tag, and the first region to be searched is selected by the first robot (tagged as number 1); then, the choice of the second subregion to be searched is determined by the first robot to complete the searching of the first subregion because the concentration of signals in each region is random.</p>
<p>In order to prove the effect of the target utility function developed in this paper, suppose all of region is divided into 100 subregions (shown in <xref ref-type="fig" rid="pone-0111970-g006">Figure 6</xref>). Assume that the concentration values of these subregions can be detected, as shown in <xref ref-type="fig" rid="pone-0111970-g007">Figure 7</xref>. This figure shows the concentration values of these subregions.</p>
<fig id="pone-0111970-g006" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g006</object-id><label>Figure 6</label><caption>
<title>Region Division.</title>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g006" position="float" xlink:type="simple"/></fig><fig id="pone-0111970-g007" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g007</object-id><label>Figure 7</label><caption>
<title>Values of subregions.</title>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g007" position="float" xlink:type="simple"/></fig>
<p>Suppose the center-to-center distance of two adjacent subregions is10; further let the angle region distance be <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e024" xlink:type="simple"/></inline-formula>, and select <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e025" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pone.0111970.e026" xlink:type="simple"/></inline-formula>. From (3), subregion B1 has the highest target utility value; so we first select this subregion to search. When the searching of subregion B1 is completed, we use (3) again to select the next subregion to search, which is subregion B2 in this example. This procedure is repeated resulting in the search route shown in <xref ref-type="fig" rid="pone-0111970-g008">Figure 8</xref>.</p>
<fig id="pone-0111970-g008" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g008</object-id><label>Figure 8</label><caption>
<title>Search route (The number of the subregions indicate the sequence of the robot search route).</title>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g008" position="float" xlink:type="simple"/></fig>
<p>As discussed above, we can see that when using the utility function to select which subregion should be searched, the search becomes more flexible, and the strong signal concentration of subregions in the region can be searched as soon as possible.</p>
<p>To search in a fixed manner, such as from top to bottom or from left to right mandates a search pattern that will ignore a noticeably strong regional concentration of signals to run its pattern. This was the case found in region B19. Such an inflexible method finds the target too late to be usable for processing, which wastes time and is very inefficient for any research effort.</p>
</sec><sec id="s3b">
<title>Simulation results</title>
<p>In order to validate the performance of the proposed method, we compared the experimental simulation results by using a single search algorithm with that of hybrid search algorithm in different subregions, which are shown in <xref ref-type="fig" rid="pone-0111970-g009">Figure 9</xref> to Figure12. Before we discuss the results, let us define some of the evaluation criteria first.</p>
<fig id="pone-0111970-g009" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g009</object-id><label>Figure 9</label><caption>
<title>Comparison results of three algorithms with no target existing in the subregion.</title>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g009" position="float" xlink:type="simple"/></fig>
<p>T: The total searching time of the whole region.</p>
<p>Tn: The searching time of the robots detecting the n-th target by cooperation, where n is a natural number, i.e., n = 1, 2, 3…</p>
<p>N: The total number of targets that the robots can detect by cooperation in the whole searching region, where N is a natural number, i.e., N = 1,2,3…</p>
<p>Experiment I: No target exists in the searching subregion.</p>
<p>We selected a searching region where no target existed in each subregion, and compared the searching time of the robots using a single algorithm (i.e., either a random algorithm or a DPSO algorithm) and the hybrid algorithm. <xref ref-type="fig" rid="pone-0111970-g009">Figure 9</xref> shows the simulation results which compare results of the total searching time (T). We can see that the results from the random algorithm and the hybrid algorithm do not differ much from each other because when there is no target existing in the subregion, the hybrid algorithm becomes only a random searching one. On the other hand, the DPSO algorithm spends a little more time searching because the DPSO algorithm itself is much more complex than the random algorithm and costs more in time during the whole searching process.</p>
<p>From the simulation results above, we conclude that in a region with no targets, the three algorithms have similar performance. The next experiment used other experimental environments to test the performance of the three algorithms.</p>
<p>Experiment II: Only a single target exists in the searching subregion.</p>
<p>Here, we chose an environment with only one single target in the subregion to be searched. In this case, we changed the location of the target twice. First we set the location of the target to be far away from the starting point of the robots (shown in <xref ref-type="fig" rid="pone-0111970-g010">Figure 10(A)</xref>), and second the distance is longer than the robot's perception ability to detect the targets (shown in <xref ref-type="fig" rid="pone-0111970-g010">Figure 10(B)</xref>). The simulation result is shown in <xref ref-type="fig" rid="pone-0111970-g010">Figure 10(A)</xref>. Next we set the location of the target to be close to the starting point of the robots and the distance was within the robot's perception ability. The result is shown in <xref ref-type="fig" rid="pone-0111970-g010">Figure 10(C)</xref>. In these two experiments, we chose two evaluation criteria to test the performance, one being the time used to find the first target (T1), and the other being the total searching time (T). Because the robots don't know how many targets we have set in the whole region, they have to finish the whole searching process. After using the single algorithms and the hybrid algorithm separately, we collected the experiment results shown in <xref ref-type="fig" rid="pone-0111970-g010">Figure 10</xref> (C) and (D).</p>
<fig id="pone-0111970-g010" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g010</object-id><label>Figure 10</label><caption>
<title>The initial position of the robots and comparison results of three algorithms with a single target in the subregion.</title>
<p>D: The distance of the robot's perceiving ability. d: The distance between the start point to the nearest robot. T: The total searching time of the whole region. T1: The searching time of the robots detecting the first target by cooperation.(A).d&lt;D; (B).d&gt;&gt;D; (C). The comparison results of three algorithms where d&lt;D; (D). The comparison results of three algorithms where d&gt;&gt;D.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g010" position="float" xlink:type="simple"/></fig>
<p>We can see, from <xref ref-type="fig" rid="pone-0111970-g010">Figure 10</xref> (A), that the time to determine the first target (T1) by using the hybrid algorithm is shorter than that of the DPSO algorithm and the random algorithm when the target is outside the range of the robots' perception. Next, from <xref ref-type="fig" rid="pone-0111970-g010">Figure 10(B)</xref>, we can see that time T1 of the hybrid algorithm and the DPSO algorithm are almost the same when the target is within the perception range of the robots. In addition, the time T1 of these two algorithms is better than the random algorithm in this case. One question to consider is: Why did we get different performance results in almost the same environment when comparing the two algorithms to the random one? The reason is that the location of the target was different in the two experimental environments. In one case the target was very far away from the starting point of the robots and in the other case, the target is near to the starting point. In <xref ref-type="fig" rid="pone-0111970-g010">Figure 10(B)</xref> the distance between the target and the starting point is within the robot's sensing ability. Therefore, the hybrid algorithm switches from the random algorithm immediately to the DPSO algorithm after searching for a short period of time; hence, the robots almost always use the DPSO algorithm all the way to the target, but they will use the random algorithm transitorily. This is why these two algorithms spend almost the same amount of time in determining the target. Now, in the other criterion, the total searching time (T), we can see that the hybrid algorithm had the best results, and the DPSO algorithm spent the most time in searching.</p>
<p>From the simulation experiment above, we can draw several conclusions. First, in the environment with only one target, the hybrid algorithm had the best performance whether the target was close to the starting point of the robots or not. Second, the determination time of both the DPSO and the hybrid algorithm were almost identical when the distance from the target to the starting point was short, and the determination time of the hybrid algorithm was shorter than DPSO when the distance was longer than the robots' perception ability.</p>
<p>Experiment III: Multiple targets exist in the searching subregion.</p>
<p>Here we set up two experiments: one having two targets and the other having five targets in a subregion. The simulation results are shown in <xref ref-type="fig" rid="pone-0111970-g011">Figure 11</xref> and <xref ref-type="fig" rid="pone-0111970-g012">Figure 12</xref>. T1 represents the time when the first target is determined, and T2 represents the time when the second target is determined. From the results of these two simulations, we can see that the advantages of the hybrid algorithm are more obvious in finding all the targets. First, the hybrid algorithm, unlike the random algorithm, can avoid the problem of missing targets. This can be seen from <xref ref-type="fig" rid="pone-0111970-g011">Figure 11</xref>. Time T1 of the random algorithm is 0 because this algorithm cannot find the target. In addition, from <xref ref-type="fig" rid="pone-0111970-g012">Figure 12</xref>, the number of targets determined by the random algorithm is less than that of the other two methods. This is because the speed of the robots using the random algorithm remained the same no matter whether they found the target or not. Robots do not change their searching speed according to the distance between them and the target; however, the hybrid algorithm does. This characteristic of the hybrid algorithm to change its speed dynamically according to the distance between robots and targets speeds up the process of searching and identifying targets. The robot will slow down so as not to miss the target upon approach. On the other hand, when it is far away from the target, the robot will increase its speed in order to approach the target as soon as possible. All these hybrid algorithm advantages decrease searching time and improve efficiency. We can see from <xref ref-type="fig" rid="pone-0111970-g012">Figure 12</xref> that, although the DPSO algorithm does not miss the targets, it spends more time than that of the hybrid algorithm. This is because, when robots are far away from the target and cannot sense any target, DPSO, which is a single algorithm, cannot switch to the random algorithm like the hybrid algorithm does to speed up the searching process. It should be noted that multi-target searching is more complicated than single target searching. Therefore, the searching time of multi-target is much longer than that of a single one.</p>
<fig id="pone-0111970-g011" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g011</object-id><label>Figure 11</label><caption>
<title>The comparison results of three algorithms with two targets existing in subregion.</title>
<p>T: The total searching time of the whole region. Tn: The searching time of the robots detecting the n-th target by cooperation, where n is a natural number, i.e., n = 1, 2, 3… here n = 2.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g011" position="float" xlink:type="simple"/></fig><fig id="pone-0111970-g012" position="float"><object-id pub-id-type="doi">10.1371/journal.pone.0111970.g012</object-id><label>Figure 12</label><caption>
<title>The comparison results of three algorithms with five targets existing in subregion.</title>
<p>T: The total searching time of the whole region. N: The total number of targets that the robots can detect by cooperation in the whole searching region, where N is a natural number, i.e., N = 1, 2, 3….The left ordinate axis is the number of targets robots found, and the right ordinate axis presents algorithm search time. This figure shows that the random algorithm spent shorter time in searching, but the number of targets found was less than that found by the other two methods. On the other hand, the proposed hybrid algorithm spent almost the same amount of time in the complete search of the entire subregion, and found all targets; hence the hybrid algorithm is superior to the other two algorithms.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pone.0111970.g012" position="float" xlink:type="simple"/></fig>
<p>From the different groups of simulation results above, our first conclusion states that the proposed hybrid algorithm is superior to the DPSO algorithm and similar to the random algorithm in terms of total searching time. The reason why the hybrid algorithm is similar to the random algorithm is because when multiple targets are existing in the subregion, robots will switch to the DPSO algorithm many times. We know DPSO is more complex than the random algorithm, which leads to the result that the presented hybrid algorithm takes more time to finish the whole multi-targets exiting region than a pure random algorithm even though it can change robots' searching speed. However, more importantly, the hybrid algorithm can guarantee the robots will detect all the targets without losing one, while a randomized algorithm cannot. Concerning the performance of target determination time, the hybrid algorithm performed better than DPSO in almost all cases. The only case where the hybrid algorithm performed similar to DPSO is when the distance between target and the starting point was close. Finally, the hybrid algorithm we propose can guarantee finding all the targets in the whole region.</p>
<p>Based on these conclusions, we see that the proposed Hybrid algorithm can complete the search task without missing a target while ensuring an excellent performance throughout.</p>
</sec></sec><sec id="s4">
<title>Conclusions</title>
<p>Throughout the simulation, when a random search method was combined with the DPSO method, the search process for targets in unknown environments was improved. Furthermore, using our local communication strategy and our storage strategy greatly reduced the burden on hardware; so the search tasks were easier to complete. Of course, in the simulation studies, we used simulated robots. An area of future research will focus on applying the proposed hybrid method to real robots as well as investigating possible methods to efficiently implement the approach on embedded controllers.</p>
</sec></body>
<back><ref-list>
<title>References</title>
<ref id="pone.0111970-Sheh1"><label>1</label>
<mixed-citation publication-type="other" xlink:type="simple">Sheh R, Jacoff A, Virts AM, Kimura T, Pellenz J, <etal>et al</etal>.. (2014) Advancing the State of Urban Search and Rescue Robotics through the Robot Cup Rescue Robot League Competition, in <italic>Field and Service Robotics</italic>, Results of the 8<sup>th</sup> Int. Conf., K. Yoshida and S. Tadokoro (eds), Springer Tracts in Advanced Robotics 92, Springer Berlin Heidelberg, 2014, ch.9, 127–142, ISBN: 978-3-642-40685-0.</mixed-citation>
</ref>
<ref id="pone.0111970-Kruijff1"><label>2</label>
<mixed-citation publication-type="other" xlink:type="simple">Kruijff GJ, Janíček M, Keshavdas S, Larochelle B, Zender H, <etal>et al</etal>.. (2014) Experience in System Design for Human-Robot Teaming in Urban Search and Rescue, in <italic>Field and Service Robotics</italic>, Results of the 8<sup>th</sup> Int.Conf., K. Yoshida and S. Tadokoro (eds), Springer Tracts in Advanced Robotics 92, Springer Berlin Heidelberg, 2014, ch.8: 111–125, ISBN: 978-3-642-40685-0.</mixed-citation>
</ref>
<ref id="pone.0111970-Sharma1"><label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Sharma</surname><given-names>KD</given-names></name>, <name name-style="western"><surname>Chatterjee</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Rakshit</surname><given-names>A</given-names></name> (<year>2014</year>) <article-title>Harmony search-based hybrid stable adaptive fuzzy tracking controllers for vision-based mobile robot navigation[J]</article-title>. <source>Machine Vision and Applications</source> <volume>25 (2)</volume>: <fpage>405</fpage>–<lpage>419</lpage>.</mixed-citation>
</ref>
<ref id="pone.0111970-Wang1"><label>4</label>
<mixed-citation publication-type="other" xlink:type="simple">Wang P, Li J, Zhang Y (2014) The Nonfragile Controller with Covariance Constraint for Stable Motion of Quadruped Search-Rescue Robot[J]. Advances in Mechanical Engineering, 1–10.</mixed-citation>
</ref>
<ref id="pone.0111970-Guizzo1"><label>5</label>
<mixed-citation publication-type="other" xlink:type="simple">Guizzo E (2011), Japan Earthquake, More Robots to the Rescue, IEEE Spectrum, Available: <ext-link ext-link-type="uri" xlink:href="http://spectrum.ieee.org/automaton/robotics/industrial-robots/japan-earthquake-more-robots-to-the-rescue" xlink:type="simple">http://spectrum.ieee.org/automaton/robotics/industrial-robots/japan-earthquake-more-robots-to-the-rescue</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0111970-Nanjanath1"><label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Nanjanath</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Gini</surname><given-names>M</given-names></name> (<year>2010</year>) <article-title>Repeated Auctions for Robust Task Execution by a Robot Team</article-title>. <source>ROBOTICS AND AUTONOMOUS SYSTEMS</source> <volume>58</volume>: <fpage>900</fpage>–<lpage>909</lpage>.</mixed-citation>
</ref>
<ref id="pone.0111970-Geoffrey1"><label>7</label>
<mixed-citation publication-type="other" xlink:type="simple">Geoffrey AH (2010) Search in the Physical World. Carnegie Mellon University. Paper 37. Available: <ext-link ext-link-type="uri" xlink:href="http://repository.cmu.edu/dissertations/37" xlink:type="simple">http://repository.cmu.edu/dissertations/37</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0111970-Wood1"><label>8</label>
<mixed-citation publication-type="other" xlink:type="simple">Wood JG (2011) Search and Tracking of an Unknown Number of Targets by a Team of Autonomous Agents Utilizing Time-evolving Partition Classification, Dept. Mech. Eng., Univ. California, Berkeley, <ext-link ext-link-type="uri" xlink:href="http://escholarship.org/uc/item/47b0x4t5" xlink:type="simple">http://escholarship.org/uc/item/47b0x4t5</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0111970-BO1"><label>9</label>
<mixed-citation publication-type="other" xlink:type="simple">BO A (2012) Automated Negotiation for Complex Multi-Agent Resource Allocation. Proquest, Umi Dissertation Publishing. 262.</mixed-citation>
</ref>
<ref id="pone.0111970-Perc1"><label>10</label>
<mixed-citation publication-type="other" xlink:type="simple">Perc M, Szolnoki A (2010) Coevolutionary games—a mini review. BioSystems, 99(2), 109–125.</mixed-citation>
</ref>
<ref id="pone.0111970-Hoff1"><label>11</label>
<mixed-citation publication-type="other" xlink:type="simple">Hoff NR, Sagoff A, Wood RJ, and Nagpal R (2010). Two foraging algorithms for robot swarms using only local communication. International Conference on Robotics and Biomimetics, Tianjin, China. pp. 123–130. doi: 10.1109/ROBIO.2010.5723314</mixed-citation>
</ref>
<ref id="pone.0111970-Darvishzadah1"><label>12</label>
<mixed-citation publication-type="other" xlink:type="simple">Darvishzadah A (2011) Distributed Multi-Robot Collaboration Using Evolutionary Computation, M.S. thesis, Dept. Comp. Sci., Univ. California, Riverside, 2011. <ext-link ext-link-type="uri" xlink:href="http://escholarship.org/uc/item/85w16452" xlink:type="simple">http://escholarship.org/uc/item/85w16452</ext-link>.</mixed-citation>
</ref>
<ref id="pone.0111970-Sisso1"><label>13</label>
<mixed-citation publication-type="other" xlink:type="simple">Sisso I, Shima T, Ben-Haim Y (2010) Info-Gap Approach to Multiagent Search Under Severe Uncertainty. IEEE Trans. Robotics, <volume>26(6): </volume>: 1032–1041.</mixed-citation>
</ref>
<ref id="pone.0111970-Cai1"><label>14</label>
<mixed-citation publication-type="other" xlink:type="simple">Cai Y, Yang SX (2013) A potential-PSO approach to cooperative target searching of multi-robots in unknown environments. Int. Journal of Robotics and Automation, <volume>28(4)</volume> . doi: 10.2316/Journal.206.2013.4.206–3769</mixed-citation>
</ref>
<ref id="pone.0111970-Darvishzadeh1"><label>15</label>
<mixed-citation publication-type="other" xlink:type="simple">Darvishzadeh A, Bhanu B (2014) Distributed multi-robot search in the real-world using modified particle swarm optimization[C]//Proceedings of the 2014 conference companion on Genetic and evolutionary computation companion. ACM, 169–170.</mixed-citation>
</ref>
<ref id="pone.0111970-Tang1"><label>16</label>
<mixed-citation publication-type="book" xlink:type="simple">Tang Q, Eberhard P (2013) Mechanical PSO Aided by Extremum Seeking for Swarm Robots Cooperative Search, Advances in Swarm Intelligence. YTan, YShi, HMo, eds., ICSI, Part I, LNCS 7928, Springer-Verlag Berlin Heidelberg, 64–71.</mixed-citation>
</ref>
<ref id="pone.0111970-Zhang1"><label>17</label>
<mixed-citation publication-type="other" xlink:type="simple">Zhang J, Zhang C, Chu T, Perc M (2011). Resolution of the stochastic strategy spatial prisoner's dilemma by means of particle swarm optimization. PloS one, <volume>6(7)</volume>: , e21787.</mixed-citation>
</ref>
</ref-list></back>
</article>